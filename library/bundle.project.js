require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"api":[function(require,module,exports){
"use strict";
cc._RFpush(module, '4c169pnu1VJqIgC2umDXj89', 'api');
// lib/api.js

var qwest = require('qwest');

var ajax = function ajax(type, url, data) {
    var promise = new Promise(function (resolve, reject) {
        qwest.map(type, url, data).then(function (res, data) {
            if (data.ok) {
                resolve(data);
            } else {
                reject(data);
            }
        });
    });

    return promise;
};

var api = {
    login: function login(data) {
        return ajax('POST', 'http://127.0.0.1:8123/api/login/', data);
    }
};

module.exports = api;

cc._RFpop();
},{"qwest":"qwest"}],"lodash":[function(require,module,exports){
(function (global){
"use strict";
cc._RFpush(module, '9f2f1hkSF9Nk6WvHxAs9uqP', 'lodash');
// lib/lodash.js

"use strict";(function(){var undefined;var VERSION="4.2.0";var BIND_FLAG=1,BIND_KEY_FLAG=2,CURRY_BOUND_FLAG=4,CURRY_FLAG=8,CURRY_RIGHT_FLAG=16,PARTIAL_FLAG=32,PARTIAL_RIGHT_FLAG=64,ARY_FLAG=128,REARG_FLAG=256,FLIP_FLAG=512;var UNORDERED_COMPARE_FLAG=1,PARTIAL_COMPARE_FLAG=2;var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION="...";var HOT_COUNT=150,HOT_SPAN=16;var LARGE_ARRAY_SIZE=200;var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;var FUNC_ERROR_TEXT="Expected a function";var HASH_UNDEFINED="__lodash_hash_undefined__";var INFINITY=1 / 0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e308,NAN=0 / 0;var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH - 1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH >>> 1;var PLACEHOLDER="__lodash_placeholder__";var argsTag="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag="[object Function]",genTag="[object GeneratorFunction]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",symbolTag="[object Symbol]",weakMapTag="[object WeakMap]";var arrayBufferTag="[object ArrayBuffer]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]";var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;var reEscapedHtml=/&(?:amp|lt|gt|quot|#39|#96);/g,reUnescapedHtml=/[&<>"'`]/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);var reTrim=/^\s+|\s+$/g,reTrimStart=/^\s+/,reTrimEnd=/\s+$/;var reEscapeChar=/\\(\\)?/g;var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;var reFlags=/\w*$/;var reHasHexPrefix=/^0x/i;var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;var reIsBinary=/^0b[01]+$/i;var reIsHostCtor=/^\[object .+?Constructor\]$/;var reIsOctal=/^0o[0-7]+$/i;var reIsUint=/^(?:0|[1-9]\d*)$/;var reLatin1=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;var reNoMatch=/($^)/;var reUnescapedString=/['\n\r\u2028\u2029\\]/g;var rsAstralRange="\\ud800-\\udfff",rsComboMarksRange="\\u0300-\\u036f\\ufe20-\\ufe23",rsComboSymbolsRange="\\u20d0-\\u20f0",rsDingbatRange="\\u2700-\\u27bf",rsLowerRange="a-z\\xdf-\\xf6\\xf8-\\xff",rsMathOpRange="\\xac\\xb1\\xd7\\xf7",rsNonCharRange="\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",rsQuoteRange="\\u2018\\u2019\\u201c\\u201d",rsSpaceRange=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",rsUpperRange="A-Z\\xc0-\\xd6\\xd8-\\xde",rsVarRange="\\ufe0e\\ufe0f",rsBreakRange=rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;var rsAstral="[" + rsAstralRange + "]",rsBreak="[" + rsBreakRange + "]",rsCombo="[" + rsComboMarksRange + rsComboSymbolsRange + "]",rsDigits="\\d+",rsDingbat="[" + rsDingbatRange + "]",rsLower="[" + rsLowerRange + "]",rsMisc="[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]",rsFitz="\\ud83c[\\udffb-\\udfff]",rsModifier="(?:" + rsCombo + "|" + rsFitz + ")",rsNonAstral="[^" + rsAstralRange + "]",rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",rsUpper="[" + rsUpperRange + "]",rsZWJ="\\u200d";var rsLowerMisc="(?:" + rsLower + "|" + rsMisc + ")",rsUpperMisc="(?:" + rsUpper + "|" + rsMisc + ")",reOptMod=rsModifier + "?",rsOptVar="[" + rsVarRange + "]?",rsOptJoin="(?:" + rsZWJ + "(?:" + [rsNonAstral,rsRegional,rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*",rsSeq=rsOptVar + reOptMod + rsOptJoin,rsEmoji="(?:" + [rsDingbat,rsRegional,rsSurrPair].join("|") + ")" + rsSeq,rsSymbol="(?:" + [rsNonAstral + rsCombo + "?",rsCombo,rsRegional,rsSurrPair,rsAstral].join("|") + ")";var reComboMark=RegExp(rsCombo,"g");var reComplexSymbol=RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq,"g");var reHasComplexSymbol=RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");var reBasicWord=/[a-zA-Z0-9]+/g;var reComplexWord=RegExp([rsUpper + "?" + rsLower + "+(?=" + [rsBreak,rsUpper,"$"].join("|") + ")",rsUpperMisc + "+(?=" + [rsBreak,rsUpper + rsLowerMisc,"$"].join("|") + ")",rsUpper + "?" + rsLowerMisc + "+",rsUpper + "+",rsDigits,rsEmoji].join("|"),"g");var reHasComplexWord=/[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;var contextProps=["Array","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Reflect","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"];var templateCounter=-1;var typedArrayTags={};typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;var cloneableTags={};cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;var deburredLetters={"脌":"A","脕":"A","脗":"A","脙":"A","脛":"A","脜":"A","脿":"a","谩":"a","芒":"a","茫":"a","盲":"a","氓":"a","脟":"C","莽":"c","脨":"D","冒":"d","脠":"E","脡":"E","脢":"E","脣":"E","猫":"e","茅":"e","锚":"e","毛":"e","脤":"I","脥":"I","脦":"I","脧":"I","矛":"i","铆":"i","卯":"i","茂":"i","脩":"N","帽":"n","脪":"O","脫":"O","脭":"O","脮":"O","脰":"O","脴":"O","貌":"o","贸":"o","么":"o","玫":"o","枚":"o","酶":"o","脵":"U","脷":"U","脹":"U","脺":"U","霉":"u","煤":"u","没":"u","眉":"u","脻":"Y","媒":"y","每":"y","脝":"Ae","忙":"ae","脼":"Th","镁":"th","脽":"ss"};var htmlEscapes={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"};var htmlUnescapes={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"};var objectTypes={"function":true,object:true};var stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};var freeParseFloat=parseFloat,freeParseInt=parseInt;var freeExports=objectTypes[typeof exports] && exports && !exports.nodeType?exports:null;var freeModule=objectTypes[typeof module] && module && !module.nodeType?module:null;var freeGlobal=checkGlobal(freeExports && freeModule && typeof global == "object" && global);var freeSelf=checkGlobal(objectTypes[typeof self] && self);var freeWindow=checkGlobal(objectTypes[typeof window] && window);var moduleExports=freeModule && freeModule.exports === freeExports?freeExports:null;var thisGlobal=checkGlobal(objectTypes[typeof this] && this);var root=freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function("return this")();function addMapEntry(map,pair){map.set(pair[0],pair[1]);return map;}function addSetEntry(set,value){set.add(value);return set;}function apply(func,thisArg,args){var length=args.length;switch(length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array.length;while(++index < length) {var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}function arrayConcat(array,other){var index=-1,length=array.length,othIndex=-1,othLength=other.length,result=Array(length + othLength);while(++index < length) {result[index] = array[index];}while(++othIndex < othLength) {result[index++] = other[othIndex];}return result;}function arrayEach(array,iteratee){var index=-1,length=array.length;while(++index < length) {if(iteratee(array[index],index,array) === false){break;}}return array;}function arrayEachRight(array,iteratee){var length=array.length;while(length--) {if(iteratee(array[length],length,array) === false){break;}}return array;}function arrayEvery(array,predicate){var index=-1,length=array.length;while(++index < length) {if(!predicate(array[index],index,array)){return false;}}return true;}function arrayFilter(array,predicate){var index=-1,length=array.length,resIndex=-1,result=[];while(++index < length) {var value=array[index];if(predicate(value,index,array)){result[++resIndex] = value;}}return result;}function arrayIncludes(array,value){return !!array.length && baseIndexOf(array,value,0) > -1;}function arrayIncludesWith(array,value,comparator){var index=-1,length=array.length;while(++index < length) {if(comparator(value,array[index])){return true;}}return false;}function arrayMap(array,iteratee){var index=-1,length=array.length,result=Array(length);while(++index < length) {result[index] = iteratee(array[index],index,array);}return result;}function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index < length) {array[offset + index] = values[index];}return array;}function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array.length;if(initAccum && length){accumulator = array[++index];}while(++index < length) {accumulator = iteratee(accumulator,array[index],index,array);}return accumulator;}function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array.length;if(initAccum && length){accumulator = array[--length];}while(length--) {accumulator = iteratee(accumulator,array[length],length,array);}return accumulator;}function arraySome(array,predicate){var index=-1,length=array.length;while(++index < length) {if(predicate(array[index],index,array)){return true;}}return false;}function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index < length) {var value=array[index],current=iteratee(value);if(current != null && (computed === undefined?current === current:comparator(current,computed))){var computed=current,result=value;}}return result;}function baseFind(collection,predicate,eachFunc,retKey){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result = retKey?key:value;return false;}});return result;}function baseFindIndex(array,predicate,fromRight){var length=array.length,index=fromRight?length:-1;while(fromRight?index--:++index < length) {if(predicate(array[index],index,array)){return index;}}return -1;}function baseIndexOf(array,value,fromIndex){if(value !== value){return indexOfNaN(array,fromIndex);}var index=fromIndex - 1,length=array.length;while(++index < length) {if(array[index] === value){return index;}}return -1;}function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator = initAccum?(initAccum = false,value):iteratee(accumulator,value,index,collection);});return accumulator;}function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--) {array[length] = array[length].value;}return array;}function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index < length) {var current=iteratee(array[index]);if(current !== undefined){result = result === undefined?current:result + current;}}return result;}function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index < n) {result[index] = iteratee(index);}return result;}function baseToPairs(object,props){return arrayMap(props,function(key){return [key,object[key]];});}function baseUnary(func){return function(value){return func(value);};}function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index < length && baseIndexOf(chrSymbols,strSymbols[index],0) > -1) {}return index;}function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index-- && baseIndexOf(chrSymbols,strSymbols[index],0) > -1) {}return index;}function checkGlobal(value){return value && value.Object === Object?value:null;}function compareAscending(value,other){if(value !== other){var valIsNull=value === null,valIsUndef=value === undefined,valIsReflexive=value === value;var othIsNull=other === null,othIsUndef=other === undefined,othIsReflexive=other === other;if(value > other && !othIsNull || !valIsReflexive || valIsNull && !othIsUndef && othIsReflexive || valIsUndef && othIsReflexive){return 1;}if(value < other && !valIsNull || !othIsReflexive || othIsNull && !valIsUndef && valIsReflexive || othIsUndef && valIsReflexive){return -1;}}return 0;}function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index < length) {var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index >= ordersLength){return result;}var order=orders[index];return result * (order == "desc"?-1:1);}}return object.index - other.index;}function deburrLetter(letter){return deburredLetters[letter];}function escapeHtmlChar(chr){return htmlEscapes[chr];}function escapeStringChar(chr){return "\\" + stringEscapes[chr];}function indexOfNaN(array,fromIndex,fromRight){var length=array.length,index=fromIndex + (fromRight?0:-1);while(fromRight?index--:++index < length) {var other=array[index];if(other !== other){return index;}}return -1;}function isHostObject(value){var result=false;if(value != null && typeof value.toString != "function"){try{result = !!(value + "");}catch(e) {}}return result;}function isIndex(value,length){value = typeof value == "number" || reIsUint.test(value)?+value:-1;length = length == null?MAX_SAFE_INTEGER:length;return value > -1 && value % 1 == 0 && value < length;}function iteratorToArray(iterator){var data,result=[];while(!(data = iterator.next()).done) {result.push(data.value);}return result;}function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index] = [key,value];});return result;}function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=-1,result=[];while(++index < length) {if(array[index] === placeholder){array[index] = PLACEHOLDER;result[++resIndex] = index;}}return result;}function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index] = value;});return result;}function stringSize(string){if(!(string && reHasComplexSymbol.test(string))){return string.length;}var result=reComplexSymbol.lastIndex = 0;while(reComplexSymbol.test(string)) {result++;}return result;}function stringToArray(string){return string.match(reComplexSymbol);}function unescapeHtmlChar(chr){return htmlUnescapes[chr];}function runInContext(context){context = context?_.defaults({},context,_.pick(root,contextProps)):root;var Date=context.Date,Error=context.Error,Math=context.Math,RegExp=context.RegExp,TypeError=context.TypeError;var arrayProto=context.Array.prototype,objectProto=context.Object.prototype;var funcToString=context.Function.prototype.toString;var hasOwnProperty=objectProto.hasOwnProperty;var idCounter=0;var objectCtorString=funcToString.call(Object);var objectToString=objectProto.toString;var oldDash=root._;var reIsNative=RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?") + "$");var Reflect=context.Reflect,Symbol=context.Symbol,Uint8Array=context.Uint8Array,clearTimeout=context.clearTimeout,enumerate=Reflect?Reflect.enumerate:undefined,getPrototypeOf=Object.getPrototypeOf,getOwnPropertySymbols=Object.getOwnPropertySymbols,iteratorSymbol=typeof (iteratorSymbol = Symbol && Symbol.iterator) == "symbol"?iteratorSymbol:undefined,propertyIsEnumerable=objectProto.propertyIsEnumerable,setTimeout=context.setTimeout,splice=arrayProto.splice;var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=Object.keys,nativeMax=Math.max,nativeMin=Math.min,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;var Map=getNative(context,"Map"),Set=getNative(context,"Set"),WeakMap=getNative(context,"WeakMap"),nativeCreate=getNative(Object,"create");var metaMap=WeakMap && new WeakMap();var mapCtorString=Map?funcToString.call(Map):"",setCtorString=Set?funcToString.call(Set):"";var symbolProto=Symbol?Symbol.prototype:undefined,symbolValueOf=Symbol?symbolProto.valueOf:undefined,symbolToString=Symbol?symbolProto.toString:undefined;var realNames={};function lodash(value){if(isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,"__wrapped__")){return wrapperClone(value);}}return new LodashWrapper(value);}function baseLodash(){}function LodashWrapper(value,chainAll){this.__wrapped__ = value;this.__actions__ = [];this.__chain__ = !!chainAll;this.__index__ = 0;this.__values__ = undefined;}lodash.templateSettings = {escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:lodash}};function LazyWrapper(value){this.__wrapped__ = value;this.__actions__ = [];this.__dir__ = 1;this.__filtered__ = false;this.__iteratees__ = [];this.__takeCount__ = MAX_ARRAY_LENGTH;this.__views__ = [];}function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__ = copyArray(this.__actions__);result.__dir__ = this.__dir__;result.__filtered__ = this.__filtered__;result.__iteratees__ = copyArray(this.__iteratees__);result.__takeCount__ = this.__takeCount__;result.__views__ = copyArray(this.__views__);return result;}function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__ = -1;result.__filtered__ = true;}else {result = this.clone();result.__dir__ *= -1;}return result;}function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir < 0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end - start,index=isRight?end:start - 1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length){return baseWrapperValue(array,this.__actions__);}var result=[];outer: while(length-- && resIndex < takeCount) {index += dir;var iterIndex=-1,value=array[index];while(++iterIndex < iterLength) {var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type == LAZY_MAP_FLAG){value = computed;}else if(!computed){if(type == LAZY_FILTER_FLAG){continue outer;}else {break outer;}}}result[resIndex++] = value;}return result;}function Hash(){}function hashDelete(hash,key){return hashHas(hash,key) && delete hash[key];}function hashGet(hash,key){if(nativeCreate){var result=hash[key];return result === HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(hash,key)?hash[key]:undefined;}function hashHas(hash,key){return nativeCreate?hash[key] !== undefined:hasOwnProperty.call(hash,key);}function hashSet(hash,key,value){hash[key] = nativeCreate && value === undefined?HASH_UNDEFINED:value;}function MapCache(values){var index=-1,length=values?values.length:0;this.clear();while(++index < length) {var entry=values[index];this.set(entry[0],entry[1]);}}function mapClear(){this.__data__ = {hash:new Hash(),map:Map?new Map():[],string:new Hash()};}function mapDelete(key){var data=this.__data__;if(isKeyable(key)){return hashDelete(typeof key == "string"?data.string:data.hash,key);}return Map?data.map["delete"](key):assocDelete(data.map,key);}function mapGet(key){var data=this.__data__;if(isKeyable(key)){return hashGet(typeof key == "string"?data.string:data.hash,key);}return Map?data.map.get(key):assocGet(data.map,key);}function mapHas(key){var data=this.__data__;if(isKeyable(key)){return hashHas(typeof key == "string"?data.string:data.hash,key);}return Map?data.map.has(key):assocHas(data.map,key);}function mapSet(key,value){var data=this.__data__;if(isKeyable(key)){hashSet(typeof key == "string"?data.string:data.hash,key,value);}else if(Map){data.map.set(key,value);}else {assocSet(data.map,key,value);}return this;}function SetCache(values){var index=-1,length=values?values.length:0;this.__data__ = new MapCache();while(++index < length) {this.push(values[index]);}}function cacheHas(cache,value){var map=cache.__data__;if(isKeyable(value)){var data=map.__data__,hash=typeof value == "string"?data.string:data.hash;return hash[value] === HASH_UNDEFINED;}return map.has(value);}function cachePush(value){var map=this.__data__;if(isKeyable(value)){var data=map.__data__,hash=typeof value == "string"?data.string:data.hash;hash[value] = HASH_UNDEFINED;}else {map.set(value,HASH_UNDEFINED);}}function Stack(values){var index=-1,length=values?values.length:0;this.clear();while(++index < length) {var entry=values[index];this.set(entry[0],entry[1]);}}function stackClear(){this.__data__ = {array:[],map:null};}function stackDelete(key){var data=this.__data__,array=data.array;return array?assocDelete(array,key):data.map["delete"](key);}function stackGet(key){var data=this.__data__,array=data.array;return array?assocGet(array,key):data.map.get(key);}function stackHas(key){var data=this.__data__,array=data.array;return array?assocHas(array,key):data.map.has(key);}function stackSet(key,value){var data=this.__data__,array=data.array;if(array){if(array.length < LARGE_ARRAY_SIZE - 1){assocSet(array,key,value);}else {data.array = null;data.map = new MapCache(array);}}var map=data.map;if(map){map.set(key,value);}return this;}function assocDelete(array,key){var index=assocIndexOf(array,key);if(index < 0){return false;}var lastIndex=array.length - 1;if(index == lastIndex){array.pop();}else {splice.call(array,index,1);}return true;}function assocGet(array,key){var index=assocIndexOf(array,key);return index < 0?undefined:array[index][1];}function assocHas(array,key){return assocIndexOf(array,key) > -1;}function assocIndexOf(array,key){var length=array.length;while(length--) {if(eq(array[length][0],key)){return length;}}return -1;}function assocSet(array,key,value){var index=assocIndexOf(array,key);if(index < 0){array.push([key,value]);}else {array[index][1] = value;}}function assignInDefaults(objValue,srcValue,key,object){if(objValue === undefined || eq(objValue,objectProto[key]) && !hasOwnProperty.call(object,key)){return srcValue;}return objValue;}function assignMergeValue(object,key,value){if(value !== undefined && !eq(object[key],value) || typeof key == "number" && value === undefined && !(key in object)){object[key] = value;}}function assignValue(object,key,value){var objValue=object[key];if(!eq(objValue,value) || eq(objValue,objectProto[key]) && !hasOwnProperty.call(object,key) || value === undefined && !(key in object)){object[key] = value;}}function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}function baseAssign(object,source){return object && copyObject(source,keys(source),object);}function baseAt(object,paths){var index=-1,isNil=object == null,length=paths.length,result=Array(length);while(++index < length) {result[index] = isNil?undefined:get(object,paths[index]);}return result;}function baseClamp(number,lower,upper){if(number === number){if(upper !== undefined){number = number <= upper?number:upper;}if(lower !== undefined){number = number >= lower?number:lower;}}return number;}function baseClone(value,isDeep,customizer,key,object,stack){var result;if(customizer){result = object?customizer(value,key,object,stack):customizer(value);}if(result !== undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result = initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else {var tag=getTag(value),isFunc=tag == funcTag || tag == genTag;if(tag == objectTag || tag == argsTag || isFunc && !object){if(isHostObject(value)){return object?value:{};}result = initCloneObject(isFunc?{}:value);if(!isDeep){return copySymbols(value,baseAssign(result,value));}}else {return cloneableTags[tag]?initCloneByTag(value,tag,isDeep):object?value:{};}}stack || (stack = new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);(isArr?arrayEach:baseForOwn)(value,function(subValue,key){assignValue(result,key,baseClone(subValue,isDeep,customizer,key,value,stack));});return isArr?result:copySymbols(value,result);}function baseConforms(source){var props=keys(source),length=props.length;return function(object){if(object == null){return !length;}var index=length;while(index--) {var key=props[index],predicate=source[key],value=object[key];if(value === undefined && !(key in Object(object)) || !predicate(value)){return false;}}return true;};}var baseCreate=(function(){function object(){}return function(prototype){if(isObject(prototype)){object.prototype = prototype;var result=new object();object.prototype = undefined;}return result || {};};})();function baseDelay(func,wait,args){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined,args);},wait);}function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values = arrayMap(values,baseUnary(iteratee));}if(comparator){includes = arrayIncludesWith;isCommon = false;}else if(values.length >= LARGE_ARRAY_SIZE){includes = cacheHas;isCommon = false;values = new SetCache(values);}outer: while(++index < length) {var value=array[index],computed=iteratee?iteratee(value):value;if(isCommon && computed === computed){var valuesIndex=valuesLength;while(valuesIndex--) {if(values[valuesIndex] === computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}var baseEach=createBaseEach(baseForOwn);var baseEachRight=createBaseEach(baseForOwnRight,true);function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result = !!predicate(value,index,collection);return result;});return result;}function baseFill(array,value,start,end){var length=array.length;start = toInteger(start);if(start < 0){start = -start > length?0:length + start;}end = end === undefined || end > length?length:toInteger(end);if(end < 0){end += length;}end = start > end?0:toLength(end);while(start < end) {array[start++] = value;}return array;}function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}function baseFlatten(array,isDeep,isStrict,result){result || (result = []);var index=-1,length=array.length;while(++index < length) {var value=array[index];if(isArrayLikeObject(value) && (isStrict || isArray(value) || isArguments(value))){if(isDeep){baseFlatten(value,isDeep,isStrict,result);}else {arrayPush(result,value);}}else if(!isStrict){result[result.length] = value;}}return result;}var baseFor=createBaseFor();var baseForRight=createBaseFor(true);function baseForIn(object,iteratee){return object == null?object:baseFor(object,iteratee,keysIn);}function baseForOwn(object,iteratee){return object && baseFor(object,iteratee,keys);}function baseForOwnRight(object,iteratee){return object && baseForRight(object,iteratee,keys);}function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}function baseGet(object,path){path = isKey(path,object)?[path + ""]:baseToPath(path);var index=0,length=path.length;while(object != null && index < length) {object = object[path[index++]];}return index && index == length?object:undefined;}function baseHas(object,key){return hasOwnProperty.call(object,key) || typeof object == "object" && key in object && getPrototypeOf(object) === null;}function baseHasIn(object,key){return key in Object(object);}function baseInRange(number,start,end){return number >= nativeMin(start,end) && number < nativeMax(start,end);}function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),result=[];while(othIndex--) {var array=arrays[othIndex];if(othIndex && iteratee){array = arrayMap(array,baseUnary(iteratee));}caches[othIndex] = !comparator && (iteratee || array.length >= 120)?new SetCache(othIndex && array):undefined;}array = arrays[0];var index=-1,length=array.length,seen=caches[0];outer: while(++index < length) {var value=array[index],computed=iteratee?iteratee(value):value;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){var othIndex=othLength;while(--othIndex) {var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}function baseInvoke(object,path,args){if(!isKey(path,object)){path = baseToPath(path);object = parent(object,path);path = last(path);}var func=object == null?object:object[path];return func == null?undefined:apply(func,object,args);}function baseIsEqual(value,other,customizer,bitmask,stack){if(value === other){return true;}if(value == null || other == null || !isObject(value) && !isObjectLike(other)){return value !== value && other !== other;}return baseIsEqualDeep(value,other,baseIsEqual,customizer,bitmask,stack);}function baseIsEqualDeep(object,other,equalFunc,customizer,bitmask,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=arrayTag,othTag=arrayTag;if(!objIsArr){objTag = getTag(object);if(objTag == argsTag){objTag = objectTag;}else if(objTag != objectTag){objIsArr = isTypedArray(object);}}if(!othIsArr){othTag = getTag(other);if(othTag == argsTag){othTag = objectTag;}else if(othTag != objectTag){othIsArr = isTypedArray(other);}}var objIsObj=objTag == objectTag && !isHostObject(object),othIsObj=othTag == objectTag && !isHostObject(other),isSameTag=objTag == othTag;if(isSameTag && !(objIsArr || objIsObj)){return equalByTag(object,other,objTag,equalFunc,customizer,bitmask);}var isPartial=bitmask & PARTIAL_COMPARE_FLAG;if(!isPartial){var objIsWrapped=objIsObj && hasOwnProperty.call(object,"__wrapped__"),othIsWrapped=othIsObj && hasOwnProperty.call(other,"__wrapped__");if(objIsWrapped || othIsWrapped){return equalFunc(objIsWrapped?object.value():object,othIsWrapped?other.value():other,customizer,bitmask,stack);}}if(!isSameTag){return false;}stack || (stack = new Stack());return (objIsArr?equalArrays:equalObjects)(object,other,equalFunc,customizer,bitmask,stack);}function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object == null){return !length;}object = Object(object);while(index--) {var data=matchData[index];if(noCustomizer && data[2]?data[1] !== object[data[0]]:!(data[0] in object)){return false;}}while(++index < length) {data = matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer && data[2]){if(objValue === undefined && !(key in object)){return false;}}else {var stack=new Stack(),result=customizer?customizer(objValue,srcValue,key,object,source,stack):undefined;if(!(result === undefined?baseIsEqual(srcValue,objValue,customizer,UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG,stack):result)){return false;}}}return true;}function baseIteratee(value){var type=typeof value;if(type == "function"){return value;}if(value == null){return identity;}if(type == "object"){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}function baseKeys(object){return nativeKeys(Object(object));}function baseKeysIn(object){object = object == null?object:Object(object);var result=[];for(var key in object) {result.push(key);}return result;}if(enumerate && !propertyIsEnumerable.call({valueOf:1},"valueOf")){baseKeysIn = function(object){return iteratorToArray(enumerate(object));};}function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index] = iteratee(value,key,collection);});return result;}function baseMatches(source){var matchData=getMatchData(source);if(matchData.length == 1 && matchData[0][2]){var key=matchData[0][0],value=matchData[0][1];return function(object){if(object == null){return false;}return object[key] === value && (value !== undefined || key in Object(object));};}return function(object){return object === source || baseIsMatch(object,source,matchData);};}function baseMatchesProperty(path,srcValue){return function(object){var objValue=get(object,path);return objValue === undefined && objValue === srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,undefined,UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);};}function baseMerge(object,source,srcIndex,customizer,stack){if(object === source){return;}var props=isArray(source) || isTypedArray(source)?undefined:keysIn(source);arrayEach(props || source,function(srcValue,key){if(props){key = srcValue;srcValue = source[key];}if(isObject(srcValue)){stack || (stack = new Stack());baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else {var newValue=customizer?customizer(object[key],srcValue,key + "",object,source,stack):undefined;if(newValue === undefined){newValue = srcValue;}assignMergeValue(object,key,newValue);}});}function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=object[key],srcValue=source[key],stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key + "",object,source,stack):undefined,isCommon=newValue === undefined;if(isCommon){newValue = srcValue;if(isArray(srcValue) || isTypedArray(srcValue)){if(isArray(objValue)){newValue = srcIndex?copyArray(objValue):objValue;}else if(isArrayLikeObject(objValue)){newValue = copyArray(objValue);}else {isCommon = false;newValue = baseClone(srcValue);}}else if(isPlainObject(srcValue) || isArguments(srcValue)){if(isArguments(objValue)){newValue = toPlainObject(objValue);}else if(!isObject(objValue) || srcIndex && isFunction(objValue)){isCommon = false;newValue = baseClone(srcValue);}else {newValue = srcIndex?baseClone(objValue):objValue;}}else {isCommon = false;}}stack.set(srcValue,newValue);if(isCommon){mergeFunc(newValue,srcValue,srcIndex,customizer,stack);}assignMergeValue(object,key,newValue);}function baseOrderBy(collection,iteratees,orders){var index=-1,toIteratee=getIteratee();iteratees = arrayMap(iteratees.length?iteratees:Array(1),function(iteratee){return toIteratee(iteratee);});var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return {criteria:criteria,index:++index,value:value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}function basePick(object,props){object = Object(object);return arrayReduce(props,function(result,key){if(key in object){result[key] = object[key];}return result;},{});}function basePickBy(object,predicate){var result={};baseForIn(object,function(value,key){if(predicate(value,key)){result[key] = value;}});return result;}function baseProperty(key){return function(object){return object == null?undefined:object[key];};}function basePropertyDeep(path){return function(object){return baseGet(object,path);};}function basePullAll(array,values){return basePullAllBy(array,values);}function basePullAllBy(array,values,iteratee){var index=-1,length=values.length,seen=array;if(iteratee){seen = arrayMap(array,function(value){return iteratee(value);});}while(++index < length) {var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex = baseIndexOf(seen,computed,fromIndex)) > -1) {if(seen !== array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length - 1;while(length--) {var index=indexes[length];if(lastIndex == length || index != previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else if(!isKey(index,array)){var path=baseToPath(index),object=parent(array,path);if(object != null){delete object[last(path)];}}else {delete array[index];}}}return array;}function baseRandom(lower,upper){return lower + nativeFloor(nativeRandom() * (upper - lower + 1));}function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end - start) / (step || 1)),0),result=Array(length);while(length--) {result[fromRight?length:++index] = start;start += step;}return result;}function baseSet(object,path,value,customizer){path = isKey(path,object)?[path + ""]:baseToPath(path);var index=-1,length=path.length,lastIndex=length - 1,nested=object;while(nested != null && ++index < length) {var key=path[index];if(isObject(nested)){var newValue=value;if(index != lastIndex){var objValue=nested[key];newValue = customizer?customizer(objValue,key,nested):undefined;if(newValue === undefined){newValue = objValue == null?isIndex(path[index + 1])?[]:{}:objValue;}}assignValue(nested,key,newValue);}nested = nested[key];}return object;}var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};function baseSlice(array,start,end){var index=-1,length=array.length;if(start < 0){start = -start > length?0:length + start;}end = end > length?length:end;if(end < 0){end += length;}length = start > end?0:end - start >>> 0;start >>>= 0;var result=Array(length);while(++index < length) {result[index] = array[index + start];}return result;}function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result = predicate(value,index,collection);return !result;});return !!result;}function baseSortedIndex(array,value,retHighest){var low=0,high=array?array.length:low;if(typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH){while(low < high) {var mid=low + high >>> 1,computed=array[mid];if((retHighest?computed <= value:computed < value) && computed !== null){low = mid + 1;}else {high = mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}function baseSortedIndexBy(array,value,iteratee,retHighest){value = iteratee(value);var low=0,high=array?array.length:0,valIsNaN=value !== value,valIsNull=value === null,valIsUndef=value === undefined;while(low < high) {var mid=nativeFloor((low + high) / 2),computed=iteratee(array[mid]),isDef=computed !== undefined,isReflexive=computed === computed;if(valIsNaN){var setLow=isReflexive || retHighest;}else if(valIsNull){setLow = isReflexive && isDef && (retHighest || computed != null);}else if(valIsUndef){setLow = isReflexive && (retHighest || isDef);}else if(computed == null){setLow = false;}else {setLow = retHighest?computed <= value:computed < value;}if(setLow){low = mid + 1;}else {high = mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}function baseSortedUniq(array){return baseSortedUniqBy(array);}function baseSortedUniqBy(array,iteratee){var index=0,length=array.length,value=array[0],computed=iteratee?iteratee(value):value,seen=computed,resIndex=0,result=[value];while(++index < length) {value = array[index],computed = iteratee?iteratee(value):value;if(!eq(computed,seen)){seen = computed;result[++resIndex] = value;}}return result;}function baseToPath(value){return isArray(value)?value:stringToPath(value);}function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon = false;includes = arrayIncludesWith;}else if(length >= LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon = false;includes = cacheHas;seen = new SetCache();}else {seen = iteratee?[]:result;}outer: while(++index < length) {var value=array[index],computed=iteratee?iteratee(value):value;if(isCommon && computed === computed){var seenIndex=seen.length;while(seenIndex--) {if(seen[seenIndex] === computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen !== result){seen.push(computed);}result.push(value);}}return result;}function baseUnset(object,path){path = isKey(path,object)?[path + ""]:baseToPath(path);object = parent(object,path);var key=last(path);return object != null && has(object,key)?delete object[key]:true;}function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index < length) && predicate(array[index],index,array)) {}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index + 1:length):baseSlice(array,fromRight?index + 1:0,fromRight?length:index);}function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result = result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}function baseXor(arrays,iteratee,comparator){var index=-1,length=arrays.length;while(++index < length) {var result=result?arrayPush(baseDifference(result,arrays[index],iteratee,comparator),baseDifference(arrays[index],result,iteratee,comparator)):arrays[index];}return result && result.length?baseUniq(result,iteratee,comparator):[];}function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index < length) {assignFunc(result,props[index],index < valsLength?values[index]:undefined);}return result;}function cloneBuffer(buffer){var Ctor=buffer.constructor,result=new Ctor(buffer.byteLength),view=new Uint8Array(result);view.set(new Uint8Array(buffer));return result;}function cloneMap(map){var Ctor=map.constructor;return arrayReduce(mapToArray(map),addMapEntry,new Ctor());}function cloneRegExp(regexp){var Ctor=regexp.constructor,result=new Ctor(regexp.source,reFlags.exec(regexp));result.lastIndex = regexp.lastIndex;return result;}function cloneSet(set){var Ctor=set.constructor;return arrayReduce(setToArray(set),addSetEntry,new Ctor());}function cloneSymbol(symbol){return Symbol?Object(symbolValueOf.call(symbol)):{};}function cloneTypedArray(typedArray,isDeep){var buffer=typedArray.buffer,Ctor=typedArray.constructor;return new Ctor(isDeep?cloneBuffer(buffer):buffer,typedArray.byteOffset,typedArray.length);}function composeArgs(args,partials,holders){var holdersLength=holders.length,argsIndex=-1,argsLength=nativeMax(args.length - holdersLength,0),leftIndex=-1,leftLength=partials.length,result=Array(leftLength + argsLength);while(++leftIndex < leftLength) {result[leftIndex] = partials[leftIndex];}while(++argsIndex < holdersLength) {result[holders[argsIndex]] = args[argsIndex];}while(argsLength--) {result[leftIndex++] = args[argsIndex++];}return result;}function composeArgsRight(args,partials,holders){var holdersIndex=-1,holdersLength=holders.length,argsIndex=-1,argsLength=nativeMax(args.length - holdersLength,0),rightIndex=-1,rightLength=partials.length,result=Array(argsLength + rightLength);while(++argsIndex < argsLength) {result[argsIndex] = args[argsIndex];}var offset=argsIndex;while(++rightIndex < rightLength) {result[offset + rightIndex] = partials[rightIndex];}while(++holdersIndex < holdersLength) {result[offset + holders[holdersIndex]] = args[argsIndex++];}return result;}function copyArray(source,array){var index=-1,length=source.length;array || (array = Array(length));while(++index < length) {array[index] = source[index];}return array;}function copyObject(source,props,object){return copyObjectWith(source,props,object);}function copyObjectWith(source,props,object,customizer){object || (object = {});var index=-1,length=props.length;while(++index < length) {var key=props[index],newValue=customizer?customizer(object[key],source[key],key,object,source):source[key];assignValue(object,key,newValue);}return object;}function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee),accumulator);};}function createAssigner(assigner){return rest(function(object,sources){var index=-1,length=sources.length,customizer=length > 1?sources[length - 1]:undefined,guard=length > 2?sources[2]:undefined;customizer = typeof customizer == "function"?(length--,customizer):undefined;if(guard && isIterateeCall(sources[0],sources[1],guard)){customizer = length < 3?undefined:customizer;length = 1;}object = Object(object);while(++index < length) {var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection == null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index < length) {if(iteratee(iterable[index],index,iterable) === false){break;}}return collection;};}function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--) {var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable) === false){break;}}return object;};}function createBaseWrapper(func,bitmask,thisArg){var isBind=bitmask & BIND_FLAG,Ctor=createCtorWrapper(func);function wrapper(){var fn=this && this !== root && this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}function createCaseFirst(methodName){return function(string){string = toString(string);var strSymbols=reHasComplexSymbol.test(string)?stringToArray(string):undefined,chr=strSymbols?strSymbols[0]:string.charAt(0),trailing=strSymbols?strSymbols.slice(1).join(""):string.slice(1);return chr[methodName]() + trailing;};}function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string)),callback,"");};}function createCtorWrapper(Ctor){return function(){var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);return isObject(result)?result:thisBinding;};}function createCurryWrapper(func,bitmask,arity){var Ctor=createCtorWrapper(func);function wrapper(){var length=arguments.length,index=length,args=Array(length),fn=this && this !== root && this instanceof wrapper?Ctor:func,placeholder=wrapper.placeholder;while(index--) {args[index] = arguments[index];}var holders=length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder?[]:replaceHolders(args,placeholder);length -= holders.length;return length < arity?createRecurryWrapper(func,bitmask,createHybridWrapper,placeholder,undefined,args,holders,undefined,undefined,arity - length):apply(fn,this,args);}return wrapper;}function createFlow(fromRight){return rest(function(funcs){funcs = baseFlatten(funcs);var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--) {var func=funcs[index];if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq && !wrapper && getFuncName(func) == "wrapper"){var wrapper=new LodashWrapper([],true);}}index = wrapper?index:length;while(++index < length) {func = funcs[index];var funcName=getFuncName(func),data=funcName == "wrapper"?getData(func):undefined;if(data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1){wrapper = wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else {wrapper = func.length == 1 && isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index < length) {result = funcs[index].call(this,result);}return result;};});}function createHybridWrapper(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask & ARY_FLAG,isBind=bitmask & BIND_FLAG,isBindKey=bitmask & BIND_KEY_FLAG,isCurry=bitmask & CURRY_FLAG,isCurryRight=bitmask & CURRY_RIGHT_FLAG,isFlip=bitmask & FLIP_FLAG,Ctor=isBindKey?undefined:createCtorWrapper(func);function wrapper(){var length=arguments.length,index=length,args=Array(length);while(index--) {args[index] = arguments[index];}if(partials){args = composeArgs(args,partials,holders);}if(partialsRight){args = composeArgsRight(args,partialsRight,holdersRight);}if(isCurry || isCurryRight){var placeholder=wrapper.placeholder,argsHolders=replaceHolders(args,placeholder);length -= argsHolders.length;if(length < arity){return createRecurryWrapper(func,bitmask,createHybridWrapper,placeholder,thisArg,args,argsHolders,argPos,ary,arity - length);}}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;if(argPos){args = reorder(args,argPos);}else if(isFlip && args.length > 1){args.reverse();}if(isAry && ary < args.length){args.length = ary;}if(this && this !== root && this instanceof wrapper){fn = Ctor || createCtorWrapper(fn);}return fn.apply(thisBinding,args);}return wrapper;}function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}function createOver(arrayFunc){return rest(function(iteratees){iteratees = arrayMap(baseFlatten(iteratees),getIteratee());return rest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}function createPadding(string,length,chars){length = toInteger(length);var strLength=stringSize(string);if(!length || strLength >= length){return "";}var padLength=length - strLength;chars = chars === undefined?" ":chars + "";var result=repeat(chars,nativeCeil(padLength / stringSize(chars)));return reHasComplexSymbol.test(chars)?stringToArray(result).slice(0,padLength).join(""):result.slice(0,padLength);}function createPartialWrapper(func,bitmask,thisArg,partials){var isBind=bitmask & BIND_FLAG,Ctor=createCtorWrapper(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength + argsLength),fn=this && this !== root && this instanceof wrapper?Ctor:func;while(++leftIndex < leftLength) {args[leftIndex] = partials[leftIndex];}while(argsLength--) {args[leftIndex++] = arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}function createRange(fromRight){return function(start,end,step){if(step && typeof step != "number" && isIterateeCall(start,end,step)){end = step = undefined;}start = toNumber(start);start = start === start?start:0;if(end === undefined){end = start;start = 0;}else {end = toNumber(end) || 0;}step = step === undefined?start < end?1:-1:toNumber(step) || 0;return baseRange(start,end,step,fromRight);};}function createRecurryWrapper(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask & CURRY_FLAG,newArgPos=argPos?copyArray(argPos):undefined,newsHolders=isCurry?holders:undefined,newHoldersRight=isCurry?undefined:holders,newPartials=isCurry?partials:undefined,newPartialsRight=isCurry?undefined:partials;bitmask |= isCurry?PARTIAL_FLAG:PARTIAL_RIGHT_FLAG;bitmask &= ~(isCurry?PARTIAL_RIGHT_FLAG:PARTIAL_FLAG);if(!(bitmask & CURRY_BOUND_FLAG)){bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newsHolders,newPartialsRight,newHoldersRight,newArgPos,ary,arity],result=wrapFunc.apply(undefined,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder = placeholder;return result;}function createRound(methodName){var func=Math[methodName];return function(number,precision){number = toNumber(number);precision = toInteger(precision);if(precision){var pair=(toString(number) + "e").split("e"),value=func(pair[0] + "e" + (+pair[1] + precision));pair = (toString(value) + "e").split("e");return +(pair[0] + "e" + (+pair[1] - precision));}return func(number);};}var createSet=!(Set && new Set([1,2]).size === 2)?noop:function(values){return new Set(values);};function createWrapper(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask & BIND_KEY_FLAG;if(!isBindKey && typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);partials = holders = undefined;}ary = ary === undefined?ary:nativeMax(toInteger(ary),0);arity = arity === undefined?arity:toInteger(arity);length -= holders?holders.length:0;if(bitmask & PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials = holders = undefined;}var data=isBindKey?undefined:getData(func),newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func = newData[0];bitmask = newData[1];thisArg = newData[2];partials = newData[3];holders = newData[4];arity = newData[9] = newData[9] == null?isBindKey?0:func.length:nativeMax(newData[9] - length,0);if(!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)){bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);}if(!bitmask || bitmask == BIND_FLAG){var result=createBaseWrapper(func,bitmask,thisArg);}else if(bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG){result = createCurryWrapper(func,bitmask,arity);}else if((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length){result = createPartialWrapper(func,bitmask,thisArg,partials);}else {result = createHybridWrapper.apply(undefined,newData);}var setter=data?baseSetData:setData;return setter(result,newData);}function equalArrays(array,other,equalFunc,customizer,bitmask,stack){var index=-1,isPartial=bitmask & PARTIAL_COMPARE_FLAG,isUnordered=bitmask & UNORDERED_COMPARE_FLAG,arrLength=array.length,othLength=other.length;if(arrLength != othLength && !(isPartial && othLength > arrLength)){return false;}var stacked=stack.get(array);if(stacked){return stacked == other;}var result=true;stack.set(array,other);while(++index < arrLength) {var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared !== undefined){if(compared){continue;}result = false;break;}if(isUnordered){if(!arraySome(other,function(othValue){return arrValue === othValue || equalFunc(arrValue,othValue,customizer,bitmask,stack);})){result = false;break;}}else if(!(arrValue === othValue || equalFunc(arrValue,othValue,customizer,bitmask,stack))){result = false;break;}}stack["delete"](array);return result;}function equalByTag(object,other,tag,equalFunc,customizer,bitmask){switch(tag){case arrayBufferTag:if(object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:return +object == +other;case errorTag:return object.name == other.name && object.message == other.message;case numberTag:return object != +object?other != +other:object == +other;case regexpTag:case stringTag:return object == other + "";case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask & PARTIAL_COMPARE_FLAG;convert || (convert = setToArray);return (isPartial || object.size == other.size) && equalFunc(convert(object),convert(other),customizer,bitmask | UNORDERED_COMPARE_FLAG);case symbolTag:return !!Symbol && symbolValueOf.call(object) == symbolValueOf.call(other);}return false;}function equalObjects(object,other,equalFunc,customizer,bitmask,stack){var isPartial=bitmask & PARTIAL_COMPARE_FLAG,objProps=keys(object),objLength=objProps.length,othProps=keys(other),othLength=othProps.length;if(objLength != othLength && !isPartial){return false;}var index=objLength;while(index--) {var key=objProps[index];if(!(isPartial?key in other:baseHas(other,key))){return false;}}var stacked=stack.get(object);if(stacked){return stacked == other;}var result=true;stack.set(object,other);var skipCtor=isPartial;while(++index < objLength) {key = objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}if(!(compared === undefined?objValue === othValue || equalFunc(objValue,othValue,customizer,bitmask,stack):compared)){result = false;break;}skipCtor || (skipCtor = key == "constructor");}if(result && !skipCtor){var objCtor=object.constructor,othCtor=other.constructor;if(objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)){result = false;}}stack["delete"](object);return result;}var getData=!metaMap?noop:function(func){return metaMap.get(func);};function getFuncName(func){var result=func.name + "",array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--) {var data=array[length],otherFunc=data.func;if(otherFunc == null || otherFunc == func){return data.name;}}return result;}function getIteratee(){var result=lodash.iteratee || iteratee;result = result === iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}var getLength=baseProperty("length");function getMatchData(object){var result=toPairs(object),length=result.length;while(length--) {result[length][2] = isStrictComparable(result[length][1]);}return result;}function getNative(object,key){var value=object == null?undefined:object[key];return isNative(value)?value:undefined;}var getSymbols=getOwnPropertySymbols || function(){return [];};function getTag(value){return objectToString.call(value);}if(Map && getTag(new Map()) != mapTag || Set && getTag(new Set()) != setTag){getTag = function(value){var result=objectToString.call(value),Ctor=result == objectTag?value.constructor:null,ctorString=typeof Ctor == "function"?funcToString.call(Ctor):"";if(ctorString){if(ctorString == mapCtorString){return mapTag;}if(ctorString == setCtorString){return setTag;}}return result;};}function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index < length) {var data=transforms[index],size=data.size;switch(data.type){case "drop":start += size;break;case "dropRight":end -= size;break;case "take":end = nativeMin(end,start + size);break;case "takeRight":start = nativeMax(start,end - size);break;}}return {start:start,end:end};}function hasPath(object,path,hasFunc){if(object == null){return false;}var result=hasFunc(object,path);if(!result && !isKey(path)){path = baseToPath(path);object = parent(object,path);if(object != null){path = last(path);result = hasFunc(object,path);}}var length=object?object.length:undefined;return result || !!length && isLength(length) && isIndex(path,length) && (isArray(object) || isString(object) || isArguments(object));}function initCloneArray(array){var length=array.length,result=array.constructor(length);if(length && typeof array[0] == "string" && hasOwnProperty.call(array,"index")){result.index = array.index;result.input = array.input;}return result;}function initCloneObject(object){if(isPrototype(object)){return {};}var Ctor=object.constructor;return baseCreate(isFunction(Ctor)?Ctor.prototype:undefined);}function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return cloneMap(object);case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return cloneSet(object);case symbolTag:return cloneSymbol(object);}}function indexKeys(object){var length=object?object.length:undefined;if(isLength(length) && (isArray(object) || isString(object) || isArguments(object))){return baseTimes(length,String);}return null;}function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index;if(type == "number"?isArrayLike(object) && isIndex(index,object.length):type == "string" && index in object){return eq(object[index],value);}return false;}function isKey(value,object){if(typeof value == "number"){return true;}return !isArray(value) && (reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object));}function isKeyable(value){var type=typeof value;return type == "number" || type == "boolean" || type == "string" && value !== "__proto__" || value == null;}function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other != "function" || !(funcName in LazyWrapper.prototype)){return false;}if(func === other){return true;}var data=getData(other);return !!data && func === data[0];}function isPrototype(value){var Ctor=value && value.constructor,proto=typeof Ctor == "function" && Ctor.prototype || objectProto;return value === proto;}function isStrictComparable(value){return value === value && !isObject(value);}function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask | srcBitmask,isCommon=newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);var isCombo=srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG;if(!(isCommon || isCombo)){return data;}if(srcBitmask & BIND_FLAG){data[2] = source[2];newBitmask |= bitmask & BIND_FLAG?0:CURRY_BOUND_FLAG;}var value=source[3];if(value){var partials=data[3];data[3] = partials?composeArgs(partials,value,source[4]):copyArray(value);data[4] = partials?replaceHolders(data[3],PLACEHOLDER):copyArray(source[4]);}value = source[5];if(value){partials = data[5];data[5] = partials?composeArgsRight(partials,value,source[6]):copyArray(value);data[6] = partials?replaceHolders(data[5],PLACEHOLDER):copyArray(source[6]);}value = source[7];if(value){data[7] = copyArray(value);}if(srcBitmask & ARY_FLAG){data[8] = data[8] == null?source[8]:nativeMin(data[8],source[8]);}if(data[9] == null){data[9] = source[9];}data[0] = source[0];data[1] = newBitmask;return data;}function mergeDefaults(objValue,srcValue,key,object,source,stack){if(isObject(objValue) && isObject(srcValue)){stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined,mergeDefaults,stack);}return objValue;}function parent(object,path){return path.length == 1?object:get(object,baseSlice(path,0,-1));}function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--) {var index=indexes[length];array[length] = isIndex(index,arrLength)?oldArray[index]:undefined;}return array;}var setData=(function(){var count=0,lastCalled=0;return function(key,value){var stamp=now(),remaining=HOT_SPAN - (stamp - lastCalled);lastCalled = stamp;if(remaining > 0){if(++count >= HOT_COUNT){return key;}}else {count = 0;}return baseSetData(key,value);};})();function stringToPath(string){var result=[];toString(string).replace(rePropName,function(match,number,quote,string){result.push(quote?string.replace(reEscapeChar,"$1"):number || match);});return result;}function toArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}function toFunction(value){return typeof value == "function"?value:identity;}function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__ = copyArray(wrapper.__actions__);result.__index__ = wrapper.__index__;result.__values__ = wrapper.__values__;return result;}function chunk(array,size){size = nativeMax(toInteger(size),0);var length=array?array.length:0;if(!length || size < 1){return [];}var index=0,resIndex=-1,result=Array(nativeCeil(length / size));while(index < length) {result[++resIndex] = baseSlice(array,index,index += size);}return result;}function compact(array){var index=-1,length=array?array.length:0,resIndex=-1,result=[];while(++index < length) {var value=array[index];if(value){result[++resIndex] = value;}}return result;}var concat=rest(function(array,values){if(!isArray(array)){array = array == null?[]:[Object(array)];}values = baseFlatten(values);return arrayConcat(array,values);});var difference=rest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,false,true)):[];});var differenceBy=rest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee = undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,false,true),getIteratee(iteratee)):[];});var differenceWith=rest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator = undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,false,true),undefined,comparator):[];});function drop(array,n,guard){var length=array?array.length:0;if(!length){return [];}n = guard || n === undefined?1:toInteger(n);return baseSlice(array,n < 0?0:n,length);}function dropRight(array,n,guard){var length=array?array.length:0;if(!length){return [];}n = guard || n === undefined?1:toInteger(n);n = length - n;return baseSlice(array,0,n < 0?0:n);}function dropRightWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}function dropWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3),true):[];}function fill(array,value,start,end){var length=array?array.length:0;if(!length){return [];}if(start && typeof start != "number" && isIterateeCall(array,value,start)){start = 0;end = length;}return baseFill(array,value,start,end);}function findIndex(array,predicate){return array && array.length?baseFindIndex(array,getIteratee(predicate,3)):-1;}function findLastIndex(array,predicate){return array && array.length?baseFindIndex(array,getIteratee(predicate,3),true):-1;}function flatten(array){var length=array?array.length:0;return length?baseFlatten(array):[];}function flattenDeep(array){var length=array?array.length:0;return length?baseFlatten(array,true):[];}function fromPairs(pairs){var index=-1,length=pairs?pairs.length:0,result={};while(++index < length) {var pair=pairs[index];result[pair[0]] = pair[1];}return result;}function head(array){return array?array[0]:undefined;}function indexOf(array,value,fromIndex){var length=array?array.length:0;if(!length){return -1;}fromIndex = toInteger(fromIndex);if(fromIndex < 0){fromIndex = nativeMax(length + fromIndex,0);}return baseIndexOf(array,value,fromIndex);}function initial(array){return dropRight(array,1);}var intersection=rest(function(arrays){var mapped=arrayMap(arrays,toArrayLikeObject);return mapped.length && mapped[0] === arrays[0]?baseIntersection(mapped):[];});var intersectionBy=rest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,toArrayLikeObject);if(iteratee === last(mapped)){iteratee = undefined;}else {mapped.pop();}return mapped.length && mapped[0] === arrays[0]?baseIntersection(mapped,getIteratee(iteratee)):[];});var intersectionWith=rest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,toArrayLikeObject);if(comparator === last(mapped)){comparator = undefined;}else {mapped.pop();}return mapped.length && mapped[0] === arrays[0]?baseIntersection(mapped,undefined,comparator):[];});function join(array,separator){return array?nativeJoin.call(array,separator):"";}function last(array){var length=array?array.length:0;return length?array[length - 1]:undefined;}function lastIndexOf(array,value,fromIndex){var length=array?array.length:0;if(!length){return -1;}var index=length;if(fromIndex !== undefined){index = toInteger(fromIndex);index = (index < 0?nativeMax(length + index,0):nativeMin(index,length - 1)) + 1;}if(value !== value){return indexOfNaN(array,index,true);}while(index--) {if(array[index] === value){return index;}}return -1;}var pull=rest(pullAll);function pullAll(array,values){return array && array.length && values && values.length?basePullAll(array,values):array;}function pullAllBy(array,values,iteratee){return array && array.length && values && values.length?basePullAllBy(array,values,getIteratee(iteratee)):array;}var pullAt=rest(function(array,indexes){indexes = arrayMap(baseFlatten(indexes),String);var result=baseAt(array,indexes);basePullAt(array,indexes.sort(compareAscending));return result;});function remove(array,predicate){var result=[];if(!(array && array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate = getIteratee(predicate,3);while(++index < length) {var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}function reverse(array){return array?nativeReverse.call(array):array;}function slice(array,start,end){var length=array?array.length:0;if(!length){return [];}if(end && typeof end != "number" && isIterateeCall(array,start,end)){start = 0;end = length;}else {start = start == null?0:toInteger(start);end = end === undefined?length:toInteger(end);}return baseSlice(array,start,end);}function sortedIndex(array,value){return baseSortedIndex(array,value);}function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee));}function sortedIndexOf(array,value){var length=array?array.length:0;if(length){var index=baseSortedIndex(array,value);if(index < length && eq(array[index],value)){return index;}}return -1;}function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee),true);}function sortedLastIndexOf(array,value){var length=array?array.length:0;if(length){var index=baseSortedIndex(array,value,true) - 1;if(eq(array[index],value)){return index;}}return -1;}function sortedUniq(array){return array && array.length?baseSortedUniq(array):[];}function sortedUniqBy(array,iteratee){return array && array.length?baseSortedUniqBy(array,getIteratee(iteratee)):[];}function tail(array){return drop(array,1);}function take(array,n,guard){if(!(array && array.length)){return [];}n = guard || n === undefined?1:toInteger(n);return baseSlice(array,0,n < 0?0:n);}function takeRight(array,n,guard){var length=array?array.length:0;if(!length){return [];}n = guard || n === undefined?1:toInteger(n);n = length - n;return baseSlice(array,n < 0?0:n,length);}function takeRightWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}function takeWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3)):[];}var union=rest(function(arrays){return baseUniq(baseFlatten(arrays,false,true));});var unionBy=rest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee = undefined;}return baseUniq(baseFlatten(arrays,false,true),getIteratee(iteratee));});var unionWith=rest(function(arrays){var comparator=last(arrays);if(isArrayLikeObject(comparator)){comparator = undefined;}return baseUniq(baseFlatten(arrays,false,true),undefined,comparator);});function uniq(array){return array && array.length?baseUniq(array):[];}function uniqBy(array,iteratee){return array && array.length?baseUniq(array,getIteratee(iteratee)):[];}function uniqWith(array,comparator){return array && array.length?baseUniq(array,undefined,comparator):[];}function unzip(array){if(!(array && array.length)){return [];}var length=0;array = arrayFilter(array,function(group){if(isArrayLikeObject(group)){length = nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}function unzipWith(array,iteratee){if(!(array && array.length)){return [];}var result=unzip(array);if(iteratee == null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined,group);});}var without=rest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});var xor=rest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});var xorBy=rest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee = undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee));});var xorWith=rest(function(arrays){var comparator=last(arrays);if(isArrayLikeObject(comparator)){comparator = undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);});var zip=rest(unzip);function zipObject(props,values){return baseZipObject(props || [],values || [],assignValue);}function zipObjectDeep(props,values){return baseZipObject(props || [],values || [],baseSet);}var zipWith=rest(function(arrays){var length=arrays.length,iteratee=length > 1?arrays[length - 1]:undefined;iteratee = typeof iteratee == "function"?(arrays.pop(),iteratee):undefined;return unzipWith(arrays,iteratee);});function chain(value){var result=lodash(value);result.__chain__ = true;return result;}function tap(value,interceptor){interceptor(value);return value;}function thru(value,interceptor){return interceptor(value);}var wrapperAt=rest(function(paths){paths = baseFlatten(paths);var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)){return this.thru(interceptor);}value = value.slice(start,+start + (length?1:0));value.__actions__.push({func:thru,args:[interceptor],thisArg:undefined});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length && !array.length){array.push(undefined);}return array;});});function wrapperChain(){return chain(this);}function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}function wrapperFlatMap(iteratee){return this.map(iteratee).flatten();}function wrapperNext(){if(this.__values__ === undefined){this.__values__ = toArray(this.value());}var done=this.__index__ >= this.__values__.length,value=done?undefined:this.__values__[this.__index__++];return {done:done,value:value};}function wrapperToIterator(){return this;}function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash) {var clone=wrapperClone(parent);clone.__index__ = 0;clone.__values__ = undefined;if(result){previous.__wrapped__ = clone;}else {result = clone;}var previous=clone;parent = parent.__wrapped__;}previous.__wrapped__ = value;return result;}function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped = new LazyWrapper(this);}wrapped = wrapped.reverse();wrapped.__actions__.push({func:thru,args:[reverse],thisArg:undefined});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}var countBy=createAggregator(function(result,value,key){hasOwnProperty.call(result,key)?++result[key]:result[key] = 1;});function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard && isIterateeCall(collection,predicate,guard)){predicate = undefined;}return func(collection,getIteratee(predicate,3));}function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}function find(collection,predicate){predicate = getIteratee(predicate,3);if(isArray(collection)){var index=baseFindIndex(collection,predicate);return index > -1?collection[index]:undefined;}return baseFind(collection,predicate,baseEach);}function findLast(collection,predicate){predicate = getIteratee(predicate,3);if(isArray(collection)){var index=baseFindIndex(collection,predicate,true);return index > -1?collection[index]:undefined;}return baseFind(collection,predicate,baseEachRight);}function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee));}function forEach(collection,iteratee){return typeof iteratee == "function" && isArray(collection)?arrayEach(collection,iteratee):baseEach(collection,toFunction(iteratee));}function forEachRight(collection,iteratee){return typeof iteratee == "function" && isArray(collection)?arrayEachRight(collection,iteratee):baseEachRight(collection,toFunction(iteratee));}var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else {result[key] = [value];}});function includes(collection,value,fromIndex,guard){collection = isArrayLike(collection)?collection:values(collection);fromIndex = fromIndex && !guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex < 0){fromIndex = nativeMax(length + fromIndex,0);}return isString(collection)?fromIndex <= length && collection.indexOf(value,fromIndex) > -1:!!length && baseIndexOf(collection,value,fromIndex) > -1;}var invokeMap=rest(function(collection,path,args){var index=-1,isFunc=typeof path == "function",isProp=isKey(path),result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){var func=isFunc?path:isProp && value != null?value[path]:undefined;result[++index] = func?apply(func,value,args):baseInvoke(value,path,args);});return result;});var keyBy=createAggregator(function(result,value,key){result[key] = value;});function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}function orderBy(collection,iteratees,orders,guard){if(collection == null){return [];}if(!isArray(iteratees)){iteratees = iteratees == null?[]:[iteratees];}orders = guard?undefined:orders;if(!isArray(orders)){orders = orders == null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return [[],[]];});function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length < 3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length < 3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;predicate = getIteratee(predicate,3);return func(collection,function(value,index,collection){return !predicate(value,index,collection);});}function sample(collection){var array=isArrayLike(collection)?collection:values(collection),length=array.length;return length > 0?array[baseRandom(0,length - 1)]:undefined;}function sampleSize(collection,n){var index=-1,result=toArray(collection),length=result.length,lastIndex=length - 1;n = baseClamp(toInteger(n),0,length);while(++index < n) {var rand=baseRandom(index,lastIndex),value=result[rand];result[rand] = result[index];result[index] = value;}result.length = n;return result;}function shuffle(collection){return sampleSize(collection,MAX_ARRAY_LENGTH);}function size(collection){if(collection == null){return 0;}if(isArrayLike(collection)){var result=collection.length;return result && isString(collection)?stringSize(collection):result;}return keys(collection).length;}function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard && isIterateeCall(collection,predicate,guard)){predicate = undefined;}return func(collection,getIteratee(predicate,3));}var sortBy=rest(function(collection,iteratees){if(collection == null){return [];}var length=iteratees.length;if(length > 1 && isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees = [];}else if(length > 2 && isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees.length = 1;}return baseOrderBy(collection,baseFlatten(iteratees),[]);});var now=Date.now;function after(n,func){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}n = toInteger(n);return function(){if(--n < 1){return func.apply(this,arguments);}};}function ary(func,n,guard){n = guard?undefined:n;n = func && n == null?func.length:n;return createWrapper(func,ARY_FLAG,undefined,undefined,undefined,undefined,n);}function before(n,func){var result;if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}n = toInteger(n);return function(){if(--n > 0){result = func.apply(this,arguments);}if(n <= 1){func = undefined;}return result;};}var bind=rest(function(func,thisArg,partials){var bitmask=BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,bind.placeholder);bitmask |= PARTIAL_FLAG;}return createWrapper(func,bitmask,thisArg,partials,holders);});var bindKey=rest(function(object,key,partials){var bitmask=BIND_FLAG | BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,bindKey.placeholder);bitmask |= PARTIAL_FLAG;}return createWrapper(key,bitmask,object,partials,holders);});function curry(func,arity,guard){arity = guard?undefined:arity;var result=createWrapper(func,CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder = curry.placeholder;return result;}function curryRight(func,arity,guard){arity = guard?undefined:arity;var result=createWrapper(func,CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder = curryRight.placeholder;return result;}function debounce(func,wait,options){var args,maxTimeoutId,result,stamp,thisArg,timeoutId,trailingCall,lastCalled=0,leading=false,maxWait=false,trailing=true;if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}wait = toNumber(wait) || 0;if(isObject(options)){leading = !!options.leading;maxWait = "maxWait" in options && nativeMax(toNumber(options.maxWait) || 0,wait);trailing = "trailing" in options?!!options.trailing:trailing;}function cancel(){if(timeoutId){clearTimeout(timeoutId);}if(maxTimeoutId){clearTimeout(maxTimeoutId);}lastCalled = 0;args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;}function complete(isCalled,id){if(id){clearTimeout(id);}maxTimeoutId = timeoutId = trailingCall = undefined;if(isCalled){lastCalled = now();result = func.apply(thisArg,args);if(!timeoutId && !maxTimeoutId){args = thisArg = undefined;}}}function delayed(){var remaining=wait - (now() - stamp);if(remaining <= 0 || remaining > wait){complete(trailingCall,maxTimeoutId);}else {timeoutId = setTimeout(delayed,remaining);}}function flush(){if(timeoutId && trailingCall || maxTimeoutId && trailing){result = func.apply(thisArg,args);}cancel();return result;}function maxDelayed(){complete(trailing,timeoutId);}function debounced(){args = arguments;stamp = now();thisArg = this;trailingCall = trailing && (timeoutId || !leading);if(maxWait === false){var leadingCall=leading && !timeoutId;}else {if(!maxTimeoutId && !leading){lastCalled = stamp;}var remaining=maxWait - (stamp - lastCalled),isCalled=remaining <= 0 || remaining > maxWait;if(isCalled){if(maxTimeoutId){maxTimeoutId = clearTimeout(maxTimeoutId);}lastCalled = stamp;result = func.apply(thisArg,args);}else if(!maxTimeoutId){maxTimeoutId = setTimeout(maxDelayed,remaining);}}if(isCalled && timeoutId){timeoutId = clearTimeout(timeoutId);}else if(!timeoutId && wait !== maxWait){timeoutId = setTimeout(delayed,wait);}if(leadingCall){isCalled = true;result = func.apply(thisArg,args);}if(isCalled && !timeoutId && !maxTimeoutId){args = thisArg = undefined;}return result;}debounced.cancel = cancel;debounced.flush = flush;return debounced;}var defer=rest(function(func,args){return baseDelay(func,1,args);});var delay=rest(function(func,wait,args){return baseDelay(func,toNumber(wait) || 0,args);});function flip(func){return createWrapper(func,FLIP_FLAG);}function memoize(func,resolver){if(typeof func != "function" || resolver && typeof resolver != "function"){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache = cache.set(key,result);return result;};memoized.cache = new memoize.Cache();return memoized;}function negate(predicate){if(typeof predicate != "function"){throw new TypeError(FUNC_ERROR_TEXT);}return function(){return !predicate.apply(this,arguments);};}function once(func){return before(2,func);}var overArgs=rest(function(func,transforms){transforms = arrayMap(baseFlatten(transforms),getIteratee());var funcsLength=transforms.length;return rest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index < length) {args[index] = transforms[index].call(this,args[index]);}return apply(func,this,args);});});var partial=rest(function(func,partials){var holders=replaceHolders(partials,partial.placeholder);return createWrapper(func,PARTIAL_FLAG,undefined,partials,holders);});var partialRight=rest(function(func,partials){var holders=replaceHolders(partials,partialRight.placeholder);return createWrapper(func,PARTIAL_RIGHT_FLAG,undefined,partials,holders);});var rearg=rest(function(func,indexes){return createWrapper(func,REARG_FLAG,undefined,undefined,undefined,baseFlatten(indexes));});function rest(func,start){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}start = nativeMax(start === undefined?func.length - 1:toInteger(start),0);return function(){var args=arguments,index=-1,length=nativeMax(args.length - start,0),array=Array(length);while(++index < length) {array[index] = args[start + index];}switch(start){case 0:return func.call(this,array);case 1:return func.call(this,args[0],array);case 2:return func.call(this,args[0],args[1],array);}var otherArgs=Array(start + 1);index = -1;while(++index < start) {otherArgs[index] = args[index];}otherArgs[start] = array;return apply(func,this,otherArgs);};}function spread(func,start){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}start = start === undefined?0:nativeMax(toInteger(start),0);return rest(function(args){var array=args[start],otherArgs=args.slice(0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading = "leading" in options?!!options.leading:leading;trailing = "trailing" in options?!!options.trailing:trailing;}return debounce(func,wait,{leading:leading,maxWait:wait,trailing:trailing});}function unary(func){return ary(func,1);}function wrap(value,wrapper){wrapper = wrapper == null?identity:wrapper;return partial(wrapper,value);}function clone(value){return baseClone(value);}function cloneWith(value,customizer){return baseClone(value,false,customizer);}function cloneDeep(value){return baseClone(value,true);}function cloneDeepWith(value,customizer){return baseClone(value,true,customizer);}function eq(value,other){return value === other || value !== value && other !== other;}function gt(value,other){return value > other;}function gte(value,other){return value >= other;}function isArguments(value){return isArrayLikeObject(value) && hasOwnProperty.call(value,"callee") && (!propertyIsEnumerable.call(value,"callee") || objectToString.call(value) == argsTag);}var isArray=Array.isArray;function isArrayLike(value){return value != null && !(typeof value == "function" && isFunction(value)) && isLength(getLength(value));}function isArrayLikeObject(value){return isObjectLike(value) && isArrayLike(value);}function isBoolean(value){return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;}function isDate(value){return isObjectLike(value) && objectToString.call(value) == dateTag;}function isElement(value){return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);}function isEmpty(value){if(isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value))){return !value.length;}for(var key in value) {if(hasOwnProperty.call(value,key)){return false;}}return true;}function isEqual(value,other){return baseIsEqual(value,other);}function isEqualWith(value,other,customizer){customizer = typeof customizer == "function"?customizer:undefined;var result=customizer?customizer(value,other):undefined;return result === undefined?baseIsEqual(value,other,customizer):!!result;}function isError(value){return isObjectLike(value) && typeof value.message == "string" && objectToString.call(value) == errorTag;}function isFinite(value){return typeof value == "number" && nativeIsFinite(value);}function isFunction(value){var tag=isObject(value)?objectToString.call(value):"";return tag == funcTag || tag == genTag;}function isInteger(value){return typeof value == "number" && value == toInteger(value);}function isLength(value){return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;}function isObject(value){var type=typeof value;return !!value && (type == "object" || type == "function");}function isObjectLike(value){return !!value && typeof value == "object";}function isMatch(object,source){return object === source || baseIsMatch(object,source,getMatchData(source));}function isMatchWith(object,source,customizer){customizer = typeof customizer == "function"?customizer:undefined;return baseIsMatch(object,source,getMatchData(source),customizer);}function isNaN(value){return isNumber(value) && value != +value;}function isNative(value){if(value == null){return false;}if(isFunction(value)){return reIsNative.test(funcToString.call(value));}return isObjectLike(value) && (isHostObject(value)?reIsNative:reIsHostCtor).test(value);}function isNull(value){return value === null;}function isNil(value){return value == null;}function isNumber(value){return typeof value == "number" || isObjectLike(value) && objectToString.call(value) == numberTag;}function isPlainObject(value){if(!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)){return false;}var proto=objectProto;if(typeof value.constructor == "function"){proto = getPrototypeOf(value);}if(proto === null){return true;}var Ctor=proto.constructor;return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;}function isRegExp(value){return isObject(value) && objectToString.call(value) == regexpTag;}function isSafeInteger(value){return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;}function isString(value){return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;}function isSymbol(value){return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;}function isTypedArray(value){return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];}function isUndefined(value){return value === undefined;}function lt(value,other){return value < other;}function lte(value,other){return value <= other;}function toArray(value){if(!value){return [];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(iteratorSymbol && value[iteratorSymbol]){return iteratorToArray(value[iteratorSymbol]());}var tag=getTag(value),func=tag == mapTag?mapToArray:tag == setTag?setToArray:values;return func(value);}function toInteger(value){if(!value){return value === 0?value:0;}value = toNumber(value);if(value === INFINITY || value === -INFINITY){var sign=value < 0?-1:1;return sign * MAX_INTEGER;}var remainder=value % 1;return value === value?remainder?value - remainder:value:0;}function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}function toNumber(value){if(isObject(value)){var other=isFunction(value.valueOf)?value.valueOf():value;value = isObject(other)?other + "":other;}if(typeof value != "string"){return value === 0?value:+value;}value = value.replace(reTrim,"");var isBinary=reIsBinary.test(value);return isBinary || reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}function toPlainObject(value){return copyObject(value,keysIn(value));}function toSafeInteger(value){return baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER);}function toString(value){if(typeof value == "string"){return value;}if(value == null){return "";}if(isSymbol(value)){return Symbol?symbolToString.call(value):"";}var result=value + "";return result == "0" && 1 / value == -INFINITY?"-0":result;}var assign=createAssigner(function(object,source){copyObject(source,keys(source),object);});var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObjectWith(source,keysIn(source),object,customizer);});var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObjectWith(source,keys(source),object,customizer);});var at=rest(function(object,paths){return baseAt(object,baseFlatten(paths));});function create(prototype,properties){var result=baseCreate(prototype);return properties?baseAssign(result,properties):result;}var defaults=rest(function(args){args.push(undefined,assignInDefaults);return apply(assignInWith,undefined,args);});var defaultsDeep=rest(function(args){args.push(undefined,mergeDefaults);return apply(mergeWith,undefined,args);});function findKey(object,predicate){return baseFind(object,getIteratee(predicate,3),baseForOwn,true);}function findLastKey(object,predicate){return baseFind(object,getIteratee(predicate,3),baseForOwnRight,true);}function forIn(object,iteratee){return object == null?object:baseFor(object,toFunction(iteratee),keysIn);}function forInRight(object,iteratee){return object == null?object:baseForRight(object,toFunction(iteratee),keysIn);}function forOwn(object,iteratee){return object && baseForOwn(object,toFunction(iteratee));}function forOwnRight(object,iteratee){return object && baseForOwnRight(object,toFunction(iteratee));}function functions(object){return object == null?[]:baseFunctions(object,keys(object));}function functionsIn(object){return object == null?[]:baseFunctions(object,keysIn(object));}function get(object,path,defaultValue){var result=object == null?undefined:baseGet(object,path);return result === undefined?defaultValue:result;}function has(object,path){return hasPath(object,path,baseHas);}function hasIn(object,path){return hasPath(object,path,baseHasIn);}var invert=createInverter(function(result,value,key){result[value] = key;},constant(identity));var invertBy=createInverter(function(result,value,key){if(hasOwnProperty.call(result,value)){result[value].push(key);}else {result[value] = [key];}},getIteratee);var invoke=rest(baseInvoke);function keys(object){var isProto=isPrototype(object);if(!(isProto || isArrayLike(object))){return baseKeys(object);}var indexes=indexKeys(object),skipIndexes=!!indexes,result=indexes || [],length=result.length;for(var key in object) {if(baseHas(object,key) && !(skipIndexes && (key == "length" || isIndex(key,length))) && !(isProto && key == "constructor")){result.push(key);}}return result;}function keysIn(object){var index=-1,isProto=isPrototype(object),props=baseKeysIn(object),propsLength=props.length,indexes=indexKeys(object),skipIndexes=!!indexes,result=indexes || [],length=result.length;while(++index < propsLength) {var key=props[index];if(!(skipIndexes && (key == "length" || isIndex(key,length))) && !(key == "constructor" && (isProto || !hasOwnProperty.call(object,key)))){result.push(key);}}return result;}function mapKeys(object,iteratee){var result={};iteratee = getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){result[iteratee(value,key,object)] = value;});return result;}function mapValues(object,iteratee){var result={};iteratee = getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){result[key] = iteratee(value,key,object);});return result;}var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});var omit=rest(function(object,props){if(object == null){return {};}props = arrayMap(baseFlatten(props),String);return basePick(object,baseDifference(keysIn(object),props));});function omitBy(object,predicate){predicate = getIteratee(predicate,2);return basePickBy(object,function(value,key){return !predicate(value,key);});}var pick=rest(function(object,props){return object == null?{}:basePick(object,baseFlatten(props));});function pickBy(object,predicate){return object == null?{}:basePickBy(object,getIteratee(predicate,2));}function result(object,path,defaultValue){if(!isKey(path,object)){path = baseToPath(path);var result=get(object,path);object = parent(object,path);}else {result = object == null?undefined:object[path];}if(result === undefined){result = defaultValue;}return isFunction(result)?result.call(object):result;}function set(object,path,value){return object == null?object:baseSet(object,path,value);}function setWith(object,path,value,customizer){customizer = typeof customizer == "function"?customizer:undefined;return object == null?object:baseSet(object,path,value,customizer);}function toPairs(object){return baseToPairs(object,keys(object));}function toPairsIn(object){return baseToPairs(object,keysIn(object));}function transform(object,iteratee,accumulator){var isArr=isArray(object) || isTypedArray(object);iteratee = getIteratee(iteratee,4);if(accumulator == null){if(isArr || isObject(object)){var Ctor=object.constructor;if(isArr){accumulator = isArray(object)?new Ctor():[];}else {accumulator = baseCreate(isFunction(Ctor)?Ctor.prototype:undefined);}}else {accumulator = {};}}(isArr?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}function unset(object,path){return object == null?true:baseUnset(object,path);}function values(object){return object?baseValues(object,keys(object)):[];}function valuesIn(object){return object == null?baseValues(object,keysIn(object)):[];}function clamp(number,lower,upper){if(upper === undefined){upper = lower;lower = undefined;}if(upper !== undefined){upper = toNumber(upper);upper = upper === upper?upper:0;}if(lower !== undefined){lower = toNumber(lower);lower = lower === lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}function inRange(number,start,end){start = toNumber(start) || 0;if(end === undefined){end = start;start = 0;}else {end = toNumber(end) || 0;}number = toNumber(number);return baseInRange(number,start,end);}function random(lower,upper,floating){if(floating && typeof floating != "boolean" && isIterateeCall(lower,upper,floating)){upper = floating = undefined;}if(floating === undefined){if(typeof upper == "boolean"){floating = upper;upper = undefined;}else if(typeof lower == "boolean"){floating = lower;lower = undefined;}}if(lower === undefined && upper === undefined){lower = 0;upper = 1;}else {lower = toNumber(lower) || 0;if(upper === undefined){upper = lower;lower = 0;}else {upper = toNumber(upper) || 0;}}if(lower > upper){var temp=lower;lower = upper;upper = temp;}if(floating || lower % 1 || upper % 1){var rand=nativeRandom();return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))),upper);}return baseRandom(lower,upper);}var camelCase=createCompounder(function(result,word,index){word = word.toLowerCase();return result + (index?capitalize(word):word);});function capitalize(string){return upperFirst(toString(string).toLowerCase());}function deburr(string){string = toString(string);return string && string.replace(reLatin1,deburrLetter).replace(reComboMark,"");}function endsWith(string,target,position){string = toString(string);target = typeof target == "string"?target:target + "";var length=string.length;position = position === undefined?length:baseClamp(toInteger(position),0,length);position -= target.length;return position >= 0 && string.indexOf(target,position) == position;}function escape(string){string = toString(string);return string && reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}function escapeRegExp(string){string = toString(string);return string && reHasRegExpChar.test(string)?string.replace(reRegExpChar,"\\$&"):string;}var kebabCase=createCompounder(function(result,word,index){return result + (index?"-":"") + word.toLowerCase();});var lowerCase=createCompounder(function(result,word,index){return result + (index?" ":"") + word.toLowerCase();});var lowerFirst=createCaseFirst("toLowerCase");var upperFirst=createCaseFirst("toUpperCase");function pad(string,length,chars){string = toString(string);length = toInteger(length);var strLength=stringSize(string);if(!length || strLength >= length){return string;}var mid=(length - strLength) / 2,leftLength=nativeFloor(mid),rightLength=nativeCeil(mid);return createPadding("",leftLength,chars) + string + createPadding("",rightLength,chars);}function padEnd(string,length,chars){string = toString(string);return string + createPadding(string,length,chars);}function padStart(string,length,chars){string = toString(string);return createPadding(string,length,chars) + string;}function parseInt(string,radix,guard){if(guard || radix == null){radix = 0;}else if(radix){radix = +radix;}string = toString(string).replace(reTrim,"");return nativeParseInt(string,radix || (reHasHexPrefix.test(string)?16:10));}function repeat(string,n){string = toString(string);n = toInteger(n);var result="";if(!string || n < 1 || n > MAX_SAFE_INTEGER){return result;}do {if(n % 2){result += string;}n = nativeFloor(n / 2);string += string;}while(n);return result;}function replace(){var args=arguments,string=toString(args[0]);return args.length < 3?string:string.replace(args[1],args[2]);}var snakeCase=createCompounder(function(result,word,index){return result + (index?"_":"") + word.toLowerCase();});function split(string,separator,limit){return toString(string).split(separator,limit);}var startCase=createCompounder(function(result,word,index){return result + (index?" ":"") + capitalize(word);});function startsWith(string,target,position){string = toString(string);position = baseClamp(toInteger(position),0,string.length);return string.lastIndexOf(target,position) == position;}function template(string,options,guard){var settings=lodash.templateSettings;if(guard && isIterateeCall(string,options,guard)){options = undefined;}string = toString(string);options = assignInWith({},options,settings,assignInDefaults);var imports=assignInWith({},options.imports,settings.imports,assignInDefaults),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate || reNoMatch,source="__p += '";var reDelimiters=RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate?reEsTemplate:reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$","g");var sourceURL="//# sourceURL=" + ("sourceURL" in options?options.sourceURL:"lodash.templateSources[" + ++templateCounter + "]") + "\n";string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue || (interpolateValue = esTemplateValue);source += string.slice(index,offset).replace(reUnescapedString,escapeStringChar);if(escapeValue){isEscaping = true;source += "' +\n__e(" + escapeValue + ") +\n'";}if(evaluateValue){isEvaluating = true;source += "';\n" + evaluateValue + ";\n__p += '";}if(interpolateValue){source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";}index = offset + match.length;return match;});source += "';\n";var variable=options.variable;if(!variable){source = "with (obj) {\n" + source + "\n}\n";}source = (isEvaluating?source.replace(reEmptyStringLeading,""):source).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;");source = "function(" + (variable || "obj") + ") {\n" + (variable?"":"obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping?", __e = _.escape":"") + (isEvaluating?", __j = Array.prototype.join;\n" + "function print() { __p += __j.call(arguments, '') }\n":";\n") + source + "return __p\n}";var result=attempt(function(){return Function(importsKeys,sourceURL + "return " + source).apply(undefined,importsValues);});result.source = source;if(isError(result)){throw result;}return result;}function toLower(value){return toString(value).toLowerCase();}function toUpper(value){return toString(value).toUpperCase();}function trim(string,chars,guard){string = toString(string);if(!string){return string;}if(guard || chars === undefined){return string.replace(reTrim,"");}chars = chars + "";if(!chars){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars);return strSymbols.slice(charsStartIndex(strSymbols,chrSymbols),charsEndIndex(strSymbols,chrSymbols) + 1).join("");}function trimEnd(string,chars,guard){string = toString(string);if(!string){return string;}if(guard || chars === undefined){return string.replace(reTrimEnd,"");}chars = chars + "";if(!chars){return string;}var strSymbols=stringToArray(string);return strSymbols.slice(0,charsEndIndex(strSymbols,stringToArray(chars)) + 1).join("");}function trimStart(string,chars,guard){string = toString(string);if(!string){return string;}if(guard || chars === undefined){return string.replace(reTrimStart,"");}chars = chars + "";if(!chars){return string;}var strSymbols=stringToArray(string);return strSymbols.slice(charsStartIndex(strSymbols,stringToArray(chars))).join("");}function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator="separator" in options?options.separator:separator;length = "length" in options?toInteger(options.length):length;omission = "omission" in options?toString(options.omission):omission;}string = toString(string);var strLength=string.length;if(reHasComplexSymbol.test(string)){var strSymbols=stringToArray(string);strLength = strSymbols.length;}if(length >= strLength){return string;}var end=length - stringSize(omission);if(end < 1){return omission;}var result=strSymbols?strSymbols.slice(0,end).join(""):string.slice(0,end);if(separator === undefined){return result + omission;}if(strSymbols){end += result.length - end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator = RegExp(separator.source,toString(reFlags.exec(separator)) + "g");}separator.lastIndex = 0;while(match = separator.exec(substring)) {var newEnd=match.index;}result = result.slice(0,newEnd === undefined?end:newEnd);}}else if(string.indexOf(separator,end) != end){var index=result.lastIndexOf(separator);if(index > -1){result = result.slice(0,index);}}return result + omission;}function unescape(string){string = toString(string);return string && reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}var upperCase=createCompounder(function(result,word,index){return result + (index?" ":"") + word.toUpperCase();});function words(string,pattern,guard){string = toString(string);pattern = guard?undefined:pattern;if(pattern === undefined){pattern = reHasComplexWord.test(string)?reComplexWord:reBasicWord;}return string.match(pattern) || [];}var attempt=rest(function(func,args){try{return apply(func,undefined,args);}catch(e) {return isObject(e)?e:new Error(e);}});var bindAll=rest(function(object,methodNames){arrayEach(baseFlatten(methodNames),function(key){object[key] = bind(object[key],object);});return object;});function cond(pairs){var length=pairs?pairs.length:0,toIteratee=getIteratee();pairs = !length?[]:arrayMap(pairs,function(pair){if(typeof pair[1] != "function"){throw new TypeError(FUNC_ERROR_TEXT);}return [toIteratee(pair[0]),pair[1]];});return rest(function(args){var index=-1;while(++index < length) {var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}function conforms(source){return baseConforms(baseClone(source,true));}function constant(value){return function(){return value;};}var flow=createFlow();var flowRight=createFlow(true);function identity(value){return value;}function iteratee(func){return baseIteratee(typeof func == "function"?func:baseClone(func,true));}function matches(source){return baseMatches(baseClone(source,true));}function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,true));}var method=rest(function(path,args){return function(object){return baseInvoke(object,path,args);};});var methodOf=rest(function(object,args){return function(path){return baseInvoke(object,path,args);};});function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options == null && !(isObject(source) && (methodNames.length || !props.length))){options = source;source = object;object = this;methodNames = baseFunctions(source,keys(source));}var chain=isObject(options) && "chain" in options?options.chain:true,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName] = func;if(isFunc){object.prototype[methodName] = function(){var chainAll=this.__chain__;if(chain || chainAll){var result=object(this.__wrapped__),actions=result.__actions__ = copyArray(this.__actions__);actions.push({func:func,args:arguments,thisArg:object});result.__chain__ = chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}function noConflict(){if(root._ === this){root._ = oldDash;}return this;}function noop(){}function nthArg(n){n = toInteger(n);return function(){return arguments[n];};}var over=createOver(arrayMap);var overEvery=createOver(arrayEvery);var overSome=createOver(arraySome);function property(path){return isKey(path)?baseProperty(path):basePropertyDeep(path);}function propertyOf(object){return function(path){return object == null?undefined:baseGet(object,path);};}var range=createRange();var rangeRight=createRange(true);function times(n,iteratee){n = toInteger(n);if(n < 1 || n > MAX_SAFE_INTEGER){return [];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee = toFunction(iteratee);n -= MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index < n) {iteratee(index);}return result;}function toPath(value){return isArray(value)?arrayMap(value,String):stringToPath(value);}function uniqueId(prefix){var id=++idCounter;return toString(prefix) + id;}function add(augend,addend){var result;if(augend !== undefined){result = augend;}if(addend !== undefined){result = result === undefined?addend:result + addend;}return result;}var ceil=createRound("ceil");var floor=createRound("floor");function max(array){return array && array.length?baseExtremum(array,identity,gt):undefined;}function maxBy(array,iteratee){return array && array.length?baseExtremum(array,getIteratee(iteratee),gt):undefined;}function mean(array){return sum(array) / (array?array.length:0);}function min(array){return array && array.length?baseExtremum(array,identity,lt):undefined;}function minBy(array,iteratee){return array && array.length?baseExtremum(array,getIteratee(iteratee),lt):undefined;}var round=createRound("round");function subtract(minuend,subtrahend){var result;if(minuend !== undefined){result = minuend;}if(subtrahend !== undefined){result = result === undefined?subtrahend:result - subtrahend;}return result;}function sum(array){return array && array.length?baseSum(array,identity):0;}function sumBy(array,iteratee){return array && array.length?baseSum(array,getIteratee(iteratee)):0;}lodash.prototype = baseLodash.prototype;LodashWrapper.prototype = baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor = LodashWrapper;LazyWrapper.prototype = baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor = LazyWrapper;Hash.prototype = nativeCreate?nativeCreate(null):objectProto;MapCache.prototype.clear = mapClear;MapCache.prototype["delete"] = mapDelete;MapCache.prototype.get = mapGet;MapCache.prototype.has = mapHas;MapCache.prototype.set = mapSet;SetCache.prototype.push = cachePush;Stack.prototype.clear = stackClear;Stack.prototype["delete"] = stackDelete;Stack.prototype.get = stackGet;Stack.prototype.has = stackHas;Stack.prototype.set = stackSet;memoize.Cache = MapCache;lodash.after = after;lodash.ary = ary;lodash.assign = assign;lodash.assignIn = assignIn;lodash.assignInWith = assignInWith;lodash.assignWith = assignWith;lodash.at = at;lodash.before = before;lodash.bind = bind;lodash.bindAll = bindAll;lodash.bindKey = bindKey;lodash.chain = chain;lodash.chunk = chunk;lodash.compact = compact;lodash.concat = concat;lodash.cond = cond;lodash.conforms = conforms;lodash.constant = constant;lodash.countBy = countBy;lodash.create = create;lodash.curry = curry;lodash.curryRight = curryRight;lodash.debounce = debounce;lodash.defaults = defaults;lodash.defaultsDeep = defaultsDeep;lodash.defer = defer;lodash.delay = delay;lodash.difference = difference;lodash.differenceBy = differenceBy;lodash.differenceWith = differenceWith;lodash.drop = drop;lodash.dropRight = dropRight;lodash.dropRightWhile = dropRightWhile;lodash.dropWhile = dropWhile;lodash.fill = fill;lodash.filter = filter;lodash.flatMap = flatMap;lodash.flatten = flatten;lodash.flattenDeep = flattenDeep;lodash.flip = flip;lodash.flow = flow;lodash.flowRight = flowRight;lodash.fromPairs = fromPairs;lodash.functions = functions;lodash.functionsIn = functionsIn;lodash.groupBy = groupBy;lodash.initial = initial;lodash.intersection = intersection;lodash.intersectionBy = intersectionBy;lodash.intersectionWith = intersectionWith;lodash.invert = invert;lodash.invertBy = invertBy;lodash.invokeMap = invokeMap;lodash.iteratee = iteratee;lodash.keyBy = keyBy;lodash.keys = keys;lodash.keysIn = keysIn;lodash.map = map;lodash.mapKeys = mapKeys;lodash.mapValues = mapValues;lodash.matches = matches;lodash.matchesProperty = matchesProperty;lodash.memoize = memoize;lodash.merge = merge;lodash.mergeWith = mergeWith;lodash.method = method;lodash.methodOf = methodOf;lodash.mixin = mixin;lodash.negate = negate;lodash.nthArg = nthArg;lodash.omit = omit;lodash.omitBy = omitBy;lodash.once = once;lodash.orderBy = orderBy;lodash.over = over;lodash.overArgs = overArgs;lodash.overEvery = overEvery;lodash.overSome = overSome;lodash.partial = partial;lodash.partialRight = partialRight;lodash.partition = partition;lodash.pick = pick;lodash.pickBy = pickBy;lodash.property = property;lodash.propertyOf = propertyOf;lodash.pull = pull;lodash.pullAll = pullAll;lodash.pullAllBy = pullAllBy;lodash.pullAt = pullAt;lodash.range = range;lodash.rangeRight = rangeRight;lodash.rearg = rearg;lodash.reject = reject;lodash.remove = remove;lodash.rest = rest;lodash.reverse = reverse;lodash.sampleSize = sampleSize;lodash.set = set;lodash.setWith = setWith;lodash.shuffle = shuffle;lodash.slice = slice;lodash.sortBy = sortBy;lodash.sortedUniq = sortedUniq;lodash.sortedUniqBy = sortedUniqBy;lodash.split = split;lodash.spread = spread;lodash.tail = tail;lodash.take = take;lodash.takeRight = takeRight;lodash.takeRightWhile = takeRightWhile;lodash.takeWhile = takeWhile;lodash.tap = tap;lodash.throttle = throttle;lodash.thru = thru;lodash.toArray = toArray;lodash.toPairs = toPairs;lodash.toPairsIn = toPairsIn;lodash.toPath = toPath;lodash.toPlainObject = toPlainObject;lodash.transform = transform;lodash.unary = unary;lodash.union = union;lodash.unionBy = unionBy;lodash.unionWith = unionWith;lodash.uniq = uniq;lodash.uniqBy = uniqBy;lodash.uniqWith = uniqWith;lodash.unset = unset;lodash.unzip = unzip;lodash.unzipWith = unzipWith;lodash.values = values;lodash.valuesIn = valuesIn;lodash.without = without;lodash.words = words;lodash.wrap = wrap;lodash.xor = xor;lodash.xorBy = xorBy;lodash.xorWith = xorWith;lodash.zip = zip;lodash.zipObject = zipObject;lodash.zipObjectDeep = zipObjectDeep;lodash.zipWith = zipWith;lodash.extend = assignIn;lodash.extendWith = assignInWith;mixin(lodash,lodash);lodash.add = add;lodash.attempt = attempt;lodash.camelCase = camelCase;lodash.capitalize = capitalize;lodash.ceil = ceil;lodash.clamp = clamp;lodash.clone = clone;lodash.cloneDeep = cloneDeep;lodash.cloneDeepWith = cloneDeepWith;lodash.cloneWith = cloneWith;lodash.deburr = deburr;lodash.endsWith = endsWith;lodash.eq = eq;lodash.escape = escape;lodash.escapeRegExp = escapeRegExp;lodash.every = every;lodash.find = find;lodash.findIndex = findIndex;lodash.findKey = findKey;lodash.findLast = findLast;lodash.findLastIndex = findLastIndex;lodash.findLastKey = findLastKey;lodash.floor = floor;lodash.forEach = forEach;lodash.forEachRight = forEachRight;lodash.forIn = forIn;lodash.forInRight = forInRight;lodash.forOwn = forOwn;lodash.forOwnRight = forOwnRight;lodash.get = get;lodash.gt = gt;lodash.gte = gte;lodash.has = has;lodash.hasIn = hasIn;lodash.head = head;lodash.identity = identity;lodash.includes = includes;lodash.indexOf = indexOf;lodash.inRange = inRange;lodash.invoke = invoke;lodash.isArguments = isArguments;lodash.isArray = isArray;lodash.isArrayLike = isArrayLike;lodash.isArrayLikeObject = isArrayLikeObject;lodash.isBoolean = isBoolean;lodash.isDate = isDate;lodash.isElement = isElement;lodash.isEmpty = isEmpty;lodash.isEqual = isEqual;lodash.isEqualWith = isEqualWith;lodash.isError = isError;lodash.isFinite = isFinite;lodash.isFunction = isFunction;lodash.isInteger = isInteger;lodash.isLength = isLength;lodash.isMatch = isMatch;lodash.isMatchWith = isMatchWith;lodash.isNaN = isNaN;lodash.isNative = isNative;lodash.isNil = isNil;lodash.isNull = isNull;lodash.isNumber = isNumber;lodash.isObject = isObject;lodash.isObjectLike = isObjectLike;lodash.isPlainObject = isPlainObject;lodash.isRegExp = isRegExp;lodash.isSafeInteger = isSafeInteger;lodash.isString = isString;lodash.isSymbol = isSymbol;lodash.isTypedArray = isTypedArray;lodash.isUndefined = isUndefined;lodash.join = join;lodash.kebabCase = kebabCase;lodash.last = last;lodash.lastIndexOf = lastIndexOf;lodash.lowerCase = lowerCase;lodash.lowerFirst = lowerFirst;lodash.lt = lt;lodash.lte = lte;lodash.max = max;lodash.maxBy = maxBy;lodash.mean = mean;lodash.min = min;lodash.minBy = minBy;lodash.noConflict = noConflict;lodash.noop = noop;lodash.now = now;lodash.pad = pad;lodash.padEnd = padEnd;lodash.padStart = padStart;lodash.parseInt = parseInt;lodash.random = random;lodash.reduce = reduce;lodash.reduceRight = reduceRight;lodash.repeat = repeat;lodash.replace = replace;lodash.result = result;lodash.round = round;lodash.runInContext = runInContext;lodash.sample = sample;lodash.size = size;lodash.snakeCase = snakeCase;lodash.some = some;lodash.sortedIndex = sortedIndex;lodash.sortedIndexBy = sortedIndexBy;lodash.sortedIndexOf = sortedIndexOf;lodash.sortedLastIndex = sortedLastIndex;lodash.sortedLastIndexBy = sortedLastIndexBy;lodash.sortedLastIndexOf = sortedLastIndexOf;lodash.startCase = startCase;lodash.startsWith = startsWith;lodash.subtract = subtract;lodash.sum = sum;lodash.sumBy = sumBy;lodash.template = template;lodash.times = times;lodash.toInteger = toInteger;lodash.toLength = toLength;lodash.toLower = toLower;lodash.toNumber = toNumber;lodash.toSafeInteger = toSafeInteger;lodash.toString = toString;lodash.toUpper = toUpper;lodash.trim = trim;lodash.trimEnd = trimEnd;lodash.trimStart = trimStart;lodash.truncate = truncate;lodash.unescape = unescape;lodash.uniqueId = uniqueId;lodash.upperCase = upperCase;lodash.upperFirst = upperFirst;lodash.each = forEach;lodash.eachRight = forEachRight;lodash.first = head;mixin(lodash,(function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName] = func;}});return source;})(),{chain:false});lodash.VERSION = VERSION;arrayEach(["bind","bindKey","curry","curryRight","partial","partialRight"],function(methodName){lodash[methodName].placeholder = lodash;});arrayEach(["drop","take"],function(methodName,index){LazyWrapper.prototype[methodName] = function(n){var filtered=this.__filtered__;if(filtered && !index){return new LazyWrapper(this);}n = n === undefined?1:nativeMax(toInteger(n),0);var result=this.clone();if(filtered){result.__takeCount__ = nativeMin(n,result.__takeCount__);}else {result.__views__.push({size:nativeMin(n,MAX_ARRAY_LENGTH),type:methodName + (result.__dir__ < 0?"Right":"")});}return result;};LazyWrapper.prototype[methodName + "Right"] = function(n){return this.reverse()[methodName](n).reverse();};});arrayEach(["filter","map","takeWhile"],function(methodName,index){var type=index + 1,isFilter=type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName] = function(iteratee){var result=this.clone();result.__iteratees__.push({iteratee:getIteratee(iteratee,3),type:type});result.__filtered__ = result.__filtered__ || isFilter;return result;};});arrayEach(["head","last"],function(methodName,index){var takeName="take" + (index?"Right":"");LazyWrapper.prototype[methodName] = function(){return this[takeName](1).value()[0];};});arrayEach(["initial","tail"],function(methodName,index){var dropName="drop" + (index?"":"Right");LazyWrapper.prototype[methodName] = function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact = function(){return this.filter(identity);};LazyWrapper.prototype.find = function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast = function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap = rest(function(path,args){if(typeof path == "function"){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject = function(predicate){predicate = getIteratee(predicate,3);return this.filter(function(value){return !predicate(value);});};LazyWrapper.prototype.slice = function(start,end){start = toInteger(start);var result=this;if(result.__filtered__ && (start > 0 || end < 0)){return new LazyWrapper(result);}if(start < 0){result = result.takeRight(-start);}else if(start){result = result.drop(start);}if(end !== undefined){end = toInteger(end);result = end < 0?result.dropRight(-end):result.take(end - start);}return result;};LazyWrapper.prototype.takeRightWhile = function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray = function(){return this.take(MAX_ARRAY_LENGTH);};baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?"take" + (methodName == "last"?"Right":""):methodName],retUnwrapped=isTaker || /^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName] = function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy || isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker && chainAll?result[0]:result;};if(useLazy && checkIteratee && typeof iteratee == "function" && iteratee.length != 1){isLazy = useLazy = false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped && !chainAll,onlyLazy=isLazy && !isHybrid;if(!retUnwrapped && useLazy){value = onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({func:thru,args:[interceptor],thisArg:undefined});return new LodashWrapper(result,chainAll);}if(isUnwrapped && onlyLazy){return func.apply(this,args);}result = this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});arrayEach(["pop","push","shift","sort","splice","unshift"],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?"tap":"thru",retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName] = function(){var args=arguments;if(retUnwrapped && !this.__chain__){return func.apply(this.value(),args);}return this[chainName](function(value){return func.apply(value,args);});};});baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name + "",names=realNames[key] || (realNames[key] = []);names.push({name:methodName,func:lodashFunc});}});realNames[createHybridWrapper(undefined,BIND_KEY_FLAG).name] = [{name:"wrapper",func:undefined}];LazyWrapper.prototype.clone = lazyClone;LazyWrapper.prototype.reverse = lazyReverse;LazyWrapper.prototype.value = lazyValue;lodash.prototype.at = wrapperAt;lodash.prototype.chain = wrapperChain;lodash.prototype.commit = wrapperCommit;lodash.prototype.flatMap = wrapperFlatMap;lodash.prototype.next = wrapperNext;lodash.prototype.plant = wrapperPlant;lodash.prototype.reverse = wrapperReverse;lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;if(iteratorSymbol){lodash.prototype[iteratorSymbol] = wrapperToIterator;}return lodash;}var _=runInContext();(freeWindow || freeSelf || {})._ = _;if(typeof define == "function" && typeof define.amd == "object" && define.amd){define(function(){return _;});}else if(freeExports && freeModule){if(moduleExports){(freeModule.exports = _)._ = _;}freeExports._ = _;}else {root._ = _;}}).call(undefined);

cc._RFpop();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"login":[function(require,module,exports){
"use strict";
cc._RFpush(module, '679e449RpxCxaiPhWcfXEIf', 'login');
// biz/login/script/login.js

var qwest = require('qwest');
var user = require('user');
var api = require('api');

var btnAction = {
    show: cc.moveTo(0.5, cc.p(540, 280)).easing(cc.easeIn(3.0)),
    hide: cc.moveTo(0.5, cc.p(540, 425)).easing(cc.easeIn(3.0))
};

var loginGroupAction = {
    show: cc.moveTo(0.5, cc.p(0, -150)).easing(cc.easeIn(3.0)),
    hide: cc.moveTo(0.5, cc.p(0, -500)).easing(cc.easeIn(3.0))
};

var registerGroupAction = {
    show: cc.moveTo(0.5, cc.p(0, 0)).easing(cc.easeIn(3.0)),
    hide: cc.moveTo(0.5, cc.p(0, -660)).easing(cc.easeIn(3.0))
};

cc.Class({
    'extends': cc.Component,

    properties: {
        username: {
            'default': null,
            type: cc.EditBox
        },

        password: {
            'default': null,
            type: cc.EditBox
        },

        loginBtn: {
            'default': null,
            type: cc.Button
        },

        registerBtnBox: {
            'default': null,
            type: cc.Node
        },

        cancelBtnBox: {
            'default': null,
            type: cc.Node
        },

        loginGroup: {
            'default': null,
            type: cc.Node
        },

        registerGroup: {
            'default': null,
            type: cc.Node
        }
    },

    onLoginBtnEnter: function onLoginBtnEnter() {
        api.login({
            name: this.username.string,
            password: this.password.string
        }).then(function (data) {
            user.init(data.data);
        }, function (err) {
            alert(err.data);
        });
    },

    onCancelBtnToggle: function onCancelBtnToggle() {
        this.registerBtnBox.runAction(btnAction.show);
        this.cancelBtnBox.runAction(btnAction.hide);
        this.loginGroup.runAction(loginGroupAction.show);
        this.registerGroup.runAction(registerGroupAction.hide);
    },

    onRegisterBtnToggle: function onRegisterBtnToggle() {
        this.registerBtnBox.runAction(btnAction.hide);
        this.cancelBtnBox.runAction(btnAction.show);
        this.loginGroup.runAction(loginGroupAction.hide);
        this.registerGroup.runAction(registerGroupAction.show);
    },

    onLoad: function onLoad() {},

    update: function update(dt) {}
});

cc._RFpop();
},{"api":"api","qwest":"qwest","user":"user"}],"qwest":[function(require,module,exports){
(function (process,global){
"use strict";
cc._RFpush(module, '8f513dtOl5DS4fIlTqIHORv', 'qwest');
// lib/qwest.js

!(function (e) {
  if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    var t;t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.qwest = e();
  }
})(function () {
  var define, module, exports;return (function e(t, n, o) {
    function r(i, a) {
      if (!n[i]) {
        if (!t[i]) {
          var p = "function" == typeof require && require;if (!a && p) return p(i, !0);if (s) return s(i, !0);var u = new Error("Cannot find module '" + i + "'");throw (u.code = "MODULE_NOT_FOUND", u);
        }var f = n[i] = { exports: {} };t[i][0].call(f.exports, function (e) {
          var n = t[i][1][e];return r(n ? n : e);
        }, f, f.exports, e, t, n, o);
      }return n[i].exports;
    }for (var s = "function" == typeof require && require, i = 0; i < o.length; i++) r(o[i]);return r;
  })({ 1: [function (e, t, n) {
      !(function (e) {
        "use strict";var n = function n(e) {
          var t = function t(e, _t, n) {
            n = "function" == typeof n ? n() : null === n ? "" : void 0 === n ? "" : n, e[e.length] = encodeURIComponent(_t) + "=" + encodeURIComponent(n);
          },
              n = function n(e, o, r) {
            var s, i, a;if ("[object Array]" === Object.prototype.toString.call(o)) for (s = 0, i = o.length; i > s; s++) n(e + "[" + ("object" == typeof o[s] ? s : "") + "]", o[s], r);else if (o && "[object Object]" === o.toString()) for (a in o) o.hasOwnProperty(a) && (e ? n(e + "[" + a + "]", o[a], r, t) : n(a, o[a], r, t));else if (e) t(r, e, o);else for (a in o) t(r, a, o[a]);return r;
          };return n("", e, []).join("&").replace(/%20/g, "+");
        };"object" == typeof t && "object" == typeof t.exports ? t.exports = n : "function" == typeof define && define.amd ? define([], function () {
          return n;
        }) : e.param = n;
      })(this);
    }, {}], 2: [function (e, t, n) {
      !(function (e) {
        function t(e) {
          return "function" == typeof e;
        }function n(e) {
          return "object" == typeof e;
        }function o(e) {
          "undefined" != typeof setImmediate ? setImmediate(e) : "undefined" != typeof process && process.nextTick ? process.nextTick(e) : setTimeout(e, 0);
        }var r;e[0][e[1]] = function s(e) {
          var i,
              a = [],
              p = [],
              u = function u(e, t) {
            return null == i && null != e && (i = e, a = t, p.length && o(function () {
              for (var e = 0; e < p.length; e++) p[e]();
            })), i;
          };return u.then = function (u, f) {
            var d = s(e),
                c = function c() {
              function e(o) {
                var s,
                    i = 0;try {
                  if (o && (n(o) || t(o)) && t(s = o.then)) {
                    if (o === d) throw new TypeError();s.call(o, function () {
                      i++ || e.apply(r, arguments);
                    }, function (e) {
                      i++ || d(!1, [e]);
                    });
                  } else d(!0, arguments);
                } catch (a) {
                  i++ || d(!1, [a]);
                }
              }try {
                var o = i ? u : f;t(o) ? e(o.apply(r, a || [])) : d(i, a);
              } catch (s) {
                d(!1, [s]);
              }
            };return null != i ? o(c) : p.push(c), d;
          }, e && (u = e(u)), u;
        };
      })("undefined" == typeof t ? [window, "pinkySwear"] : [t, "exports"]);
    }, {}], qwest: [function (_dereq_, module, exports) {
      module.exports = (function () {
        var global = window || this,
            pinkyswear = _dereq_("pinkyswear"),
            jparam = _dereq_("jquery-param"),
            defaultOptions = {},
            defaultXdrResponseType = "json",
            defaultDataType = "post",
            _limit = null,
            requests = 0,
            request_stack = [],
            getXHR = global.XMLHttpRequest ? function () {
          return new global.XMLHttpRequest();
        } : function () {
          return new ActiveXObject("Microsoft.XMLHTTP");
        },
            xhr2 = "" === getXHR().responseType,
            qwest = function qwest(method, url, data, options, before) {
          method = method.toUpperCase(), data = data || null, options = options || {};for (var name in defaultOptions) if (!(name in options)) if ("object" == typeof defaultOptions[name] && "object" == typeof options[name]) for (var name2 in defaultOptions[name]) options[name][name2] = defaultOptions[name][name2];else options[name] = defaultOptions[name];var nativeResponseParsing = !1,
              crossOrigin,
              xhr,
              xdr = !1,
              timeoutInterval,
              aborted = !1,
              attempts = 0,
              headers = {},
              mimeTypes = { text: "*/*", xml: "text/xml", json: "application/json", post: "application/x-www-form-urlencoded", document: "text/html" },
              accept = { text: "*/*", xml: "application/xml; q=1.0, text/xml; q=0.8, */*; q=0.1", json: "application/json; q=1.0, text/*; q=0.8, */*; q=0.1" },
              i,
              j,
              serialized,
              response,
              sending = !1,
              delayed = !1,
              timeout_start,
              promise = pinkyswear(function (e) {
            return e.abort = function () {
              xhr && (xhr.abort(), --requests, aborted = !0);
            }, e.send = function () {
              if (!sending) {
                if (requests == _limit) return void request_stack.push(e);if (aborted) return void (request_stack.length && request_stack.shift().send());if ((++requests, sending = !0, timeout_start = new Date().getTime(), xhr = getXHR(), crossOrigin && ("withCredentials" in xhr || !global.XDomainRequest || (xhr = new XDomainRequest(), xdr = !0, "GET" != method && "POST" != method && (method = "POST"))), xdr ? xhr.open(method, url) : (xhr.open(method, url, options.async, options.user, options.password), xhr2 && options.async && (xhr.withCredentials = options.withCredentials)), !xdr)) for (var t in headers) headers[t] && xhr.setRequestHeader(t, headers[t]);if (xhr2 && "auto" != options.responseType) try {
                  xhr.responseType = options.responseType, nativeResponseParsing = xhr.responseType == options.responseType;
                } catch (n) {}xhr2 || xdr ? (xhr.onload = handleResponse, xhr.onerror = handleError) : xhr.onreadystatechange = function () {
                  4 == xhr.readyState && handleResponse();
                }, "auto" != options.responseType && "overrideMimeType" in xhr && xhr.overrideMimeType(mimeTypes[options.responseType]), before && before(xhr), xdr ? (xhr.onprogress = function () {}, xhr.ontimeout = function () {}, xhr.onerror = function () {}, setTimeout(function () {
                  xhr.send("GET" != method ? data : null);
                }, 0)) : xhr.send("GET" != method ? data : null);
              }
            }, e;
          }),
              handleResponse = function handleResponse() {
            var i, responseType;if ((--requests, sending = !1, new Date().getTime() - timeout_start >= options.timeout)) return void (options.attempts && ++attempts == options.attempts ? promise(!1, [new Error("Timeout (" + url + ")"), xhr, response]) : promise.send());request_stack.length && request_stack.shift().send();try {
              if (nativeResponseParsing && "response" in xhr && null !== xhr.response) response = xhr.response;else {
                if ((responseType = options.responseType, "auto" == responseType)) if (xdr) responseType = defaultXdrResponseType;else {
                  var ct = xhr.getResponseHeader("Content-Type") || "";responseType = ct.indexOf(mimeTypes.json) > -1 ? "json" : ct.indexOf(mimeTypes.xml) > -1 ? "xml" : "text";
                }switch (responseType) {case "json":
                    if (xhr.responseText.length) try {
                      response = "JSON" in global ? JSON.parse(xhr.responseText) : eval("(" + xhr.responseText + ")");
                    } catch (e) {
                      throw "Error while parsing JSON body : " + e;
                    }break;case "xml":
                    try {
                      global.DOMParser ? response = new DOMParser().parseFromString(xhr.responseText, "text/xml") : (response = new ActiveXObject("Microsoft.XMLDOM"), response.async = "false", response.loadXML(xhr.responseText));
                    } catch (e) {
                      response = void 0;
                    }if (!response || !response.documentElement || response.getElementsByTagName("parsererror").length) throw "Invalid XML";break;default:
                    response = xhr.responseText;}
              }if ("status" in xhr && !/^2|1223/.test(xhr.status)) throw xhr.status + " (" + xhr.statusText + ")";promise(!0, [xhr, response]);
            } catch (e) {
              promise(!1, [e, xhr, response]);
            }
          },
              handleError = function handleError(e) {
            --requests, promise(!1, [new Error("Connection aborted"), xhr, null]);
          };if ((options.async = "async" in options ? !!options.async : !0, options.cache = "cache" in options ? !!options.cache : !1, options.dataType = "dataType" in options ? options.dataType.toLowerCase() : defaultDataType, options.responseType = "responseType" in options ? options.responseType.toLowerCase() : "auto", options.user = options.user || "", options.password = options.password || "", options.withCredentials = !!options.withCredentials, options.timeout = "timeout" in options ? parseInt(options.timeout, 10) : 3e4, options.attempts = "attempts" in options ? parseInt(options.attempts, 10) : 1, i = url.match(/\/\/(.+?)\//), crossOrigin = i && (i[1] ? i[1] != location.host : !1), "ArrayBuffer" in global && data instanceof ArrayBuffer ? options.dataType = "arraybuffer" : "Blob" in global && data instanceof Blob ? options.dataType = "blob" : "Document" in global && data instanceof Document ? options.dataType = "document" : "FormData" in global && data instanceof FormData && (options.dataType = "formdata"), null !== data)) switch (options.dataType) {case "json":
              data = JSON.stringify(data);break;case "post":
              data = jparam(data);}if (options.headers) {
            var format = function format(e, t, n) {
              return t + n.toUpperCase();
            };for (i in options.headers) headers[i.replace(/(^|-)([^-])/g, format)] = options.headers[i];
          }return "Content-Type" in headers || "GET" == method || options.dataType in mimeTypes && mimeTypes[options.dataType] && (headers["Content-Type"] = mimeTypes[options.dataType]), headers.Accept || (headers.Accept = options.responseType in accept ? accept[options.responseType] : "*/*"), crossOrigin || "X-Requested-With" in headers || (headers["X-Requested-With"] = "XMLHttpRequest"), options.cache || "Cache-Control" in headers || (headers["Cache-Control"] = "no-cache"), "GET" == method && data && "string" == typeof data && (url += (/\?/.test(url) ? "&" : "?") + data), options.async && promise.send(), promise;
        },
            getNewPromise = function getNewPromise(e) {
          var t = [],
              n = 0,
              o = [];return pinkyswear(function (r) {
            var s = -1,
                i = function i(e) {
              return function (i, a, p, u) {
                var f = ++s;return ++n, t.push(qwest(e, r.base + i, a, p, u).then(function (e, t) {
                  o[f] = arguments, --n || r(!0, 1 == o.length ? o[0] : [o]);
                }, function () {
                  r(!1, arguments);
                })), r;
              };
            };r.get = i("GET"), r.post = i("POST"), r.put = i("PUT"), r["delete"] = i("DELETE"), r["catch"] = function (e) {
              return r.then(null, e);
            }, r.complete = function (e) {
              var t = function t() {
                e();
              };return r.then(t, t);
            }, r.map = function (e, t, n, o, r) {
              return i(e.toUpperCase()).call(this, t, n, o, r);
            };for (var a in e) a in r || (r[a] = e[a]);return r.send = function () {
              for (var e = 0, n = t.length; n > e; ++e) t[e].send();return r;
            }, r.abort = function () {
              for (var e = 0, n = t.length; n > e; ++e) t[e].abort();return r;
            }, r;
          });
        },
            q = { base: "", get: function get() {
            return getNewPromise(q).get.apply(this, arguments);
          }, post: function post() {
            return getNewPromise(q).post.apply(this, arguments);
          }, put: function put() {
            return getNewPromise(q).put.apply(this, arguments);
          }, "delete": function _delete() {
            return getNewPromise(q)["delete"].apply(this, arguments);
          }, map: function map() {
            return getNewPromise(q).map.apply(this, arguments);
          }, xhr2: xhr2, limit: function limit(e) {
            return _limit = e, q;
          }, setDefaultOptions: function setDefaultOptions(e) {
            return defaultOptions = e, q;
          }, setDefaultXdrResponseType: function setDefaultXdrResponseType(e) {
            return defaultXdrResponseType = e.toLowerCase(), q;
          }, setDefaultDataType: function setDefaultDataType(e) {
            return defaultDataType = e.toLowerCase(), q;
          }, getOpenRequests: function getOpenRequests() {
            return requests;
          } };return q;
      })();
    }, { "jquery-param": 1, pinkyswear: 2 }] }, {}, [1, 2])("qwest");
});

cc._RFpop();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":1}],"socket.io":[function(require,module,exports){
(function (global){
"use strict";
cc._RFpush(module, '342756pPltPvItiKud7zucD', 'socket.io');
// lib/socket.io.js

"use strict";

(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }g.io = f();
  }
})(function () {
  var define, module, exports;return (function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw (f.code = "MODULE_NOT_FOUND", f);
        }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
          var n = t[o][1][e];return s(n ? n : e);
        }, l, l.exports, e, t, n, r);
      }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
  })({ 1: [function (_dereq_, module, exports) {
      module.exports = _dereq_("./lib/");
    }, { "./lib/": 2 }], 2: [function (_dereq_, module, exports) {
      module.exports = _dereq_("./socket");module.exports.parser = _dereq_("engine.io-parser");
    }, { "./socket": 3, "engine.io-parser": 19 }], 3: [function (_dereq_, module, exports) {
      (function (global) {
        var transports = _dereq_("./transports");var Emitter = _dereq_("component-emitter");var debug = _dereq_("debug")("engine.io-client:socket");var index = _dereq_("indexof");var parser = _dereq_("engine.io-parser");var parseuri = _dereq_("parseuri");var parsejson = _dereq_("parsejson");var parseqs = _dereq_("parseqs");module.exports = Socket;function noop() {}function Socket(uri, opts) {
          if (!(this instanceof Socket)) return new Socket(uri, opts);opts = opts || {};if (uri && "object" == typeof uri) {
            opts = uri;uri = null;
          }if (uri) {
            uri = parseuri(uri);opts.hostname = uri.host;opts.secure = uri.protocol == "https" || uri.protocol == "wss";opts.port = uri.port;if (uri.query) opts.query = uri.query;
          } else if (opts.host) {
            opts.hostname = parseuri(opts.host).host;
          }this.secure = null != opts.secure ? opts.secure : global.location && "https:" == location.protocol;if (opts.hostname && !opts.port) {
            opts.port = this.secure ? "443" : "80";
          }this.agent = opts.agent || false;this.hostname = opts.hostname || (global.location ? location.hostname : "localhost");this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);this.query = opts.query || {};if ("string" == typeof this.query) this.query = parseqs.decode(this.query);this.upgrade = false !== opts.upgrade;this.path = (opts.path || "/engine.io").replace(/\/$/, "") + "/";this.forceJSONP = !!opts.forceJSONP;this.jsonp = false !== opts.jsonp;this.forceBase64 = !!opts.forceBase64;this.enablesXDR = !!opts.enablesXDR;this.timestampParam = opts.timestampParam || "t";this.timestampRequests = opts.timestampRequests;this.transports = opts.transports || ["polling", "websocket"];this.readyState = "";this.writeBuffer = [];this.policyPort = opts.policyPort || 843;this.rememberUpgrade = opts.rememberUpgrade || false;this.binaryType = null;this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;if (true === this.perMessageDeflate) this.perMessageDeflate = {};if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
            this.perMessageDeflate.threshold = 1024;
          }this.pfx = opts.pfx || null;this.key = opts.key || null;this.passphrase = opts.passphrase || null;this.cert = opts.cert || null;this.ca = opts.ca || null;this.ciphers = opts.ciphers || null;this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;var freeGlobal = typeof global == "object" && global;if (freeGlobal.global === freeGlobal) {
            if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
              this.extraHeaders = opts.extraHeaders;
            }
          }this.open();
        }Socket.priorWebsocketSuccess = false;Emitter(Socket.prototype);Socket.protocol = parser.protocol;Socket.Socket = Socket;Socket.Transport = _dereq_("./transport");Socket.transports = _dereq_("./transports");Socket.parser = _dereq_("engine.io-parser");Socket.prototype.createTransport = function (name) {
          debug('creating transport "%s"', name);var query = clone(this.query);query.EIO = parser.protocol;query.transport = name;if (this.id) query.sid = this.id;var transport = new transports[name]({ agent: this.agent, hostname: this.hostname, port: this.port, secure: this.secure, path: this.path, query: query, forceJSONP: this.forceJSONP, jsonp: this.jsonp, forceBase64: this.forceBase64, enablesXDR: this.enablesXDR, timestampRequests: this.timestampRequests, timestampParam: this.timestampParam, policyPort: this.policyPort, socket: this, pfx: this.pfx, key: this.key, passphrase: this.passphrase, cert: this.cert, ca: this.ca, ciphers: this.ciphers, rejectUnauthorized: this.rejectUnauthorized, perMessageDeflate: this.perMessageDeflate, extraHeaders: this.extraHeaders });return transport;
        };function clone(obj) {
          var o = {};for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
              o[i] = obj[i];
            }
          }return o;
        }Socket.prototype.open = function () {
          var transport;if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") != -1) {
            transport = "websocket";
          } else if (0 === this.transports.length) {
            var self = this;setTimeout(function () {
              self.emit("error", "No transports available");
            }, 0);return;
          } else {
            transport = this.transports[0];
          }this.readyState = "opening";try {
            transport = this.createTransport(transport);
          } catch (e) {
            this.transports.shift();this.open();return;
          }transport.open();this.setTransport(transport);
        };Socket.prototype.setTransport = function (transport) {
          debug("setting transport %s", transport.name);var self = this;if (this.transport) {
            debug("clearing existing transport %s", this.transport.name);this.transport.removeAllListeners();
          }this.transport = transport;transport.on("drain", function () {
            self.onDrain();
          }).on("packet", function (packet) {
            self.onPacket(packet);
          }).on("error", function (e) {
            self.onError(e);
          }).on("close", function () {
            self.onClose("transport close");
          });
        };Socket.prototype.probe = function (name) {
          debug('probing transport "%s"', name);var transport = this.createTransport(name, { probe: 1 }),
              failed = false,
              self = this;Socket.priorWebsocketSuccess = false;function onTransportOpen() {
            if (self.onlyBinaryUpgrades) {
              var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;failed = failed || upgradeLosesBinary;
            }if (failed) return;debug('probe transport "%s" opened', name);transport.send([{ type: "ping", data: "probe" }]);transport.once("packet", function (msg) {
              if (failed) return;if ("pong" == msg.type && "probe" == msg.data) {
                debug('probe transport "%s" pong', name);self.upgrading = true;self.emit("upgrading", transport);if (!transport) return;Socket.priorWebsocketSuccess = "websocket" == transport.name;debug('pausing current transport "%s"', self.transport.name);self.transport.pause(function () {
                  if (failed) return;if ("closed" == self.readyState) return;debug("changing transport and sending upgrade packet");cleanup();self.setTransport(transport);transport.send([{ type: "upgrade" }]);self.emit("upgrade", transport);transport = null;self.upgrading = false;self.flush();
                });
              } else {
                debug('probe transport "%s" failed', name);var err = new Error("probe error");err.transport = transport.name;self.emit("upgradeError", err);
              }
            });
          }function freezeTransport() {
            if (failed) return;failed = true;cleanup();transport.close();transport = null;
          }function onerror(err) {
            var error = new Error("probe error: " + err);error.transport = transport.name;freezeTransport();debug('probe transport "%s" failed because of error: %s', name, err);self.emit("upgradeError", error);
          }function onTransportClose() {
            onerror("transport closed");
          }function onclose() {
            onerror("socket closed");
          }function onupgrade(to) {
            if (transport && to.name != transport.name) {
              debug('"%s" works - aborting "%s"', to.name, transport.name);freezeTransport();
            }
          }function cleanup() {
            transport.removeListener("open", onTransportOpen);transport.removeListener("error", onerror);transport.removeListener("close", onTransportClose);self.removeListener("close", onclose);self.removeListener("upgrading", onupgrade);
          }transport.once("open", onTransportOpen);transport.once("error", onerror);transport.once("close", onTransportClose);this.once("close", onclose);this.once("upgrading", onupgrade);transport.open();
        };Socket.prototype.onOpen = function () {
          debug("socket open");this.readyState = "open";Socket.priorWebsocketSuccess = "websocket" == this.transport.name;this.emit("open");this.flush();if ("open" == this.readyState && this.upgrade && this.transport.pause) {
            debug("starting upgrade probes");for (var i = 0, l = this.upgrades.length; i < l; i++) {
              this.probe(this.upgrades[i]);
            }
          }
        };Socket.prototype.onPacket = function (packet) {
          if ("opening" == this.readyState || "open" == this.readyState) {
            debug('socket receive: type "%s", data "%s"', packet.type, packet.data);this.emit("packet", packet);this.emit("heartbeat");switch (packet.type) {case "open":
                this.onHandshake(parsejson(packet.data));break;case "pong":
                this.setPing();this.emit("pong");break;case "error":
                var err = new Error("server error");err.code = packet.data;this.onError(err);break;case "message":
                this.emit("data", packet.data);this.emit("message", packet.data);break;}
          } else {
            debug('packet received with socket readyState "%s"', this.readyState);
          }
        };Socket.prototype.onHandshake = function (data) {
          this.emit("handshake", data);this.id = data.sid;this.transport.query.sid = data.sid;this.upgrades = this.filterUpgrades(data.upgrades);this.pingInterval = data.pingInterval;this.pingTimeout = data.pingTimeout;this.onOpen();if ("closed" == this.readyState) return;this.setPing();this.removeListener("heartbeat", this.onHeartbeat);this.on("heartbeat", this.onHeartbeat);
        };Socket.prototype.onHeartbeat = function (timeout) {
          clearTimeout(this.pingTimeoutTimer);var self = this;self.pingTimeoutTimer = setTimeout(function () {
            if ("closed" == self.readyState) return;self.onClose("ping timeout");
          }, timeout || self.pingInterval + self.pingTimeout);
        };Socket.prototype.setPing = function () {
          var self = this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer = setTimeout(function () {
            debug("writing ping packet - expecting pong within %sms", self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout);
          }, self.pingInterval);
        };Socket.prototype.ping = function () {
          var self = this;this.sendPacket("ping", function () {
            self.emit("ping");
          });
        };Socket.prototype.onDrain = function () {
          this.writeBuffer.splice(0, this.prevBufferLen);this.prevBufferLen = 0;if (0 === this.writeBuffer.length) {
            this.emit("drain");
          } else {
            this.flush();
          }
        };Socket.prototype.flush = function () {
          if ("closed" != this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
            debug("flushing %d packets in socket", this.writeBuffer.length);this.transport.send(this.writeBuffer);this.prevBufferLen = this.writeBuffer.length;this.emit("flush");
          }
        };Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
          this.sendPacket("message", msg, options, fn);return this;
        };Socket.prototype.sendPacket = function (type, data, options, fn) {
          if ("function" == typeof data) {
            fn = data;data = undefined;
          }if ("function" == typeof options) {
            fn = options;options = null;
          }if ("closing" == this.readyState || "closed" == this.readyState) {
            return;
          }options = options || {};options.compress = false !== options.compress;var packet = { type: type, data: data, options: options };this.emit("packetCreate", packet);this.writeBuffer.push(packet);if (fn) this.once("flush", fn);this.flush();
        };Socket.prototype.close = function () {
          if ("opening" == this.readyState || "open" == this.readyState) {
            this.readyState = "closing";var self = this;if (this.writeBuffer.length) {
              this.once("drain", function () {
                if (this.upgrading) {
                  waitForUpgrade();
                } else {
                  close();
                }
              });
            } else if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          }function close() {
            self.onClose("forced close");debug("socket closing - telling transport to close");self.transport.close();
          }function cleanupAndClose() {
            self.removeListener("upgrade", cleanupAndClose);self.removeListener("upgradeError", cleanupAndClose);close();
          }function waitForUpgrade() {
            self.once("upgrade", cleanupAndClose);self.once("upgradeError", cleanupAndClose);
          }return this;
        };Socket.prototype.onError = function (err) {
          debug("socket error %j", err);Socket.priorWebsocketSuccess = false;this.emit("error", err);this.onClose("transport error", err);
        };Socket.prototype.onClose = function (reason, desc) {
          if ("opening" == this.readyState || "open" == this.readyState || "closing" == this.readyState) {
            debug('socket close with reason: "%s"', reason);var self = this;clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);this.transport.removeAllListeners("close");this.transport.close();this.transport.removeAllListeners();this.readyState = "closed";this.id = null;this.emit("close", reason, desc);self.writeBuffer = [];self.prevBufferLen = 0;
          }
        };Socket.prototype.filterUpgrades = function (upgrades) {
          var filteredUpgrades = [];for (var i = 0, j = upgrades.length; i < j; i++) {
            if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
          }return filteredUpgrades;
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./transport": 4, "./transports": 5, "component-emitter": 15, debug: 17, "engine.io-parser": 19, indexof: 23, parsejson: 26, parseqs: 27, parseuri: 28 }], 4: [function (_dereq_, module, exports) {
      var parser = _dereq_("engine.io-parser");var Emitter = _dereq_("component-emitter");module.exports = Transport;function Transport(opts) {
        this.path = opts.path;this.hostname = opts.hostname;this.port = opts.port;this.secure = opts.secure;this.query = opts.query;this.timestampParam = opts.timestampParam;this.timestampRequests = opts.timestampRequests;this.readyState = "";this.agent = opts.agent || false;this.socket = opts.socket;this.enablesXDR = opts.enablesXDR;this.pfx = opts.pfx;this.key = opts.key;this.passphrase = opts.passphrase;this.cert = opts.cert;this.ca = opts.ca;this.ciphers = opts.ciphers;this.rejectUnauthorized = opts.rejectUnauthorized;this.extraHeaders = opts.extraHeaders;
      }Emitter(Transport.prototype);Transport.prototype.onError = function (msg, desc) {
        var err = new Error(msg);err.type = "TransportError";err.description = desc;this.emit("error", err);return this;
      };Transport.prototype.open = function () {
        if ("closed" == this.readyState || "" == this.readyState) {
          this.readyState = "opening";this.doOpen();
        }return this;
      };Transport.prototype.close = function () {
        if ("opening" == this.readyState || "open" == this.readyState) {
          this.doClose();this.onClose();
        }return this;
      };Transport.prototype.send = function (packets) {
        if ("open" == this.readyState) {
          this.write(packets);
        } else {
          throw new Error("Transport not open");
        }
      };Transport.prototype.onOpen = function () {
        this.readyState = "open";this.writable = true;this.emit("open");
      };Transport.prototype.onData = function (data) {
        var packet = parser.decodePacket(data, this.socket.binaryType);this.onPacket(packet);
      };Transport.prototype.onPacket = function (packet) {
        this.emit("packet", packet);
      };Transport.prototype.onClose = function () {
        this.readyState = "closed";this.emit("close");
      };
    }, { "component-emitter": 15, "engine.io-parser": 19 }], 5: [function (_dereq_, module, exports) {
      (function (global) {
        var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");var XHR = _dereq_("./polling-xhr");var JSONP = _dereq_("./polling-jsonp");var websocket = _dereq_("./websocket");exports.polling = polling;exports.websocket = websocket;function polling(opts) {
          var xhr;var xd = false;var xs = false;var jsonp = false !== opts.jsonp;if (global.location) {
            var isSSL = "https:" == location.protocol;var port = location.port;if (!port) {
              port = isSSL ? 443 : 80;
            }xd = opts.hostname != location.hostname || port != opts.port;xs = opts.secure != isSSL;
          }opts.xdomain = xd;opts.xscheme = xs;xhr = new XMLHttpRequest(opts);if ("open" in xhr && !opts.forceJSONP) {
            return new XHR(opts);
          } else {
            if (!jsonp) throw new Error("JSONP disabled");return new JSONP(opts);
          }
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./polling-jsonp": 6, "./polling-xhr": 7, "./websocket": 9, "xmlhttprequest-ssl": 10 }], 6: [function (_dereq_, module, exports) {
      (function (global) {
        var Polling = _dereq_("./polling");var inherit = _dereq_("component-inherit");module.exports = JSONPPolling;var rNewline = /\n/g;var rEscapedNewline = /\\n/g;var callbacks;var index = 0;function empty() {}function JSONPPolling(opts) {
          Polling.call(this, opts);this.query = this.query || {};if (!callbacks) {
            if (!global.___eio) global.___eio = [];callbacks = global.___eio;
          }this.index = callbacks.length;var self = this;callbacks.push(function (msg) {
            self.onData(msg);
          });this.query.j = this.index;if (global.document && global.addEventListener) {
            global.addEventListener("beforeunload", function () {
              if (self.script) self.script.onerror = empty;
            }, false);
          }
        }inherit(JSONPPolling, Polling);JSONPPolling.prototype.supportsBinary = false;JSONPPolling.prototype.doClose = function () {
          if (this.script) {
            this.script.parentNode.removeChild(this.script);this.script = null;
          }if (this.form) {
            this.form.parentNode.removeChild(this.form);this.form = null;this.iframe = null;
          }Polling.prototype.doClose.call(this);
        };JSONPPolling.prototype.doPoll = function () {
          var self = this;var script = document.createElement("script");if (this.script) {
            this.script.parentNode.removeChild(this.script);this.script = null;
          }script.async = true;script.src = this.uri();script.onerror = function (e) {
            self.onError("jsonp poll error", e);
          };var insertAt = document.getElementsByTagName("script")[0];if (insertAt) {
            insertAt.parentNode.insertBefore(script, insertAt);
          } else {
            (document.head || document.body).appendChild(script);
          }this.script = script;var isUAgecko = "undefined" != typeof navigator && /gecko/i.test(navigator.userAgent);if (isUAgecko) {
            setTimeout(function () {
              var iframe = document.createElement("iframe");document.body.appendChild(iframe);document.body.removeChild(iframe);
            }, 100);
          }
        };JSONPPolling.prototype.doWrite = function (data, fn) {
          var self = this;if (!this.form) {
            var form = document.createElement("form");var area = document.createElement("textarea");var id = this.iframeId = "eio_iframe_" + this.index;var iframe;form.className = "socketio";form.style.position = "absolute";form.style.top = "-1000px";form.style.left = "-1000px";form.target = id;form.method = "POST";form.setAttribute("accept-charset", "utf-8");area.name = "d";form.appendChild(area);document.body.appendChild(form);this.form = form;this.area = area;
          }this.form.action = this.uri();function complete() {
            initIframe();fn();
          }function initIframe() {
            if (self.iframe) {
              try {
                self.form.removeChild(self.iframe);
              } catch (e) {
                self.onError("jsonp polling iframe removal error", e);
              }
            }try {
              var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';iframe = document.createElement(html);
            } catch (e) {
              iframe = document.createElement("iframe");iframe.name = self.iframeId;iframe.src = "javascript:0";
            }iframe.id = self.iframeId;self.form.appendChild(iframe);self.iframe = iframe;
          }initIframe();data = data.replace(rEscapedNewline, "\\\n");this.area.value = data.replace(rNewline, "\\n");try {
            this.form.submit();
          } catch (e) {}if (this.iframe.attachEvent) {
            this.iframe.onreadystatechange = function () {
              if (self.iframe.readyState == "complete") {
                complete();
              }
            };
          } else {
            this.iframe.onload = complete;
          }
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./polling": 8, "component-inherit": 16 }], 7: [function (_dereq_, module, exports) {
      (function (global) {
        var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");var Polling = _dereq_("./polling");var Emitter = _dereq_("component-emitter");var inherit = _dereq_("component-inherit");var debug = _dereq_("debug")("engine.io-client:polling-xhr");module.exports = XHR;module.exports.Request = Request;function empty() {}function XHR(opts) {
          Polling.call(this, opts);if (global.location) {
            var isSSL = "https:" == location.protocol;var port = location.port;if (!port) {
              port = isSSL ? 443 : 80;
            }this.xd = opts.hostname != global.location.hostname || port != opts.port;this.xs = opts.secure != isSSL;
          } else {
            this.extraHeaders = opts.extraHeaders;
          }
        }inherit(XHR, Polling);XHR.prototype.supportsBinary = true;XHR.prototype.request = function (opts) {
          opts = opts || {};opts.uri = this.uri();opts.xd = this.xd;opts.xs = this.xs;opts.agent = this.agent || false;opts.supportsBinary = this.supportsBinary;opts.enablesXDR = this.enablesXDR;opts.pfx = this.pfx;opts.key = this.key;opts.passphrase = this.passphrase;opts.cert = this.cert;opts.ca = this.ca;opts.ciphers = this.ciphers;opts.rejectUnauthorized = this.rejectUnauthorized;opts.extraHeaders = this.extraHeaders;return new Request(opts);
        };XHR.prototype.doWrite = function (data, fn) {
          var isBinary = typeof data !== "string" && data !== undefined;var req = this.request({ method: "POST", data: data, isBinary: isBinary });var self = this;req.on("success", fn);req.on("error", function (err) {
            self.onError("xhr post error", err);
          });this.sendXhr = req;
        };XHR.prototype.doPoll = function () {
          debug("xhr poll");var req = this.request();var self = this;req.on("data", function (data) {
            self.onData(data);
          });req.on("error", function (err) {
            self.onError("xhr poll error", err);
          });this.pollXhr = req;
        };function Request(opts) {
          this.method = opts.method || "GET";this.uri = opts.uri;this.xd = !!opts.xd;this.xs = !!opts.xs;this.async = false !== opts.async;this.data = undefined != opts.data ? opts.data : null;this.agent = opts.agent;this.isBinary = opts.isBinary;this.supportsBinary = opts.supportsBinary;this.enablesXDR = opts.enablesXDR;this.pfx = opts.pfx;this.key = opts.key;this.passphrase = opts.passphrase;this.cert = opts.cert;this.ca = opts.ca;this.ciphers = opts.ciphers;this.rejectUnauthorized = opts.rejectUnauthorized;this.extraHeaders = opts.extraHeaders;this.create();
        }Emitter(Request.prototype);Request.prototype.create = function () {
          var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };opts.pfx = this.pfx;opts.key = this.key;opts.passphrase = this.passphrase;opts.cert = this.cert;opts.ca = this.ca;opts.ciphers = this.ciphers;opts.rejectUnauthorized = this.rejectUnauthorized;var xhr = this.xhr = new XMLHttpRequest(opts);var self = this;try {
            debug("xhr open %s: %s", this.method, this.uri);xhr.open(this.method, this.uri, this.async);try {
              if (this.extraHeaders) {
                xhr.setDisableHeaderCheck(true);for (var i in this.extraHeaders) {
                  if (this.extraHeaders.hasOwnProperty(i)) {
                    xhr.setRequestHeader(i, this.extraHeaders[i]);
                  }
                }
              }
            } catch (e) {}if (this.supportsBinary) {
              xhr.responseType = "arraybuffer";
            }if ("POST" == this.method) {
              try {
                if (this.isBinary) {
                  xhr.setRequestHeader("Content-type", "application/octet-stream");
                } else {
                  xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
                }
              } catch (e) {}
            }if ("withCredentials" in xhr) {
              xhr.withCredentials = true;
            }if (this.hasXDR()) {
              xhr.onload = function () {
                self.onLoad();
              };xhr.onerror = function () {
                self.onError(xhr.responseText);
              };
            } else {
              xhr.onreadystatechange = function () {
                if (4 != xhr.readyState) return;if (200 == xhr.status || 1223 == xhr.status) {
                  self.onLoad();
                } else {
                  setTimeout(function () {
                    self.onError(xhr.status);
                  }, 0);
                }
              };
            }debug("xhr data %s", this.data);xhr.send(this.data);
          } catch (e) {
            setTimeout(function () {
              self.onError(e);
            }, 0);return;
          }if (global.document) {
            this.index = Request.requestsCount++;Request.requests[this.index] = this;
          }
        };Request.prototype.onSuccess = function () {
          this.emit("success");this.cleanup();
        };Request.prototype.onData = function (data) {
          this.emit("data", data);this.onSuccess();
        };Request.prototype.onError = function (err) {
          this.emit("error", err);this.cleanup(true);
        };Request.prototype.cleanup = function (fromError) {
          if ("undefined" == typeof this.xhr || null === this.xhr) {
            return;
          }if (this.hasXDR()) {
            this.xhr.onload = this.xhr.onerror = empty;
          } else {
            this.xhr.onreadystatechange = empty;
          }if (fromError) {
            try {
              this.xhr.abort();
            } catch (e) {}
          }if (global.document) {
            delete Request.requests[this.index];
          }this.xhr = null;
        };Request.prototype.onLoad = function () {
          var data;try {
            var contentType;try {
              contentType = this.xhr.getResponseHeader("Content-Type").split(";")[0];
            } catch (e) {}if (contentType === "application/octet-stream") {
              data = this.xhr.response;
            } else {
              if (!this.supportsBinary) {
                data = this.xhr.responseText;
              } else {
                try {
                  data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
                } catch (e) {
                  var ui8Arr = new Uint8Array(this.xhr.response);var dataArray = [];for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
                    dataArray.push(ui8Arr[idx]);
                  }data = String.fromCharCode.apply(null, dataArray);
                }
              }
            }
          } catch (e) {
            this.onError(e);
          }if (null != data) {
            this.onData(data);
          }
        };Request.prototype.hasXDR = function () {
          return "undefined" !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
        };Request.prototype.abort = function () {
          this.cleanup();
        };if (global.document) {
          Request.requestsCount = 0;Request.requests = {};if (global.attachEvent) {
            global.attachEvent("onunload", unloadHandler);
          } else if (global.addEventListener) {
            global.addEventListener("beforeunload", unloadHandler, false);
          }
        }function unloadHandler() {
          for (var i in Request.requests) {
            if (Request.requests.hasOwnProperty(i)) {
              Request.requests[i].abort();
            }
          }
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./polling": 8, "component-emitter": 15, "component-inherit": 16, debug: 17, "xmlhttprequest-ssl": 10 }], 8: [function (_dereq_, module, exports) {
      var Transport = _dereq_("../transport");var parseqs = _dereq_("parseqs");var parser = _dereq_("engine.io-parser");var inherit = _dereq_("component-inherit");var yeast = _dereq_("yeast");var debug = _dereq_("debug")("engine.io-client:polling");module.exports = Polling;var hasXHR2 = (function () {
        var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");var xhr = new XMLHttpRequest({ xdomain: false });return null != xhr.responseType;
      })();function Polling(opts) {
        var forceBase64 = opts && opts.forceBase64;if (!hasXHR2 || forceBase64) {
          this.supportsBinary = false;
        }Transport.call(this, opts);
      }inherit(Polling, Transport);Polling.prototype.name = "polling";Polling.prototype.doOpen = function () {
        this.poll();
      };Polling.prototype.pause = function (onPause) {
        var pending = 0;var self = this;this.readyState = "pausing";function pause() {
          debug("paused");self.readyState = "paused";onPause();
        }if (this.polling || !this.writable) {
          var total = 0;if (this.polling) {
            debug("we are currently polling - waiting to pause");total++;this.once("pollComplete", function () {
              debug("pre-pause polling complete");--total || pause();
            });
          }if (!this.writable) {
            debug("we are currently writing - waiting to pause");total++;this.once("drain", function () {
              debug("pre-pause writing complete");--total || pause();
            });
          }
        } else {
          pause();
        }
      };Polling.prototype.poll = function () {
        debug("polling");this.polling = true;this.doPoll();this.emit("poll");
      };Polling.prototype.onData = function (data) {
        var self = this;debug("polling got data %s", data);var callback = function callback(packet, index, total) {
          if ("opening" == self.readyState) {
            self.onOpen();
          }if ("close" == packet.type) {
            self.onClose();return false;
          }self.onPacket(packet);
        };parser.decodePayload(data, this.socket.binaryType, callback);if ("closed" != this.readyState) {
          this.polling = false;this.emit("pollComplete");if ("open" == this.readyState) {
            this.poll();
          } else {
            debug('ignoring poll - transport state "%s"', this.readyState);
          }
        }
      };Polling.prototype.doClose = function () {
        var self = this;function close() {
          debug("writing close packet");self.write([{ type: "close" }]);
        }if ("open" == this.readyState) {
          debug("transport open - closing");close();
        } else {
          debug("transport not open - deferring close");this.once("open", close);
        }
      };Polling.prototype.write = function (packets) {
        var self = this;this.writable = false;var callbackfn = function callbackfn() {
          self.writable = true;self.emit("drain");
        };var self = this;parser.encodePayload(packets, this.supportsBinary, function (data) {
          self.doWrite(data, callbackfn);
        });
      };Polling.prototype.uri = function () {
        var query = this.query || {};var schema = this.secure ? "https" : "http";var port = "";if (false !== this.timestampRequests) {
          query[this.timestampParam] = yeast();
        }if (!this.supportsBinary && !query.sid) {
          query.b64 = 1;
        }query = parseqs.encode(query);if (this.port && ("https" == schema && this.port != 443 || "http" == schema && this.port != 80)) {
          port = ":" + this.port;
        }if (query.length) {
          query = "?" + query;
        }var ipv6 = this.hostname.indexOf(":") !== -1;return schema + "://" + (ipv6 ? "[" + this.hostname + "]" : this.hostname) + port + this.path + query;
      };
    }, { "../transport": 4, "component-inherit": 16, debug: 17, "engine.io-parser": 19, parseqs: 27, "xmlhttprequest-ssl": 10, yeast: 30 }], 9: [function (_dereq_, module, exports) {
      (function (global) {
        var Transport = _dereq_("../transport");var parser = _dereq_("engine.io-parser");var parseqs = _dereq_("parseqs");var inherit = _dereq_("component-inherit");var yeast = _dereq_("yeast");var debug = _dereq_("debug")("engine.io-client:websocket");var BrowserWebSocket = global.WebSocket || global.MozWebSocket;var WebSocket = BrowserWebSocket;if (!WebSocket && typeof window === "undefined") {
          try {
            WebSocket = _dereq_("ws");
          } catch (e) {}
        }module.exports = WS;function WS(opts) {
          var forceBase64 = opts && opts.forceBase64;if (forceBase64) {
            this.supportsBinary = false;
          }this.perMessageDeflate = opts.perMessageDeflate;Transport.call(this, opts);
        }inherit(WS, Transport);WS.prototype.name = "websocket";WS.prototype.supportsBinary = true;WS.prototype.doOpen = function () {
          if (!this.check()) {
            return;
          }var self = this;var uri = this.uri();var protocols = void 0;var opts = { agent: this.agent, perMessageDeflate: this.perMessageDeflate };opts.pfx = this.pfx;opts.key = this.key;opts.passphrase = this.passphrase;opts.cert = this.cert;opts.ca = this.ca;opts.ciphers = this.ciphers;opts.rejectUnauthorized = this.rejectUnauthorized;if (this.extraHeaders) {
            opts.headers = this.extraHeaders;
          }this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);if (this.ws.binaryType === undefined) {
            this.supportsBinary = false;
          }if (this.ws.supports && this.ws.supports.binary) {
            this.supportsBinary = true;this.ws.binaryType = "buffer";
          } else {
            this.ws.binaryType = "arraybuffer";
          }this.addEventListeners();
        };WS.prototype.addEventListeners = function () {
          var self = this;this.ws.onopen = function () {
            self.onOpen();
          };this.ws.onclose = function () {
            self.onClose();
          };this.ws.onmessage = function (ev) {
            self.onData(ev.data);
          };this.ws.onerror = function (e) {
            self.onError("websocket error", e);
          };
        };if ("undefined" != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
          WS.prototype.onData = function (data) {
            var self = this;setTimeout(function () {
              Transport.prototype.onData.call(self, data);
            }, 0);
          };
        }WS.prototype.write = function (packets) {
          var self = this;this.writable = false;var total = packets.length;for (var i = 0, l = total; i < l; i++) {
            (function (packet) {
              parser.encodePacket(packet, self.supportsBinary, function (data) {
                if (!BrowserWebSocket) {
                  var opts = {};if (packet.options) {
                    opts.compress = packet.options.compress;
                  }if (self.perMessageDeflate) {
                    var len = "string" == typeof data ? global.Buffer.byteLength(data) : data.length;if (len < self.perMessageDeflate.threshold) {
                      opts.compress = false;
                    }
                  }
                }try {
                  if (BrowserWebSocket) {
                    self.ws.send(data);
                  } else {
                    self.ws.send(data, opts);
                  }
                } catch (e) {
                  debug("websocket closed before onclose event");
                }--total || done();
              });
            })(packets[i]);
          }function done() {
            self.emit("flush");setTimeout(function () {
              self.writable = true;self.emit("drain");
            }, 0);
          }
        };WS.prototype.onClose = function () {
          Transport.prototype.onClose.call(this);
        };WS.prototype.doClose = function () {
          if (typeof this.ws !== "undefined") {
            this.ws.close();
          }
        };WS.prototype.uri = function () {
          var query = this.query || {};var schema = this.secure ? "wss" : "ws";var port = "";if (this.port && ("wss" == schema && this.port != 443 || "ws" == schema && this.port != 80)) {
            port = ":" + this.port;
          }if (this.timestampRequests) {
            query[this.timestampParam] = yeast();
          }if (!this.supportsBinary) {
            query.b64 = 1;
          }query = parseqs.encode(query);if (query.length) {
            query = "?" + query;
          }var ipv6 = this.hostname.indexOf(":") !== -1;return schema + "://" + (ipv6 ? "[" + this.hostname + "]" : this.hostname) + port + this.path + query;
        };WS.prototype.check = function () {
          return !!WebSocket && !("__initialize" in WebSocket && this.name === WS.prototype.name);
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "../transport": 4, "component-inherit": 16, debug: 17, "engine.io-parser": 19, parseqs: 27, ws: undefined, yeast: 30 }], 10: [function (_dereq_, module, exports) {
      var hasCORS = _dereq_("has-cors");module.exports = function (opts) {
        var xdomain = opts.xdomain;var xscheme = opts.xscheme;var enablesXDR = opts.enablesXDR;try {
          if ("undefined" != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
            return new XMLHttpRequest();
          }
        } catch (e) {}try {
          if ("undefined" != typeof XDomainRequest && !xscheme && enablesXDR) {
            return new XDomainRequest();
          }
        } catch (e) {}if (!xdomain) {
          try {
            return new ActiveXObject("Microsoft.XMLHTTP");
          } catch (e) {}
        }
      };
    }, { "has-cors": 22 }], 11: [function (_dereq_, module, exports) {
      module.exports = after;function after(count, callback, err_cb) {
        var bail = false;err_cb = err_cb || noop;proxy.count = count;return count === 0 ? callback() : proxy;function proxy(err, result) {
          if (proxy.count <= 0) {
            throw new Error("after called too many times");
          }--proxy.count;if (err) {
            bail = true;callback(err);callback = err_cb;
          } else if (proxy.count === 0 && !bail) {
            callback(null, result);
          }
        }
      }function noop() {}
    }, {}], 12: [function (_dereq_, module, exports) {
      module.exports = function (arraybuffer, start, end) {
        var bytes = arraybuffer.byteLength;start = start || 0;end = end || bytes;if (arraybuffer.slice) {
          return arraybuffer.slice(start, end);
        }if (start < 0) {
          start += bytes;
        }if (end < 0) {
          end += bytes;
        }if (end > bytes) {
          end = bytes;
        }if (start >= bytes || start >= end || bytes === 0) {
          return new ArrayBuffer(0);
        }var abv = new Uint8Array(arraybuffer);var result = new Uint8Array(end - start);for (var i = start, ii = 0; i < end; i++, ii++) {
          result[ii] = abv[i];
        }return result.buffer;
      };
    }, {}], 13: [function (_dereq_, module, exports) {
      (function (chars) {
        "use strict";exports.encode = function (arraybuffer) {
          var bytes = new Uint8Array(arraybuffer),
              i,
              len = bytes.length,
              base64 = "";for (i = 0; i < len; i += 3) {
            base64 += chars[bytes[i] >> 2];
            base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];base64 += chars[bytes[i + 2] & 63];
          }if (len % 3 === 2) {
            base64 = base64.substring(0, base64.length - 1) + "=";
          } else if (len % 3 === 1) {
            base64 = base64.substring(0, base64.length - 2) + "==";
          }return base64;
        };exports.decode = function (base64) {
          var bufferLength = base64.length * .75,
              len = base64.length,
              i,
              p = 0,
              encoded1,
              encoded2,
              encoded3,
              encoded4;if (base64[base64.length - 1] === "=") {
            bufferLength--;if (base64[base64.length - 2] === "=") {
              bufferLength--;
            }
          }var arraybuffer = new ArrayBuffer(bufferLength),
              bytes = new Uint8Array(arraybuffer);for (i = 0; i < len; i += 4) {
            encoded1 = chars.indexOf(base64[i]);encoded2 = chars.indexOf(base64[i + 1]);encoded3 = chars.indexOf(base64[i + 2]);encoded4 = chars.indexOf(base64[i + 3]);bytes[p++] = encoded1 << 2 | encoded2 >> 4;bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
          }return arraybuffer;
        };
      })("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    }, {}], 14: [function (_dereq_, module, exports) {
      (function (global) {
        var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;var blobSupported = (function () {
          try {
            var a = new Blob(["hi"]);return a.size === 2;
          } catch (e) {
            return false;
          }
        })();var blobSupportsArrayBufferView = blobSupported && (function () {
          try {
            var b = new Blob([new Uint8Array([1, 2])]);return b.size === 2;
          } catch (e) {
            return false;
          }
        })();var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;function mapArrayBufferViews(ary) {
          for (var i = 0; i < ary.length; i++) {
            var chunk = ary[i];if (chunk.buffer instanceof ArrayBuffer) {
              var buf = chunk.buffer;if (chunk.byteLength !== buf.byteLength) {
                var copy = new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));buf = copy.buffer;
              }ary[i] = buf;
            }
          }
        }function BlobBuilderConstructor(ary, options) {
          options = options || {};var bb = new BlobBuilder();mapArrayBufferViews(ary);for (var i = 0; i < ary.length; i++) {
            bb.append(ary[i]);
          }return options.type ? bb.getBlob(options.type) : bb.getBlob();
        }function BlobConstructor(ary, options) {
          mapArrayBufferViews(ary);return new Blob(ary, options || {});
        }module.exports = (function () {
          if (blobSupported) {
            return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
          } else if (blobBuilderSupported) {
            return BlobBuilderConstructor;
          } else {
            return undefined;
          }
        })();
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 15: [function (_dereq_, module, exports) {
      module.exports = Emitter;function Emitter(obj) {
        if (obj) return mixin(obj);
      }function mixin(obj) {
        for (var key in Emitter.prototype) {
          obj[key] = Emitter.prototype[key];
        }return obj;
      }Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};(this._callbacks[event] = this._callbacks[event] || []).push(fn);return this;
      };Emitter.prototype.once = function (event, fn) {
        var self = this;this._callbacks = this._callbacks || {};function on() {
          self.off(event, on);fn.apply(this, arguments);
        }on.fn = fn;this.on(event, on);return this;
      };Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};if (0 == arguments.length) {
          this._callbacks = {};return this;
        }var callbacks = this._callbacks[event];if (!callbacks) return this;if (1 == arguments.length) {
          delete this._callbacks[event];return this;
        }var cb;for (var i = 0; i < callbacks.length; i++) {
          cb = callbacks[i];if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);break;
          }
        }return this;
      };Emitter.prototype.emit = function (event) {
        this._callbacks = this._callbacks || {};var args = [].slice.call(arguments, 1),
            callbacks = this._callbacks[event];if (callbacks) {
          callbacks = callbacks.slice(0);for (var i = 0, len = callbacks.length; i < len; ++i) {
            callbacks[i].apply(this, args);
          }
        }return this;
      };Emitter.prototype.listeners = function (event) {
        this._callbacks = this._callbacks || {};return this._callbacks[event] || [];
      };Emitter.prototype.hasListeners = function (event) {
        return !!this.listeners(event).length;
      };
    }, {}], 16: [function (_dereq_, module, exports) {
      module.exports = function (a, b) {
        var fn = function fn() {};fn.prototype = b.prototype;a.prototype = new fn();a.prototype.constructor = a;
      };
    }, {}], 17: [function (_dereq_, module, exports) {
      exports = module.exports = _dereq_("./debug");exports.log = log;exports.formatArgs = formatArgs;exports.save = save;exports.load = load;exports.useColors = useColors;exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();exports.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"];function useColors() {
        return "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
      }exports.formatters.j = function (v) {
        return JSON.stringify(v);
      };function formatArgs() {
        var args = arguments;var useColors = this.useColors;args[0] = (useColors ? "%c" : "") + this.namespace + (useColors ? " %c" : " ") + args[0] + (useColors ? "%c " : " ") + "+" + exports.humanize(this.diff);if (!useColors) return args;var c = "color: " + this.color;args = [args[0], c, "color: inherit"].concat(Array.prototype.slice.call(args, 1));var index = 0;var lastC = 0;args[0].replace(/%[a-z%]/g, function (match) {
          if ("%%" === match) return;index++;if ("%c" === match) {
            lastC = index;
          }
        });args.splice(lastC, 0, c);return args;
      }function log() {
        return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
      }function save(namespaces) {
        try {
          if (null == namespaces) {
            exports.storage.removeItem("debug");
          } else {
            exports.storage.debug = namespaces;
          }
        } catch (e) {}
      }function load() {
        var r;try {
          r = exports.storage.debug;
        } catch (e) {}return r;
      }exports.enable(load());function localstorage() {
        try {
          return window.localStorage;
        } catch (e) {}
      }
    }, { "./debug": 18 }], 18: [function (_dereq_, module, exports) {
      exports = module.exports = debug;exports.coerce = coerce;exports.disable = disable;exports.enable = enable;exports.enabled = enabled;exports.humanize = _dereq_("ms");exports.names = [];exports.skips = [];exports.formatters = {};var prevColor = 0;var prevTime;function selectColor() {
        return exports.colors[prevColor++ % exports.colors.length];
      }function debug(namespace) {
        function disabled() {}disabled.enabled = false;function enabled() {
          var self = enabled;var curr = +new Date();var ms = curr - (prevTime || curr);self.diff = ms;self.prev = prevTime;self.curr = curr;prevTime = curr;if (null == self.useColors) self.useColors = exports.useColors();if (null == self.color && self.useColors) self.color = selectColor();var args = Array.prototype.slice.call(arguments);args[0] = exports.coerce(args[0]);if ("string" !== typeof args[0]) {
            args = ["%o"].concat(args);
          }var index = 0;args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
            if (match === "%%") return match;index++;var formatter = exports.formatters[format];if ("function" === typeof formatter) {
              var val = args[index];match = formatter.call(self, val);args.splice(index, 1);index--;
            }return match;
          });if ("function" === typeof exports.formatArgs) {
            args = exports.formatArgs.apply(self, args);
          }var logFn = enabled.log || exports.log || console.log.bind(console);logFn.apply(self, args);
        }enabled.enabled = true;var fn = exports.enabled(namespace) ? enabled : disabled;fn.namespace = namespace;return fn;
      }function enable(namespaces) {
        exports.save(namespaces);var split = (namespaces || "").split(/[\s,]+/);var len = split.length;for (var i = 0; i < len; i++) {
          if (!split[i]) continue;namespaces = split[i].replace(/\*/g, ".*?");if (namespaces[0] === "-") {
            exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
          } else {
            exports.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }function disable() {
        exports.enable("");
      }function enabled(name) {
        var i, len;for (i = 0, len = exports.skips.length; i < len; i++) {
          if (exports.skips[i].test(name)) {
            return false;
          }
        }for (i = 0, len = exports.names.length; i < len; i++) {
          if (exports.names[i].test(name)) {
            return true;
          }
        }return false;
      }function coerce(val) {
        if (val instanceof Error) return val.stack || val.message;return val;
      }
    }, { ms: 25 }], 19: [function (_dereq_, module, exports) {
      (function (global) {
        var keys = _dereq_("./keys");var hasBinary = _dereq_("has-binary");var sliceBuffer = _dereq_("arraybuffer.slice");var base64encoder = _dereq_("base64-arraybuffer");var after = _dereq_("after");var utf8 = _dereq_("utf8");var isAndroid = navigator.userAgent.match(/Android/i);var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);var dontSendBlobs = isAndroid || isPhantomJS;exports.protocol = 3;var packets = exports.packets = { open: 0, close: 1, ping: 2, pong: 3, message: 4, upgrade: 5, noop: 6 };var packetslist = keys(packets);var err = { type: "error", data: "parser error" };var Blob = _dereq_("blob");exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
          if ("function" == typeof supportsBinary) {
            callback = supportsBinary;supportsBinary = false;
          }if ("function" == typeof utf8encode) {
            callback = utf8encode;utf8encode = null;
          }var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;if (global.ArrayBuffer && data instanceof ArrayBuffer) {
            return encodeArrayBuffer(packet, supportsBinary, callback);
          } else if (Blob && data instanceof global.Blob) {
            return encodeBlob(packet, supportsBinary, callback);
          }if (data && data.base64) {
            return encodeBase64Object(packet, callback);
          }var encoded = packets[packet.type];if (undefined !== packet.data) {
            encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
          }return callback("" + encoded);
        };function encodeBase64Object(packet, callback) {
          var message = "b" + exports.packets[packet.type] + packet.data.data;return callback(message);
        }function encodeArrayBuffer(packet, supportsBinary, callback) {
          if (!supportsBinary) {
            return exports.encodeBase64Packet(packet, callback);
          }var data = packet.data;var contentArray = new Uint8Array(data);var resultBuffer = new Uint8Array(1 + data.byteLength);resultBuffer[0] = packets[packet.type];for (var i = 0; i < contentArray.length; i++) {
            resultBuffer[i + 1] = contentArray[i];
          }return callback(resultBuffer.buffer);
        }function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
          if (!supportsBinary) {
            return exports.encodeBase64Packet(packet, callback);
          }var fr = new FileReader();fr.onload = function () {
            packet.data = fr.result;exports.encodePacket(packet, supportsBinary, true, callback);
          };return fr.readAsArrayBuffer(packet.data);
        }function encodeBlob(packet, supportsBinary, callback) {
          if (!supportsBinary) {
            return exports.encodeBase64Packet(packet, callback);
          }if (dontSendBlobs) {
            return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
          }var length = new Uint8Array(1);length[0] = packets[packet.type];var blob = new Blob([length.buffer, packet.data]);return callback(blob);
        }exports.encodeBase64Packet = function (packet, callback) {
          var message = "b" + exports.packets[packet.type];if (Blob && packet.data instanceof global.Blob) {
            var fr = new FileReader();fr.onload = function () {
              var b64 = fr.result.split(",")[1];callback(message + b64);
            };return fr.readAsDataURL(packet.data);
          }var b64data;try {
            b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
          } catch (e) {
            var typed = new Uint8Array(packet.data);var basic = new Array(typed.length);for (var i = 0; i < typed.length; i++) {
              basic[i] = typed[i];
            }b64data = String.fromCharCode.apply(null, basic);
          }message += global.btoa(b64data);return callback(message);
        };exports.decodePacket = function (data, binaryType, utf8decode) {
          if (typeof data == "string" || data === undefined) {
            if (data.charAt(0) == "b") {
              return exports.decodeBase64Packet(data.substr(1), binaryType);
            }if (utf8decode) {
              try {
                data = utf8.decode(data);
              } catch (e) {
                return err;
              }
            }var type = data.charAt(0);if (Number(type) != type || !packetslist[type]) {
              return err;
            }if (data.length > 1) {
              return { type: packetslist[type], data: data.substring(1) };
            } else {
              return { type: packetslist[type] };
            }
          }var asArray = new Uint8Array(data);var type = asArray[0];var rest = sliceBuffer(data, 1);if (Blob && binaryType === "blob") {
            rest = new Blob([rest]);
          }return { type: packetslist[type], data: rest };
        };exports.decodeBase64Packet = function (msg, binaryType) {
          var type = packetslist[msg.charAt(0)];if (!global.ArrayBuffer) {
            return { type: type, data: { base64: true, data: msg.substr(1) } };
          }var data = base64encoder.decode(msg.substr(1));if (binaryType === "blob" && Blob) {
            data = new Blob([data]);
          }return { type: type, data: data };
        };exports.encodePayload = function (packets, supportsBinary, callback) {
          if (typeof supportsBinary == "function") {
            callback = supportsBinary;supportsBinary = null;
          }var isBinary = hasBinary(packets);if (supportsBinary && isBinary) {
            if (Blob && !dontSendBlobs) {
              return exports.encodePayloadAsBlob(packets, callback);
            }return exports.encodePayloadAsArrayBuffer(packets, callback);
          }if (!packets.length) {
            return callback("0:");
          }function setLengthHeader(message) {
            return message.length + ":" + message;
          }function encodeOne(packet, doneCallback) {
            exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {
              doneCallback(null, setLengthHeader(message));
            });
          }map(packets, encodeOne, function (err, results) {
            return callback(results.join(""));
          });
        };function map(ary, each, done) {
          var result = new Array(ary.length);var next = after(ary.length, done);var eachWithIndex = function eachWithIndex(i, el, cb) {
            each(el, function (error, msg) {
              result[i] = msg;cb(error, result);
            });
          };for (var i = 0; i < ary.length; i++) {
            eachWithIndex(i, ary[i], next);
          }
        }exports.decodePayload = function (data, binaryType, callback) {
          if (typeof data != "string") {
            return exports.decodePayloadAsBinary(data, binaryType, callback);
          }if (typeof binaryType === "function") {
            callback = binaryType;binaryType = null;
          }var packet;if (data == "") {
            return callback(err, 0, 1);
          }var length = "",
              n,
              msg;for (var i = 0, l = data.length; i < l; i++) {
            var chr = data.charAt(i);if (":" != chr) {
              length += chr;
            } else {
              if ("" == length || length != (n = Number(length))) {
                return callback(err, 0, 1);
              }msg = data.substr(i + 1, n);if (length != msg.length) {
                return callback(err, 0, 1);
              }if (msg.length) {
                packet = exports.decodePacket(msg, binaryType, true);if (err.type == packet.type && err.data == packet.data) {
                  return callback(err, 0, 1);
                }var ret = callback(packet, i + n, l);if (false === ret) return;
              }i += n;length = "";
            }
          }if (length != "") {
            return callback(err, 0, 1);
          }
        };exports.encodePayloadAsArrayBuffer = function (packets, callback) {
          if (!packets.length) {
            return callback(new ArrayBuffer(0));
          }function encodeOne(packet, doneCallback) {
            exports.encodePacket(packet, true, true, function (data) {
              return doneCallback(null, data);
            });
          }map(packets, encodeOne, function (err, encodedPackets) {
            var totalLength = encodedPackets.reduce(function (acc, p) {
              var len;if (typeof p === "string") {
                len = p.length;
              } else {
                len = p.byteLength;
              }return acc + len.toString().length + len + 2;
            }, 0);var resultArray = new Uint8Array(totalLength);var bufferIndex = 0;encodedPackets.forEach(function (p) {
              var isString = typeof p === "string";var ab = p;if (isString) {
                var view = new Uint8Array(p.length);for (var i = 0; i < p.length; i++) {
                  view[i] = p.charCodeAt(i);
                }ab = view.buffer;
              }if (isString) {
                resultArray[bufferIndex++] = 0;
              } else {
                resultArray[bufferIndex++] = 1;
              }var lenStr = ab.byteLength.toString();for (var i = 0; i < lenStr.length; i++) {
                resultArray[bufferIndex++] = parseInt(lenStr[i]);
              }resultArray[bufferIndex++] = 255;var view = new Uint8Array(ab);for (var i = 0; i < view.length; i++) {
                resultArray[bufferIndex++] = view[i];
              }
            });return callback(resultArray.buffer);
          });
        };exports.encodePayloadAsBlob = function (packets, callback) {
          function encodeOne(packet, doneCallback) {
            exports.encodePacket(packet, true, true, function (encoded) {
              var binaryIdentifier = new Uint8Array(1);binaryIdentifier[0] = 1;if (typeof encoded === "string") {
                var view = new Uint8Array(encoded.length);for (var i = 0; i < encoded.length; i++) {
                  view[i] = encoded.charCodeAt(i);
                }encoded = view.buffer;binaryIdentifier[0] = 0;
              }var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;var lenStr = len.toString();var lengthAry = new Uint8Array(lenStr.length + 1);for (var i = 0; i < lenStr.length; i++) {
                lengthAry[i] = parseInt(lenStr[i]);
              }lengthAry[lenStr.length] = 255;if (Blob) {
                var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);doneCallback(null, blob);
              }
            });
          }map(packets, encodeOne, function (err, results) {
            return callback(new Blob(results));
          });
        };exports.decodePayloadAsBinary = function (data, binaryType, callback) {
          if (typeof binaryType === "function") {
            callback = binaryType;binaryType = null;
          }var bufferTail = data;var buffers = [];var numberTooLong = false;while (bufferTail.byteLength > 0) {
            var tailArray = new Uint8Array(bufferTail);var isString = tailArray[0] === 0;var msgLength = "";for (var i = 1;; i++) {
              if (tailArray[i] == 255) break;if (msgLength.length > 310) {
                numberTooLong = true;break;
              }msgLength += tailArray[i];
            }if (numberTooLong) return callback(err, 0, 1);bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);msgLength = parseInt(msgLength);var msg = sliceBuffer(bufferTail, 0, msgLength);if (isString) {
              try {
                msg = String.fromCharCode.apply(null, new Uint8Array(msg));
              } catch (e) {
                var typed = new Uint8Array(msg);msg = "";for (var i = 0; i < typed.length; i++) {
                  msg += String.fromCharCode(typed[i]);
                }
              }
            }buffers.push(msg);bufferTail = sliceBuffer(bufferTail, msgLength);
          }var total = buffers.length;buffers.forEach(function (buffer, i) {
            callback(exports.decodePacket(buffer, binaryType, true), i, total);
          });
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./keys": 20, after: 11, "arraybuffer.slice": 12, "base64-arraybuffer": 13, blob: 14, "has-binary": 21, utf8: 29 }], 20: [function (_dereq_, module, exports) {
      module.exports = Object.keys || function keys(obj) {
        var arr = [];var has = Object.prototype.hasOwnProperty;for (var i in obj) {
          if (has.call(obj, i)) {
            arr.push(i);
          }
        }return arr;
      };
    }, {}], 21: [function (_dereq_, module, exports) {
      (function (global) {
        var isArray = _dereq_("isarray");module.exports = hasBinary;function hasBinary(data) {
          function _hasBinary(obj) {
            if (!obj) return false;if (global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
              return true;
            }if (isArray(obj)) {
              for (var i = 0; i < obj.length; i++) {
                if (_hasBinary(obj[i])) {
                  return true;
                }
              }
            } else if (obj && "object" == typeof obj) {
              if (obj.toJSON) {
                obj = obj.toJSON();
              }for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
                  return true;
                }
              }
            }return false;
          }return _hasBinary(data);
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { isarray: 24 }], 22: [function (_dereq_, module, exports) {
      try {
        module.exports = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
      } catch (err) {
        module.exports = false;
      }
    }, {}], 23: [function (_dereq_, module, exports) {
      var indexOf = [].indexOf;module.exports = function (arr, obj) {
        if (indexOf) return arr.indexOf(obj);for (var i = 0; i < arr.length; ++i) {
          if (arr[i] === obj) return i;
        }return -1;
      };
    }, {}], 24: [function (_dereq_, module, exports) {
      module.exports = Array.isArray || function (arr) {
        return Object.prototype.toString.call(arr) == "[object Array]";
      };
    }, {}], 25: [function (_dereq_, module, exports) {
      var s = 1e3;var m = s * 60;var h = m * 60;var d = h * 24;var y = d * 365.25;module.exports = function (val, options) {
        options = options || {};if ("string" == typeof val) return parse(val);return options.long ? long(val) : short(val);
      };function parse(str) {
        str = "" + str;if (str.length > 1e4) return;var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if (!match) return;var n = parseFloat(match[1]);var type = (match[2] || "ms").toLowerCase();switch (type) {case "years":case "year":case "yrs":case "yr":case "y":
            return n * y;case "days":case "day":case "d":
            return n * d;case "hours":case "hour":case "hrs":case "hr":case "h":
            return n * h;case "minutes":case "minute":case "mins":case "min":case "m":
            return n * m;case "seconds":case "second":case "secs":case "sec":case "s":
            return n * s;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":
            return n;}
      }function short(ms) {
        if (ms >= d) return Math.round(ms / d) + "d";if (ms >= h) return Math.round(ms / h) + "h";if (ms >= m) return Math.round(ms / m) + "m";if (ms >= s) return Math.round(ms / s) + "s";return ms + "ms";
      }function long(ms) {
        return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
      }function plural(ms, n, name) {
        if (ms < n) return;if (ms < n * 1.5) return Math.floor(ms / n) + " " + name;return Math.ceil(ms / n) + " " + name + "s";
      }
    }, {}], 26: [function (_dereq_, module, exports) {
      (function (global) {
        var rvalidchars = /^[\],:{}\s]*$/;var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;var rtrimLeft = /^\s+/;var rtrimRight = /\s+$/;module.exports = function parsejson(data) {
          if ("string" != typeof data || !data) {
            return null;
          }data = data.replace(rtrimLeft, "").replace(rtrimRight, "");if (global.JSON && JSON.parse) {
            return JSON.parse(data);
          }if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
            return new Function("return " + data)();
          }
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 27: [function (_dereq_, module, exports) {
      exports.encode = function (obj) {
        var str = "";for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            if (str.length) str += "&";str += encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]);
          }
        }return str;
      };exports.decode = function (qs) {
        var qry = {};var pairs = qs.split("&");for (var i = 0, l = pairs.length; i < l; i++) {
          var pair = pairs[i].split("=");qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
        }return qry;
      };
    }, {}], 28: [function (_dereq_, module, exports) {
      var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;var parts = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];module.exports = function parseuri(str) {
        var src = str,
            b = str.indexOf("["),
            e = str.indexOf("]");if (b != -1 && e != -1) {
          str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
        }var m = re.exec(str || ""),
            uri = {},
            i = 14;while (i--) {
          uri[parts[i]] = m[i] || "";
        }if (b != -1 && e != -1) {
          uri.source = src;uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");uri.ipv6uri = true;
        }return uri;
      };
    }, {}], 29: [function (_dereq_, module, exports) {
      (function (global) {
        (function (root) {
          var freeExports = typeof exports == "object" && exports;var freeModule = typeof module == "object" && module && module.exports == freeExports && module;var freeGlobal = typeof global == "object" && global;if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
            root = freeGlobal;
          }var stringFromCharCode = String.fromCharCode;function ucs2decode(string) {
            var output = [];var counter = 0;var length = string.length;var value;var extra;while (counter < length) {
              value = string.charCodeAt(counter++);if (value >= 55296 && value <= 56319 && counter < length) {
                extra = string.charCodeAt(counter++);if ((extra & 64512) == 56320) {
                  output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                } else {
                  output.push(value);counter--;
                }
              } else {
                output.push(value);
              }
            }return output;
          }function ucs2encode(array) {
            var length = array.length;var index = -1;var value;var output = "";while (++index < length) {
              value = array[index];if (value > 65535) {
                value -= 65536;output += stringFromCharCode(value >>> 10 & 1023 | 55296);value = 56320 | value & 1023;
              }output += stringFromCharCode(value);
            }return output;
          }function checkScalarValue(codePoint) {
            if (codePoint >= 55296 && codePoint <= 57343) {
              throw Error("Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value");
            }
          }function createByte(codePoint, shift) {
            return stringFromCharCode(codePoint >> shift & 63 | 128);
          }function encodeCodePoint(codePoint) {
            if ((codePoint & 4294967168) == 0) {
              return stringFromCharCode(codePoint);
            }var symbol = "";if ((codePoint & 4294965248) == 0) {
              symbol = stringFromCharCode(codePoint >> 6 & 31 | 192);
            } else if ((codePoint & 4294901760) == 0) {
              checkScalarValue(codePoint);symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);symbol += createByte(codePoint, 6);
            } else if ((codePoint & 4292870144) == 0) {
              symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);symbol += createByte(codePoint, 12);symbol += createByte(codePoint, 6);
            }symbol += stringFromCharCode(codePoint & 63 | 128);return symbol;
          }function utf8encode(string) {
            var codePoints = ucs2decode(string);var length = codePoints.length;var index = -1;var codePoint;var byteString = "";while (++index < length) {
              codePoint = codePoints[index];byteString += encodeCodePoint(codePoint);
            }return byteString;
          }function readContinuationByte() {
            if (byteIndex >= byteCount) {
              throw Error("Invalid byte index");
            }var continuationByte = byteArray[byteIndex] & 255;byteIndex++;if ((continuationByte & 192) == 128) {
              return continuationByte & 63;
            }throw Error("Invalid continuation byte");
          }function decodeSymbol() {
            var byte1;var byte2;var byte3;var byte4;var codePoint;if (byteIndex > byteCount) {
              throw Error("Invalid byte index");
            }if (byteIndex == byteCount) {
              return false;
            }byte1 = byteArray[byteIndex] & 255;byteIndex++;if ((byte1 & 128) == 0) {
              return byte1;
            }if ((byte1 & 224) == 192) {
              var byte2 = readContinuationByte();codePoint = (byte1 & 31) << 6 | byte2;if (codePoint >= 128) {
                return codePoint;
              } else {
                throw Error("Invalid continuation byte");
              }
            }if ((byte1 & 240) == 224) {
              byte2 = readContinuationByte();byte3 = readContinuationByte();codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;if (codePoint >= 2048) {
                checkScalarValue(codePoint);return codePoint;
              } else {
                throw Error("Invalid continuation byte");
              }
            }if ((byte1 & 248) == 240) {
              byte2 = readContinuationByte();byte3 = readContinuationByte();byte4 = readContinuationByte();codePoint = (byte1 & 15) << 18 | byte2 << 12 | byte3 << 6 | byte4;if (codePoint >= 65536 && codePoint <= 1114111) {
                return codePoint;
              }
            }throw Error("Invalid UTF-8 detected");
          }var byteArray;var byteCount;var byteIndex;function utf8decode(byteString) {
            byteArray = ucs2decode(byteString);byteCount = byteArray.length;byteIndex = 0;var codePoints = [];var tmp;while ((tmp = decodeSymbol()) !== false) {
              codePoints.push(tmp);
            }return ucs2encode(codePoints);
          }var utf8 = { version: "2.0.0", encode: utf8encode, decode: utf8decode };if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
            define(function () {
              return utf8;
            });
          } else if (freeExports && !freeExports.nodeType) {
            if (freeModule) {
              freeModule.exports = utf8;
            } else {
              var object = {};var hasOwnProperty = object.hasOwnProperty;for (var key in utf8) {
                hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
              }
            }
          } else {
            root.utf8 = utf8;
          }
        })(this);
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 30: [function (_dereq_, module, exports) {
      "use strict";var alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),
          length = 64,
          map = {},
          seed = 0,
          i = 0,
          prev;function encode(num) {
        var encoded = "";do {
          encoded = alphabet[num % length] + encoded;num = Math.floor(num / length);
        } while (num > 0);return encoded;
      }function decode(str) {
        var decoded = 0;for (i = 0; i < str.length; i++) {
          decoded = decoded * length + map[str.charAt(i)];
        }return decoded;
      }function yeast() {
        var now = encode(+new Date());if (now !== prev) return seed = 0, prev = now;return now + "." + encode(seed++);
      }for (; i < length; i++) map[alphabet[i]] = i;yeast.encode = encode;yeast.decode = decode;module.exports = yeast;
    }, {}], 31: [function (_dereq_, module, exports) {
      var url = _dereq_("./url");var parser = _dereq_("socket.io-parser");var Manager = _dereq_("./manager");var debug = _dereq_("debug")("socket.io-client");module.exports = exports = lookup;var cache = exports.managers = {};function lookup(uri, opts) {
        if (typeof uri == "object") {
          opts = uri;uri = undefined;
        }opts = opts || {};var parsed = url(uri);var source = parsed.source;var id = parsed.id;var path = parsed.path;var sameNamespace = cache[id] && path in cache[id].nsps;var newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;var io;if (newConnection) {
          debug("ignoring socket cache for %s", source);io = Manager(source, opts);
        } else {
          if (!cache[id]) {
            debug("new io instance for %s", source);cache[id] = Manager(source, opts);
          }io = cache[id];
        }return io.socket(parsed.path);
      }exports.protocol = parser.protocol;exports.connect = lookup;exports.Manager = _dereq_("./manager");exports.Socket = _dereq_("./socket");
    }, { "./manager": 32, "./socket": 34, "./url": 35, debug: 39, "socket.io-parser": 47 }], 32: [function (_dereq_, module, exports) {
      var eio = _dereq_("engine.io-client");var Socket = _dereq_("./socket");var Emitter = _dereq_("component-emitter");var parser = _dereq_("socket.io-parser");var on = _dereq_("./on");var bind = _dereq_("component-bind");var debug = _dereq_("debug")("socket.io-client:manager");var indexOf = _dereq_("indexof");var Backoff = _dereq_("backo2");var has = Object.prototype.hasOwnProperty;module.exports = Manager;function Manager(uri, opts) {
        if (!(this instanceof Manager)) return new Manager(uri, opts);if (uri && "object" == typeof uri) {
          opts = uri;uri = undefined;
        }opts = opts || {};opts.path = opts.path || "/socket.io";this.nsps = {};this.subs = [];this.opts = opts;this.reconnection(opts.reconnection !== false);this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);this.reconnectionDelay(opts.reconnectionDelay || 1e3);this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);this.randomizationFactor(opts.randomizationFactor || .5);this.backoff = new Backoff({ min: this.reconnectionDelay(), max: this.reconnectionDelayMax(), jitter: this.randomizationFactor() });this.timeout(null == opts.timeout ? 2e4 : opts.timeout);this.readyState = "closed";this.uri = uri;this.connecting = [];this.lastPing = null;this.encoding = false;this.packetBuffer = [];this.encoder = new parser.Encoder();this.decoder = new parser.Decoder();this.autoConnect = opts.autoConnect !== false;if (this.autoConnect) this.open();
      }Manager.prototype.emitAll = function () {
        this.emit.apply(this, arguments);for (var nsp in this.nsps) {
          if (has.call(this.nsps, nsp)) {
            this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
          }
        }
      };Manager.prototype.updateSocketIds = function () {
        for (var nsp in this.nsps) {
          if (has.call(this.nsps, nsp)) {
            this.nsps[nsp].id = this.engine.id;
          }
        }
      };Emitter(Manager.prototype);Manager.prototype.reconnection = function (v) {
        if (!arguments.length) return this._reconnection;this._reconnection = !!v;return this;
      };Manager.prototype.reconnectionAttempts = function (v) {
        if (!arguments.length) return this._reconnectionAttempts;this._reconnectionAttempts = v;return this;
      };Manager.prototype.reconnectionDelay = function (v) {
        if (!arguments.length) return this._reconnectionDelay;this._reconnectionDelay = v;this.backoff && this.backoff.setMin(v);return this;
      };Manager.prototype.randomizationFactor = function (v) {
        if (!arguments.length) return this._randomizationFactor;this._randomizationFactor = v;this.backoff && this.backoff.setJitter(v);return this;
      };Manager.prototype.reconnectionDelayMax = function (v) {
        if (!arguments.length) return this._reconnectionDelayMax;this._reconnectionDelayMax = v;this.backoff && this.backoff.setMax(v);return this;
      };Manager.prototype.timeout = function (v) {
        if (!arguments.length) return this._timeout;this._timeout = v;return this;
      };Manager.prototype.maybeReconnectOnOpen = function () {
        if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
          this.reconnect();
        }
      };Manager.prototype.open = Manager.prototype.connect = function (fn) {
        debug("readyState %s", this.readyState);if (~this.readyState.indexOf("open")) return this;debug("opening %s", this.uri);this.engine = eio(this.uri, this.opts);var socket = this.engine;var self = this;this.readyState = "opening";this.skipReconnect = false;var openSub = on(socket, "open", function () {
          self.onopen();fn && fn();
        });var errorSub = on(socket, "error", function (data) {
          debug("connect_error");self.cleanup();self.readyState = "closed";self.emitAll("connect_error", data);if (fn) {
            var err = new Error("Connection error");err.data = data;fn(err);
          } else {
            self.maybeReconnectOnOpen();
          }
        });if (false !== this._timeout) {
          var timeout = this._timeout;debug("connect attempt will timeout after %d", timeout);var timer = setTimeout(function () {
            debug("connect attempt timed out after %d", timeout);openSub.destroy();socket.close();socket.emit("error", "timeout");self.emitAll("connect_timeout", timeout);
          }, timeout);this.subs.push({ destroy: function destroy() {
              clearTimeout(timer);
            } });
        }this.subs.push(openSub);this.subs.push(errorSub);return this;
      };Manager.prototype.onopen = function () {
        debug("open");this.cleanup();this.readyState = "open";this.emit("open");var socket = this.engine;this.subs.push(on(socket, "data", bind(this, "ondata")));this.subs.push(on(socket, "ping", bind(this, "onping")));this.subs.push(on(socket, "pong", bind(this, "onpong")));this.subs.push(on(socket, "error", bind(this, "onerror")));this.subs.push(on(socket, "close", bind(this, "onclose")));this.subs.push(on(this.decoder, "decoded", bind(this, "ondecoded")));
      };Manager.prototype.onping = function () {
        this.lastPing = new Date();this.emitAll("ping");
      };Manager.prototype.onpong = function () {
        this.emitAll("pong", new Date() - this.lastPing);
      };Manager.prototype.ondata = function (data) {
        this.decoder.add(data);
      };Manager.prototype.ondecoded = function (packet) {
        this.emit("packet", packet);
      };Manager.prototype.onerror = function (err) {
        debug("error", err);this.emitAll("error", err);
      };Manager.prototype.socket = function (nsp) {
        var socket = this.nsps[nsp];if (!socket) {
          socket = new Socket(this, nsp);this.nsps[nsp] = socket;var self = this;socket.on("connecting", onConnecting);
          socket.on("connect", function () {
            socket.id = self.engine.id;
          });if (this.autoConnect) {
            onConnecting();
          }
        }function onConnecting() {
          if (! ~indexOf(self.connecting, socket)) {
            self.connecting.push(socket);
          }
        }return socket;
      };Manager.prototype.destroy = function (socket) {
        var index = indexOf(this.connecting, socket);if (~index) this.connecting.splice(index, 1);if (this.connecting.length) return;this.close();
      };Manager.prototype.packet = function (packet) {
        debug("writing packet %j", packet);var self = this;if (!self.encoding) {
          self.encoding = true;this.encoder.encode(packet, function (encodedPackets) {
            for (var i = 0; i < encodedPackets.length; i++) {
              self.engine.write(encodedPackets[i], packet.options);
            }self.encoding = false;self.processPacketQueue();
          });
        } else {
          self.packetBuffer.push(packet);
        }
      };Manager.prototype.processPacketQueue = function () {
        if (this.packetBuffer.length > 0 && !this.encoding) {
          var pack = this.packetBuffer.shift();this.packet(pack);
        }
      };Manager.prototype.cleanup = function () {
        debug("cleanup");var sub;while (sub = this.subs.shift()) sub.destroy();this.packetBuffer = [];this.encoding = false;this.lastPing = null;this.decoder.destroy();
      };Manager.prototype.close = Manager.prototype.disconnect = function () {
        debug("disconnect");this.skipReconnect = true;this.reconnecting = false;if ("opening" == this.readyState) {
          this.cleanup();
        }this.backoff.reset();this.readyState = "closed";if (this.engine) this.engine.close();
      };Manager.prototype.onclose = function (reason) {
        debug("onclose");this.cleanup();this.backoff.reset();this.readyState = "closed";this.emit("close", reason);if (this._reconnection && !this.skipReconnect) {
          this.reconnect();
        }
      };Manager.prototype.reconnect = function () {
        if (this.reconnecting || this.skipReconnect) return this;var self = this;if (this.backoff.attempts >= this._reconnectionAttempts) {
          debug("reconnect failed");this.backoff.reset();this.emitAll("reconnect_failed");this.reconnecting = false;
        } else {
          var delay = this.backoff.duration();debug("will wait %dms before reconnect attempt", delay);this.reconnecting = true;var timer = setTimeout(function () {
            if (self.skipReconnect) return;debug("attempting reconnect");self.emitAll("reconnect_attempt", self.backoff.attempts);self.emitAll("reconnecting", self.backoff.attempts);if (self.skipReconnect) return;self.open(function (err) {
              if (err) {
                debug("reconnect attempt error");self.reconnecting = false;self.reconnect();self.emitAll("reconnect_error", err.data);
              } else {
                debug("reconnect success");self.onreconnect();
              }
            });
          }, delay);this.subs.push({ destroy: function destroy() {
              clearTimeout(timer);
            } });
        }
      };Manager.prototype.onreconnect = function () {
        var attempt = this.backoff.attempts;this.reconnecting = false;this.backoff.reset();this.updateSocketIds();this.emitAll("reconnect", attempt);
      };
    }, { "./on": 33, "./socket": 34, backo2: 36, "component-bind": 37, "component-emitter": 38, debug: 39, "engine.io-client": 1, indexof: 42, "socket.io-parser": 47 }], 33: [function (_dereq_, module, exports) {
      module.exports = on;function on(obj, ev, fn) {
        obj.on(ev, fn);return { destroy: function destroy() {
            obj.removeListener(ev, fn);
          } };
      }
    }, {}], 34: [function (_dereq_, module, exports) {
      var parser = _dereq_("socket.io-parser");var Emitter = _dereq_("component-emitter");var toArray = _dereq_("to-array");var on = _dereq_("./on");var bind = _dereq_("component-bind");var debug = _dereq_("debug")("socket.io-client:socket");var hasBin = _dereq_("has-binary");module.exports = exports = Socket;var events = { connect: 1, connect_error: 1, connect_timeout: 1, connecting: 1, disconnect: 1, error: 1, reconnect: 1, reconnect_attempt: 1, reconnect_failed: 1, reconnect_error: 1, reconnecting: 1, ping: 1, pong: 1 };var emit = Emitter.prototype.emit;function Socket(io, nsp) {
        this.io = io;this.nsp = nsp;this.json = this;this.ids = 0;this.acks = {};this.receiveBuffer = [];this.sendBuffer = [];this.connected = false;this.disconnected = true;if (this.io.autoConnect) this.open();
      }Emitter(Socket.prototype);Socket.prototype.subEvents = function () {
        if (this.subs) return;var io = this.io;this.subs = [on(io, "open", bind(this, "onopen")), on(io, "packet", bind(this, "onpacket")), on(io, "close", bind(this, "onclose"))];
      };Socket.prototype.open = Socket.prototype.connect = function () {
        if (this.connected) return this;this.subEvents();this.io.open();if ("open" == this.io.readyState) this.onopen();this.emit("connecting");return this;
      };Socket.prototype.send = function () {
        var args = toArray(arguments);args.unshift("message");this.emit.apply(this, args);return this;
      };Socket.prototype.emit = function (ev) {
        if (events.hasOwnProperty(ev)) {
          emit.apply(this, arguments);return this;
        }var args = toArray(arguments);var parserType = parser.EVENT;if (hasBin(args)) {
          parserType = parser.BINARY_EVENT;
        }var packet = { type: parserType, data: args };packet.options = {};packet.options.compress = !this.flags || false !== this.flags.compress;if ("function" == typeof args[args.length - 1]) {
          debug("emitting packet with ack id %d", this.ids);this.acks[this.ids] = args.pop();packet.id = this.ids++;
        }if (this.connected) {
          this.packet(packet);
        } else {
          this.sendBuffer.push(packet);
        }delete this.flags;return this;
      };Socket.prototype.packet = function (packet) {
        packet.nsp = this.nsp;this.io.packet(packet);
      };Socket.prototype.onopen = function () {
        debug("transport is open - connecting");if ("/" != this.nsp) {
          this.packet({ type: parser.CONNECT });
        }
      };Socket.prototype.onclose = function (reason) {
        debug("close (%s)", reason);this.connected = false;this.disconnected = true;delete this.id;this.emit("disconnect", reason);
      };Socket.prototype.onpacket = function (packet) {
        if (packet.nsp != this.nsp) return;switch (packet.type) {case parser.CONNECT:
            this.onconnect();break;case parser.EVENT:
            this.onevent(packet);break;case parser.BINARY_EVENT:
            this.onevent(packet);break;case parser.ACK:
            this.onack(packet);break;case parser.BINARY_ACK:
            this.onack(packet);break;case parser.DISCONNECT:
            this.ondisconnect();break;case parser.ERROR:
            this.emit("error", packet.data);break;}
      };Socket.prototype.onevent = function (packet) {
        var args = packet.data || [];debug("emitting event %j", args);if (null != packet.id) {
          debug("attaching ack callback to event");args.push(this.ack(packet.id));
        }if (this.connected) {
          emit.apply(this, args);
        } else {
          this.receiveBuffer.push(args);
        }
      };Socket.prototype.ack = function (id) {
        var self = this;var sent = false;return function () {
          if (sent) return;sent = true;var args = toArray(arguments);debug("sending ack %j", args);var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;self.packet({ type: type, id: id, data: args });
        };
      };Socket.prototype.onack = function (packet) {
        var ack = this.acks[packet.id];if ("function" == typeof ack) {
          debug("calling ack %s with %j", packet.id, packet.data);ack.apply(this, packet.data);delete this.acks[packet.id];
        } else {
          debug("bad ack %s", packet.id);
        }
      };Socket.prototype.onconnect = function () {
        this.connected = true;this.disconnected = false;this.emit("connect");this.emitBuffered();
      };Socket.prototype.emitBuffered = function () {
        var i;for (i = 0; i < this.receiveBuffer.length; i++) {
          emit.apply(this, this.receiveBuffer[i]);
        }this.receiveBuffer = [];for (i = 0; i < this.sendBuffer.length; i++) {
          this.packet(this.sendBuffer[i]);
        }this.sendBuffer = [];
      };Socket.prototype.ondisconnect = function () {
        debug("server disconnect (%s)", this.nsp);this.destroy();this.onclose("io server disconnect");
      };Socket.prototype.destroy = function () {
        if (this.subs) {
          for (var i = 0; i < this.subs.length; i++) {
            this.subs[i].destroy();
          }this.subs = null;
        }this.io.destroy(this);
      };Socket.prototype.close = Socket.prototype.disconnect = function () {
        if (this.connected) {
          debug("performing disconnect (%s)", this.nsp);this.packet({ type: parser.DISCONNECT });
        }this.destroy();if (this.connected) {
          this.onclose("io client disconnect");
        }return this;
      };Socket.prototype.compress = function (compress) {
        this.flags = this.flags || {};this.flags.compress = compress;return this;
      };
    }, { "./on": 33, "component-bind": 37, "component-emitter": 38, debug: 39, "has-binary": 41, "socket.io-parser": 47, "to-array": 51 }], 35: [function (_dereq_, module, exports) {
      (function (global) {
        var parseuri = _dereq_("parseuri");var debug = _dereq_("debug")("socket.io-client:url");module.exports = url;function url(uri, loc) {
          var obj = uri;var loc = loc || global.location;if (null == uri) uri = loc.protocol + "//" + loc.host;if ("string" == typeof uri) {
            if ("/" == uri.charAt(0)) {
              if ("/" == uri.charAt(1)) {
                uri = loc.protocol + uri;
              } else {
                uri = loc.host + uri;
              }
            }if (!/^(https?|wss?):\/\//.test(uri)) {
              debug("protocol-less url %s", uri);if ("undefined" != typeof loc) {
                uri = loc.protocol + "//" + uri;
              } else {
                uri = "https://" + uri;
              }
            }debug("parse %s", uri);obj = parseuri(uri);
          }if (!obj.port) {
            if (/^(http|ws)$/.test(obj.protocol)) {
              obj.port = "80";
            } else if (/^(http|ws)s$/.test(obj.protocol)) {
              obj.port = "443";
            }
          }obj.path = obj.path || "/";var ipv6 = obj.host.indexOf(":") !== -1;var host = ipv6 ? "[" + obj.host + "]" : obj.host;obj.id = obj.protocol + "://" + host + ":" + obj.port;obj.href = obj.protocol + "://" + host + (loc && loc.port == obj.port ? "" : ":" + obj.port);return obj;
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { debug: 39, parseuri: 45 }], 36: [function (_dereq_, module, exports) {
      module.exports = Backoff;function Backoff(opts) {
        opts = opts || {};this.ms = opts.min || 100;this.max = opts.max || 1e4;this.factor = opts.factor || 2;this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;this.attempts = 0;
      }Backoff.prototype.duration = function () {
        var ms = this.ms * Math.pow(this.factor, this.attempts++);if (this.jitter) {
          var rand = Math.random();var deviation = Math.floor(rand * this.jitter * ms);ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
        }return Math.min(ms, this.max) | 0;
      };Backoff.prototype.reset = function () {
        this.attempts = 0;
      };Backoff.prototype.setMin = function (min) {
        this.ms = min;
      };Backoff.prototype.setMax = function (max) {
        this.max = max;
      };Backoff.prototype.setJitter = function (jitter) {
        this.jitter = jitter;
      };
    }, {}], 37: [function (_dereq_, module, exports) {
      var slice = [].slice;module.exports = function (obj, fn) {
        if ("string" == typeof fn) fn = obj[fn];if ("function" != typeof fn) throw new Error("bind() requires a function");var args = slice.call(arguments, 2);return function () {
          return fn.apply(obj, args.concat(slice.call(arguments)));
        };
      };
    }, {}], 38: [function (_dereq_, module, exports) {
      module.exports = Emitter;function Emitter(obj) {
        if (obj) return mixin(obj);
      }function mixin(obj) {
        for (var key in Emitter.prototype) {
          obj[key] = Emitter.prototype[key];
        }return obj;
      }Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};(this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);return this;
      };Emitter.prototype.once = function (event, fn) {
        function on() {
          this.off(event, on);fn.apply(this, arguments);
        }on.fn = fn;this.on(event, on);return this;
      };Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};if (0 == arguments.length) {
          this._callbacks = {};return this;
        }var callbacks = this._callbacks["$" + event];if (!callbacks) return this;if (1 == arguments.length) {
          delete this._callbacks["$" + event];return this;
        }var cb;for (var i = 0; i < callbacks.length; i++) {
          cb = callbacks[i];if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);break;
          }
        }return this;
      };Emitter.prototype.emit = function (event) {
        this._callbacks = this._callbacks || {};var args = [].slice.call(arguments, 1),
            callbacks = this._callbacks["$" + event];if (callbacks) {
          callbacks = callbacks.slice(0);for (var i = 0, len = callbacks.length; i < len; ++i) {
            callbacks[i].apply(this, args);
          }
        }return this;
      };Emitter.prototype.listeners = function (event) {
        this._callbacks = this._callbacks || {};return this._callbacks["$" + event] || [];
      };Emitter.prototype.hasListeners = function (event) {
        return !!this.listeners(event).length;
      };
    }, {}], 39: [function (_dereq_, module, exports) {
      arguments[4][17][0].apply(exports, arguments);
    }, { "./debug": 40, dup: 17 }], 40: [function (_dereq_, module, exports) {
      arguments[4][18][0].apply(exports, arguments);
    }, { dup: 18, ms: 44 }], 41: [function (_dereq_, module, exports) {
      (function (global) {
        var isArray = _dereq_("isarray");module.exports = hasBinary;function hasBinary(data) {
          function _hasBinary(obj) {
            if (!obj) return false;if (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
              return true;
            }if (isArray(obj)) {
              for (var i = 0; i < obj.length; i++) {
                if (_hasBinary(obj[i])) {
                  return true;
                }
              }
            } else if (obj && "object" == typeof obj) {
              if (obj.toJSON && "function" == typeof obj.toJSON) {
                obj = obj.toJSON();
              }for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
                  return true;
                }
              }
            }return false;
          }return _hasBinary(data);
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { isarray: 43 }], 42: [function (_dereq_, module, exports) {
      arguments[4][23][0].apply(exports, arguments);
    }, { dup: 23 }], 43: [function (_dereq_, module, exports) {
      arguments[4][24][0].apply(exports, arguments);
    }, { dup: 24 }], 44: [function (_dereq_, module, exports) {
      arguments[4][25][0].apply(exports, arguments);
    }, { dup: 25 }], 45: [function (_dereq_, module, exports) {
      arguments[4][28][0].apply(exports, arguments);
    }, { dup: 28 }], 46: [function (_dereq_, module, exports) {
      (function (global) {
        var isArray = _dereq_("isarray");var isBuf = _dereq_("./is-buffer");exports.deconstructPacket = function (packet) {
          var buffers = [];var packetData = packet.data;function _deconstructPacket(data) {
            if (!data) return data;if (isBuf(data)) {
              var placeholder = { _placeholder: true, num: buffers.length };buffers.push(data);return placeholder;
            } else if (isArray(data)) {
              var newData = new Array(data.length);for (var i = 0; i < data.length; i++) {
                newData[i] = _deconstructPacket(data[i]);
              }return newData;
            } else if ("object" == typeof data && !(data instanceof Date)) {
              var newData = {};for (var key in data) {
                newData[key] = _deconstructPacket(data[key]);
              }return newData;
            }return data;
          }var pack = packet;pack.data = _deconstructPacket(packetData);pack.attachments = buffers.length;return { packet: pack, buffers: buffers };
        };exports.reconstructPacket = function (packet, buffers) {
          var curPlaceHolder = 0;function _reconstructPacket(data) {
            if (data && data._placeholder) {
              var buf = buffers[data.num];return buf;
            } else if (isArray(data)) {
              for (var i = 0; i < data.length; i++) {
                data[i] = _reconstructPacket(data[i]);
              }return data;
            } else if (data && "object" == typeof data) {
              for (var key in data) {
                data[key] = _reconstructPacket(data[key]);
              }return data;
            }return data;
          }packet.data = _reconstructPacket(packet.data);packet.attachments = undefined;return packet;
        };exports.removeBlobs = function (data, callback) {
          function _removeBlobs(obj, curKey, containingObject) {
            if (!obj) return obj;if (global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
              pendingBlobs++;var fileReader = new FileReader();fileReader.onload = function () {
                if (containingObject) {
                  containingObject[curKey] = this.result;
                } else {
                  bloblessData = this.result;
                }if (! --pendingBlobs) {
                  callback(bloblessData);
                }
              };fileReader.readAsArrayBuffer(obj);
            } else if (isArray(obj)) {
              for (var i = 0; i < obj.length; i++) {
                _removeBlobs(obj[i], i, obj);
              }
            } else if (obj && "object" == typeof obj && !isBuf(obj)) {
              for (var key in obj) {
                _removeBlobs(obj[key], key, obj);
              }
            }
          }var pendingBlobs = 0;var bloblessData = data;_removeBlobs(bloblessData);if (!pendingBlobs) {
            callback(bloblessData);
          }
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./is-buffer": 48, isarray: 43 }], 47: [function (_dereq_, module, exports) {
      var debug = _dereq_("debug")("socket.io-parser");var json = _dereq_("json3");var isArray = _dereq_("isarray");var Emitter = _dereq_("component-emitter");var binary = _dereq_("./binary");var isBuf = _dereq_("./is-buffer");exports.protocol = 4;exports.types = ["CONNECT", "DISCONNECT", "EVENT", "BINARY_EVENT", "ACK", "BINARY_ACK", "ERROR"];exports.CONNECT = 0;exports.DISCONNECT = 1;exports.EVENT = 2;exports.ACK = 3;exports.ERROR = 4;exports.BINARY_EVENT = 5;exports.BINARY_ACK = 6;exports.Encoder = Encoder;exports.Decoder = Decoder;function Encoder() {}Encoder.prototype.encode = function (obj, callback) {
        debug("encoding packet %j", obj);if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
          encodeAsBinary(obj, callback);
        } else {
          var encoding = encodeAsString(obj);callback([encoding]);
        }
      };function encodeAsString(obj) {
        var str = "";var nsp = false;str += obj.type;if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
          str += obj.attachments;str += "-";
        }if (obj.nsp && "/" != obj.nsp) {
          nsp = true;str += obj.nsp;
        }if (null != obj.id) {
          if (nsp) {
            str += ",";nsp = false;
          }str += obj.id;
        }if (null != obj.data) {
          if (nsp) str += ",";str += json.stringify(obj.data);
        }debug("encoded %j as %s", obj, str);return str;
      }function encodeAsBinary(obj, callback) {
        function writeEncoding(bloblessData) {
          var deconstruction = binary.deconstructPacket(bloblessData);var pack = encodeAsString(deconstruction.packet);var buffers = deconstruction.buffers;buffers.unshift(pack);callback(buffers);
        }binary.removeBlobs(obj, writeEncoding);
      }function Decoder() {
        this.reconstructor = null;
      }Emitter(Decoder.prototype);Decoder.prototype.add = function (obj) {
        var packet;if ("string" == typeof obj) {
          packet = decodeString(obj);if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {
            this.reconstructor = new BinaryReconstructor(packet);if (this.reconstructor.reconPack.attachments === 0) {
              this.emit("decoded", packet);
            }
          } else {
            this.emit("decoded", packet);
          }
        } else if (isBuf(obj) || obj.base64) {
          if (!this.reconstructor) {
            throw new Error("got binary data when not reconstructing a packet");
          } else {
            packet = this.reconstructor.takeBinaryData(obj);if (packet) {
              this.reconstructor = null;this.emit("decoded", packet);
            }
          }
        } else {
          throw new Error("Unknown type: " + obj);
        }
      };function decodeString(str) {
        var p = {};var i = 0;p.type = Number(str.charAt(0));if (null == exports.types[p.type]) return error();if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
          var buf = "";while (str.charAt(++i) != "-") {
            buf += str.charAt(i);if (i == str.length) break;
          }if (buf != Number(buf) || str.charAt(i) != "-") {
            throw new Error("Illegal attachments");
          }p.attachments = Number(buf);
        }if ("/" == str.charAt(i + 1)) {
          p.nsp = "";while (++i) {
            var c = str.charAt(i);if ("," == c) break;p.nsp += c;if (i == str.length) break;
          }
        } else {
          p.nsp = "/";
        }var next = str.charAt(i + 1);if ("" !== next && Number(next) == next) {
          p.id = "";while (++i) {
            var c = str.charAt(i);if (null == c || Number(c) != c) {
              --i;break;
            }p.id += str.charAt(i);if (i == str.length) break;
          }p.id = Number(p.id);
        }if (str.charAt(++i)) {
          try {
            p.data = json.parse(str.substr(i));
          } catch (e) {
            return error();
          }
        }debug("decoded %s as %j", str, p);return p;
      }Decoder.prototype.destroy = function () {
        if (this.reconstructor) {
          this.reconstructor.finishedReconstruction();
        }
      };function BinaryReconstructor(packet) {
        this.reconPack = packet;this.buffers = [];
      }BinaryReconstructor.prototype.takeBinaryData = function (binData) {
        this.buffers.push(binData);if (this.buffers.length == this.reconPack.attachments) {
          var packet = binary.reconstructPacket(this.reconPack, this.buffers);this.finishedReconstruction();return packet;
        }return null;
      };BinaryReconstructor.prototype.finishedReconstruction = function () {
        this.reconPack = null;this.buffers = [];
      };function error(data) {
        return { type: exports.ERROR, data: "parser error" };
      }
    }, { "./binary": 46, "./is-buffer": 48, "component-emitter": 49, debug: 39, isarray: 43, json3: 50 }], 48: [function (_dereq_, module, exports) {
      (function (global) {
        module.exports = isBuf;function isBuf(obj) {
          return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 49: [function (_dereq_, module, exports) {
      arguments[4][15][0].apply(exports, arguments);
    }, { dup: 15 }], 50: [function (_dereq_, module, exports) {
      (function (global) {
        (function () {
          var isLoader = typeof define === "function" && define.amd;var objectTypes = { "function": true, object: true };var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;var root = objectTypes[typeof window] && window || this,
              freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
            root = freeGlobal;
          }function runInContext(context, exports) {
            context || (context = root["Object"]());exports || (exports = root["Object"]());var Number = context["Number"] || root["Number"],
                String = context["String"] || root["String"],
                Object = context["Object"] || root["Object"],
                Date = context["Date"] || root["Date"],
                SyntaxError = context["SyntaxError"] || root["SyntaxError"],
                TypeError = context["TypeError"] || root["TypeError"],
                Math = context["Math"] || root["Math"],
                nativeJSON = context["JSON"] || root["JSON"];if (typeof nativeJSON == "object" && nativeJSON) {
              exports.stringify = nativeJSON.stringify;exports.parse = nativeJSON.parse;
            }var objectProto = Object.prototype,
                getClass = objectProto.toString,
                isProperty,
                forEach,
                undef;var isExtended = new Date(-0xc782b5b800cec);try {
              isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
            } catch (exception) {}function has(name) {
              if (has[name] !== undef) {
                return has[name];
              }var isSupported;if (name == "bug-string-char-index") {
                isSupported = "a"[0] != "a";
              } else if (name == "json") {
                isSupported = has("json-stringify") && has("json-parse");
              } else {
                var value,
                    serialized = "{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";if (name == "json-stringify") {
                  var stringify = exports.stringify,
                      stringifySupported = typeof stringify == "function" && isExtended;if (stringifySupported) {
                    (value = function () {
                      return 1;
                    }).toJSON = value;try {
                      stringifySupported = stringify(0) === "0" && stringify(new Number()) === "0" && stringify(new String()) == '""' && stringify(getClass) === undef && stringify(undef) === undef && stringify() === undef && stringify(value) === "1" && stringify([value]) == "[1]" && stringify([undef]) == "[null]" && stringify(null) == "null" && stringify([undef, getClass, null]) == "[null,null,null]" && stringify({ a: [value, true, false, null, "\x00\b\n\f\r	"] }) == serialized && stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && stringify(new Date(-864e13)) == '"-271821-04-20T00:00:00.000Z"' && stringify(new Date(864e13)) == '"+275760-09-13T00:00:00.000Z"' && stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
                    } catch (exception) {
                      stringifySupported = false;
                    }
                  }isSupported = stringifySupported;
                }if (name == "json-parse") {
                  var parse = exports.parse;if (typeof parse == "function") {
                    try {
                      if (parse("0") === 0 && !parse(false)) {
                        value = parse(serialized);var parseSupported = value["a"].length == 5 && value["a"][0] === 1;if (parseSupported) {
                          try {
                            parseSupported = !parse('"	"');
                          } catch (exception) {}if (parseSupported) {
                            try {
                              parseSupported = parse("01") !== 1;
                            } catch (exception) {}
                          }if (parseSupported) {
                            try {
                              parseSupported = parse("1.") !== 1;
                            } catch (exception) {}
                          }
                        }
                      }
                    } catch (exception) {
                      parseSupported = false;
                    }
                  }isSupported = parseSupported;
                }
              }return has[name] = !!isSupported;
            }if (!has("json")) {
              var functionClass = "[object Function]",
                  dateClass = "[object Date]",
                  numberClass = "[object Number]",
                  stringClass = "[object String]",
                  arrayClass = "[object Array]",
                  booleanClass = "[object Boolean]";var charIndexBuggy = has("bug-string-char-index");if (!isExtended) {
                var floor = Math.floor;var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];var getDay = function getDay(year, month) {
                  return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
                };
              }if (!(isProperty = objectProto.hasOwnProperty)) {
                isProperty = function (property) {
                  var members = {},
                      constructor;if ((members.__proto__ = null, members.__proto__ = { toString: 1 }, members).toString != getClass) {
                    isProperty = function (property) {
                      var original = this.__proto__,
                          result = (property in (this.__proto__ = null, this));this.__proto__ = original;return result;
                    };
                  } else {
                    constructor = members.constructor;isProperty = function (property) {
                      var parent = (this.constructor || constructor).prototype;return property in this && !(property in parent && this[property] === parent[property]);
                    };
                  }members = null;return isProperty.call(this, property);
                };
              }forEach = function (object, callback) {
                var size = 0,
                    Properties,
                    members,
                    property;(Properties = function () {
                  this.valueOf = 0;
                }).prototype.valueOf = 0;members = new Properties();for (property in members) {
                  if (isProperty.call(members, property)) {
                    size++;
                  }
                }Properties = members = null;if (!size) {
                  members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        length;var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;for (property in object) {
                      if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                        callback(property);
                      }
                    }for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
                  };
                } else if (size == 2) {
                  forEach = function (object, callback) {
                    var members = {},
                        isFunction = getClass.call(object) == functionClass,
                        property;for (property in object) {
                      if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                        callback(property);
                      }
                    }
                  };
                } else {
                  forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        isConstructor;for (property in object) {
                      if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                        callback(property);
                      }
                    }if (isConstructor || isProperty.call(object, property = "constructor")) {
                      callback(property);
                    }
                  };
                }return forEach(object, callback);
              };if (!has("json-stringify")) {
                var Escapes = { 92: "\\\\", 34: '\\"', 8: "\\b", 12: "\\f", 10: "\\n", 13: "\\r", 9: "\\t" };var leadingZeroes = "000000";var toPaddedString = function toPaddedString(width, value) {
                  return (leadingZeroes + (value || 0)).slice(-width);
                };var unicodePrefix = "\\u00";var quote = function quote(value) {
                  var result = '"',
                      index = 0,
                      length = value.length,
                      useCharIndex = !charIndexBuggy || length > 10;var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);for (; index < length; index++) {
                    var charCode = value.charCodeAt(index);switch (charCode) {case 8:case 9:case 10:case 12:case 13:case 34:case 92:
                        result += Escapes[charCode];break;default:
                        if (charCode < 32) {
                          result += unicodePrefix + toPaddedString(2, charCode.toString(16));break;
                        }result += useCharIndex ? symbols[index] : value.charAt(index);}
                  }return result + '"';
                };var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
                  var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;try {
                    value = object[property];
                  } catch (exception) {}if (typeof value == "object" && value) {
                    className = getClass.call(value);if (className == dateClass && !isProperty.call(value, "toJSON")) {
                      if (value > -1 / 0 && value < 1 / 0) {
                        if (getDay) {
                          date = floor(value / 864e5);for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);date = 1 + date - getDay(year, month);time = (value % 864e5 + 864e5) % 864e5;hours = floor(time / 36e5) % 24;minutes = floor(time / 6e4) % 60;seconds = floor(time / 1e3) % 60;milliseconds = time % 1e3;
                        } else {
                          year = value.getUTCFullYear();month = value.getUTCMonth();date = value.getUTCDate();hours = value.getUTCHours();minutes = value.getUTCMinutes();seconds = value.getUTCSeconds();milliseconds = value.getUTCMilliseconds();
                        }value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + "." + toPaddedString(3, milliseconds) + "Z";
                      } else {
                        value = null;
                      }
                    } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, "toJSON"))) {
                      value = value.toJSON(property);
                    }
                  }if (callback) {
                    value = callback.call(object, property, value);
                  }if (value === null) {
                    return "null";
                  }className = getClass.call(value);if (className == booleanClass) {
                    return "" + value;
                  } else if (className == numberClass) {
                    return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
                  } else if (className == stringClass) {
                    return quote("" + value);
                  }if (typeof value == "object") {
                    for (length = stack.length; length--;) {
                      if (stack[length] === value) {
                        throw TypeError();
                      }
                    }stack.push(value);results = [];prefix = indentation;indentation += whitespace;if (className == arrayClass) {
                      for (index = 0, length = value.length; index < length; index++) {
                        element = serialize(index, value, callback, properties, whitespace, indentation, stack);results.push(element === undef ? "null" : element);
                      }result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
                    } else {
                      forEach(properties || value, function (property) {
                        var element = serialize(property, value, callback, properties, whitespace, indentation, stack);if (element !== undef) {
                          results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                        }
                      });result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
                    }stack.pop();return result;
                  }
                };exports.stringify = function (source, filter, width) {
                  var whitespace, callback, properties, className;if (objectTypes[typeof filter] && filter) {
                    if ((className = getClass.call(filter)) == functionClass) {
                      callback = filter;
                    } else if (className == arrayClass) {
                      properties = {};for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));
                    }
                  }if (width) {
                    if ((className = getClass.call(width)) == numberClass) {
                      if ((width -= width % 1) > 0) {
                        for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
                      }
                    } else if (className == stringClass) {
                      whitespace = width.length <= 10 ? width : width.slice(0, 10);
                    }
                  }return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
                };
              }if (!has("json-parse")) {
                var fromCharCode = String.fromCharCode;var Unescapes = { 92: "\\", 34: '"', 47: "/", 98: "\b", 116: "	", 110: "\n", 102: "\f", 114: "\r" };var Index, Source;var abort = function abort() {
                  Index = Source = null;throw SyntaxError();
                };var lex = function lex() {
                  var source = Source,
                      length = source.length,
                      value,
                      begin,
                      position,
                      isSigned,
                      charCode;while (Index < length) {
                    charCode = source.charCodeAt(Index);switch (charCode) {case 9:case 10:case 13:case 32:
                        Index++;break;case 123:case 125:case 91:case 93:case 58:case 44:
                        value = charIndexBuggy ? source.charAt(Index) : source[Index];Index++;return value;case 34:
                        for (value = "@", Index++; Index < length;) {
                          charCode = source.charCodeAt(Index);if (charCode < 32) {
                            abort();
                          } else if (charCode == 92) {
                            charCode = source.charCodeAt(++Index);switch (charCode) {case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:
                                value += Unescapes[charCode];Index++;break;case 117:
                                begin = ++Index;for (position = Index + 4; Index < position; Index++) {
                                  charCode = source.charCodeAt(Index);if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                                    abort();
                                  }
                                }value += fromCharCode("0x" + source.slice(begin, Index));break;default:
                                abort();}
                          } else {
                            if (charCode == 34) {
                              break;
                            }charCode = source.charCodeAt(Index);begin = Index;while (charCode >= 32 && charCode != 92 && charCode != 34) {
                              charCode = source.charCodeAt(++Index);
                            }value += source.slice(begin, Index);
                          }
                        }if (source.charCodeAt(Index) == 34) {
                          Index++;return value;
                        }abort();default:
                        begin = Index;if (charCode == 45) {
                          isSigned = true;charCode = source.charCodeAt(++Index);
                        }if (charCode >= 48 && charCode <= 57) {
                          if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                            abort();
                          }isSigned = false;for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++);if (source.charCodeAt(Index) == 46) {
                            position = ++Index;for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);if (position == Index) {
                              abort();
                            }Index = position;
                          }charCode = source.charCodeAt(Index);if (charCode == 101 || charCode == 69) {
                            charCode = source.charCodeAt(++Index);if (charCode == 43 || charCode == 45) {
                              Index++;
                            }for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);if (position == Index) {
                              abort();
                            }Index = position;
                          }return +source.slice(begin, Index);
                        }if (isSigned) {
                          abort();
                        }if (source.slice(Index, Index + 4) == "true") {
                          Index += 4;return true;
                        } else if (source.slice(Index, Index + 5) == "false") {
                          Index += 5;return false;
                        } else if (source.slice(Index, Index + 4) == "null") {
                          Index += 4;return null;
                        }abort();}
                  }return "$";
                };var get = function get(value) {
                  var results, hasMembers;if (value == "$") {
                    abort();
                  }if (typeof value == "string") {
                    if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                      return value.slice(1);
                    }if (value == "[") {
                      results = [];for (;; hasMembers || (hasMembers = true)) {
                        value = lex();if (value == "]") {
                          break;
                        }if (hasMembers) {
                          if (value == ",") {
                            value = lex();if (value == "]") {
                              abort();
                            }
                          } else {
                            abort();
                          }
                        }if (value == ",") {
                          abort();
                        }results.push(get(value));
                      }return results;
                    } else if (value == "{") {
                      results = {};for (;; hasMembers || (hasMembers = true)) {
                        value = lex();if (value == "}") {
                          break;
                        }if (hasMembers) {
                          if (value == ",") {
                            value = lex();if (value == "}") {
                              abort();
                            }
                          } else {
                            abort();
                          }
                        }if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                          abort();
                        }results[value.slice(1)] = get(lex());
                      }return results;
                    }abort();
                  }return value;
                };var update = function update(source, property, callback) {
                  var element = walk(source, property, callback);if (element === undef) {
                    delete source[property];
                  } else {
                    source[property] = element;
                  }
                };var walk = function walk(source, property, callback) {
                  var value = source[property],
                      length;if (typeof value == "object" && value) {
                    if (getClass.call(value) == arrayClass) {
                      for (length = value.length; length--;) {
                        update(value, length, callback);
                      }
                    } else {
                      forEach(value, function (property) {
                        update(value, property, callback);
                      });
                    }
                  }return callback.call(source, property, value);
                };exports.parse = function (source, callback) {
                  var result, value;Index = 0;Source = "" + source;result = get(lex());if (lex() != "$") {
                    abort();
                  }Index = Source = null;return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
                };
              }
            }exports["runInContext"] = runInContext;return exports;
          }if (freeExports && !isLoader) {
            runInContext(root, freeExports);
          } else {
            var nativeJSON = root.JSON,
                previousJSON = root["JSON3"],
                isRestored = false;var JSON3 = runInContext(root, root["JSON3"] = { noConflict: function noConflict() {
                if (!isRestored) {
                  isRestored = true;root.JSON = nativeJSON;root["JSON3"] = previousJSON;nativeJSON = previousJSON = null;
                }return JSON3;
              } });root.JSON = { parse: JSON3.parse, stringify: JSON3.stringify };
          }if (isLoader) {
            define(function () {
              return JSON3;
            });
          }
        }).call(this);
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 51: [function (_dereq_, module, exports) {
      module.exports = toArray;function toArray(list, index) {
        var array = [];index = index || 0;for (var i = index || 0; i < list.length; i++) {
          array[i - index] = list[i];
        }return array;
      }
    }, {}] }, {}, [31])(31);
});

cc._RFpop();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"user":[function(require,module,exports){
"use strict";
cc._RFpush(module, '43c66988rFH6b+xxyWSsbTi', 'user');
// biz/user/script/user.js

function User(user) {}

User.prototype.init = function (user) {
    this.Id = user.Id;
    this.Name = user.Name;
    this.Diamond = user.Diamond;
    this.Kill = user.Kill;
    this.TankBody = user.TankBody;
    this.TankHead = user.TankHead;
    this.TankWheel = user.TankWheel;
};

module.exports = new User();

cc._RFpop();
},{}]},{},["socket.io","user","api","login","qwest","lodash"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0FwcGxpY2F0aW9ucy9Db2Nvc0NyZWF0b3IuYXBwL0NvbnRlbnRzL1Jlc291cmNlcy9hcHAuYXNhci9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiLi4vLi4vLi4vLi4vLi4vQXBwbGljYXRpb25zL0NvY29zQ3JlYXRvci5hcHAvQ29udGVudHMvUmVzb3VyY2VzL2FwcC5hc2FyL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJhc3NldHMvbGliL2FwaS5qcyIsImFzc2V0cy9saWIvbG9kYXNoLmpzIiwiYXNzZXRzL2Jpei9sb2dpbi9zY3JpcHQvbG9naW4uanMiLCJhc3NldHMvbGliL3F3ZXN0LmpzIiwiYXNzZXRzL2xpYi9zb2NrZXQuaW8uanMiLCJhc3NldHMvYml6L3VzZXIvc2NyaXB0L3VzZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDaE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdGhFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuY2MuX1JGcHVzaChtb2R1bGUsICc0YzE2OXBudTFWSnFJZ0MydW1EWGo4OScsICdhcGknKTtcbi8vIGxpYi9hcGkuanNcblxudmFyIHF3ZXN0ID0gcmVxdWlyZSgncXdlc3QnKTtcblxudmFyIGFqYXggPSBmdW5jdGlvbiBhamF4KHR5cGUsIHVybCwgZGF0YSkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBxd2VzdC5tYXAodHlwZSwgdXJsLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLm9rKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufTtcblxudmFyIGFwaSA9IHtcbiAgICBsb2dpbjogZnVuY3Rpb24gbG9naW4oZGF0YSkge1xuICAgICAgICByZXR1cm4gYWpheCgnUE9TVCcsICdodHRwOi8vMTI3LjAuMC4xOjgxMjMvYXBpL2xvZ2luLycsIGRhdGEpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYXBpO1xuXG5jYy5fUkZwb3AoKTsiLCJcInVzZSBzdHJpY3RcIjtcbmNjLl9SRnB1c2gobW9kdWxlLCAnOWYyZjFoa1NGOU5rNld2SHhBczl1cVAnLCAnbG9kYXNoJyk7XG4vLyBsaWIvbG9kYXNoLmpzXG5cblwidXNlIHN0cmljdFwiOyhmdW5jdGlvbigpe3ZhciB1bmRlZmluZWQ7dmFyIFZFUlNJT049XCI0LjIuMFwiO3ZhciBCSU5EX0ZMQUc9MSxCSU5EX0tFWV9GTEFHPTIsQ1VSUllfQk9VTkRfRkxBRz00LENVUlJZX0ZMQUc9OCxDVVJSWV9SSUdIVF9GTEFHPTE2LFBBUlRJQUxfRkxBRz0zMixQQVJUSUFMX1JJR0hUX0ZMQUc9NjQsQVJZX0ZMQUc9MTI4LFJFQVJHX0ZMQUc9MjU2LEZMSVBfRkxBRz01MTI7dmFyIFVOT1JERVJFRF9DT01QQVJFX0ZMQUc9MSxQQVJUSUFMX0NPTVBBUkVfRkxBRz0yO3ZhciBERUZBVUxUX1RSVU5DX0xFTkdUSD0zMCxERUZBVUxUX1RSVU5DX09NSVNTSU9OPVwiLi4uXCI7dmFyIEhPVF9DT1VOVD0xNTAsSE9UX1NQQU49MTY7dmFyIExBUkdFX0FSUkFZX1NJWkU9MjAwO3ZhciBMQVpZX0ZJTFRFUl9GTEFHPTEsTEFaWV9NQVBfRkxBRz0yLExBWllfV0hJTEVfRkxBRz0zO3ZhciBGVU5DX0VSUk9SX1RFWFQ9XCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCI7dmFyIEhBU0hfVU5ERUZJTkVEPVwiX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfX1wiO3ZhciBJTkZJTklUWT0xIC8gMCxNQVhfU0FGRV9JTlRFR0VSPTkwMDcxOTkyNTQ3NDA5OTEsTUFYX0lOVEVHRVI9MS43OTc2OTMxMzQ4NjIzMTU3ZTMwOCxOQU49MCAvIDA7dmFyIE1BWF9BUlJBWV9MRU5HVEg9NDI5NDk2NzI5NSxNQVhfQVJSQVlfSU5ERVg9TUFYX0FSUkFZX0xFTkdUSCAtIDEsSEFMRl9NQVhfQVJSQVlfTEVOR1RIPU1BWF9BUlJBWV9MRU5HVEggPj4+IDE7dmFyIFBMQUNFSE9MREVSPVwiX19sb2Rhc2hfcGxhY2Vob2xkZXJfX1wiO3ZhciBhcmdzVGFnPVwiW29iamVjdCBBcmd1bWVudHNdXCIsYXJyYXlUYWc9XCJbb2JqZWN0IEFycmF5XVwiLGJvb2xUYWc9XCJbb2JqZWN0IEJvb2xlYW5dXCIsZGF0ZVRhZz1cIltvYmplY3QgRGF0ZV1cIixlcnJvclRhZz1cIltvYmplY3QgRXJyb3JdXCIsZnVuY1RhZz1cIltvYmplY3QgRnVuY3Rpb25dXCIsZ2VuVGFnPVwiW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl1cIixtYXBUYWc9XCJbb2JqZWN0IE1hcF1cIixudW1iZXJUYWc9XCJbb2JqZWN0IE51bWJlcl1cIixvYmplY3RUYWc9XCJbb2JqZWN0IE9iamVjdF1cIixyZWdleHBUYWc9XCJbb2JqZWN0IFJlZ0V4cF1cIixzZXRUYWc9XCJbb2JqZWN0IFNldF1cIixzdHJpbmdUYWc9XCJbb2JqZWN0IFN0cmluZ11cIixzeW1ib2xUYWc9XCJbb2JqZWN0IFN5bWJvbF1cIix3ZWFrTWFwVGFnPVwiW29iamVjdCBXZWFrTWFwXVwiO3ZhciBhcnJheUJ1ZmZlclRhZz1cIltvYmplY3QgQXJyYXlCdWZmZXJdXCIsZmxvYXQzMlRhZz1cIltvYmplY3QgRmxvYXQzMkFycmF5XVwiLGZsb2F0NjRUYWc9XCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIixpbnQ4VGFnPVwiW29iamVjdCBJbnQ4QXJyYXldXCIsaW50MTZUYWc9XCJbb2JqZWN0IEludDE2QXJyYXldXCIsaW50MzJUYWc9XCJbb2JqZWN0IEludDMyQXJyYXldXCIsdWludDhUYWc9XCJbb2JqZWN0IFVpbnQ4QXJyYXldXCIsdWludDhDbGFtcGVkVGFnPVwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIix1aW50MTZUYWc9XCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiLHVpbnQzMlRhZz1cIltvYmplY3QgVWludDMyQXJyYXldXCI7dmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nPS9cXGJfX3AgXFwrPSAnJzsvZyxyZUVtcHR5U3RyaW5nTWlkZGxlPS9cXGIoX19wIFxcKz0pICcnIFxcKy9nLHJlRW1wdHlTdHJpbmdUcmFpbGluZz0vKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO3ZhciByZUVzY2FwZWRIdG1sPS8mKD86YW1wfGx0fGd0fHF1b3R8IzM5fCM5Nik7L2cscmVVbmVzY2FwZWRIdG1sPS9bJjw+XCInYF0vZyxyZUhhc0VzY2FwZWRIdG1sPVJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSkscmVIYXNVbmVzY2FwZWRIdG1sPVJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTt2YXIgcmVFc2NhcGU9LzwlLShbXFxzXFxTXSs/KSU+L2cscmVFdmFsdWF0ZT0vPCUoW1xcc1xcU10rPyklPi9nLHJlSW50ZXJwb2xhdGU9LzwlPShbXFxzXFxTXSs/KSU+L2c7dmFyIHJlSXNEZWVwUHJvcD0vXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLHJlSXNQbGFpblByb3A9L15cXHcqJC8scmVQcm9wTmFtZT0vW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXS9nO3ZhciByZVJlZ0V4cENoYXI9L1tcXFxcXiQuKis/KClbXFxde318XS9nLHJlSGFzUmVnRXhwQ2hhcj1SZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7dmFyIHJlVHJpbT0vXlxccyt8XFxzKyQvZyxyZVRyaW1TdGFydD0vXlxccysvLHJlVHJpbUVuZD0vXFxzKyQvO3ZhciByZUVzY2FwZUNoYXI9L1xcXFwoXFxcXCk/L2c7dmFyIHJlRXNUZW1wbGF0ZT0vXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7dmFyIHJlRmxhZ3M9L1xcdyokLzt2YXIgcmVIYXNIZXhQcmVmaXg9L14weC9pO3ZhciByZUlzQmFkSGV4PS9eWy0rXTB4WzAtOWEtZl0rJC9pO3ZhciByZUlzQmluYXJ5PS9eMGJbMDFdKyQvaTt2YXIgcmVJc0hvc3RDdG9yPS9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87dmFyIHJlSXNPY3RhbD0vXjBvWzAtN10rJC9pO3ZhciByZUlzVWludD0vXig/OjB8WzEtOV1cXGQqKSQvO3ZhciByZUxhdGluMT0vW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZGVcXHhkZi1cXHhmNlxceGY4LVxceGZmXS9nO3ZhciByZU5vTWF0Y2g9LygkXikvO3ZhciByZVVuZXNjYXBlZFN0cmluZz0vWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7dmFyIHJzQXN0cmFsUmFuZ2U9XCJcXFxcdWQ4MDAtXFxcXHVkZmZmXCIscnNDb21ib01hcmtzUmFuZ2U9XCJcXFxcdTAzMDAtXFxcXHUwMzZmXFxcXHVmZTIwLVxcXFx1ZmUyM1wiLHJzQ29tYm9TeW1ib2xzUmFuZ2U9XCJcXFxcdTIwZDAtXFxcXHUyMGYwXCIscnNEaW5nYmF0UmFuZ2U9XCJcXFxcdTI3MDAtXFxcXHUyN2JmXCIscnNMb3dlclJhbmdlPVwiYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmXCIscnNNYXRoT3BSYW5nZT1cIlxcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjdcIixyc05vbkNoYXJSYW5nZT1cIlxcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZlwiLHJzUXVvdGVSYW5nZT1cIlxcXFx1MjAxOFxcXFx1MjAxOVxcXFx1MjAxY1xcXFx1MjAxZFwiLHJzU3BhY2VSYW5nZT1cIiBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwXCIscnNVcHBlclJhbmdlPVwiQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlXCIscnNWYXJSYW5nZT1cIlxcXFx1ZmUwZVxcXFx1ZmUwZlwiLHJzQnJlYWtSYW5nZT1yc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1F1b3RlUmFuZ2UgKyByc1NwYWNlUmFuZ2U7dmFyIHJzQXN0cmFsPVwiW1wiICsgcnNBc3RyYWxSYW5nZSArIFwiXVwiLHJzQnJlYWs9XCJbXCIgKyByc0JyZWFrUmFuZ2UgKyBcIl1cIixyc0NvbWJvPVwiW1wiICsgcnNDb21ib01hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlICsgXCJdXCIscnNEaWdpdHM9XCJcXFxcZCtcIixyc0RpbmdiYXQ9XCJbXCIgKyByc0RpbmdiYXRSYW5nZSArIFwiXVwiLHJzTG93ZXI9XCJbXCIgKyByc0xvd2VyUmFuZ2UgKyBcIl1cIixyc01pc2M9XCJbXlwiICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyBcIl1cIixyc0ZpdHo9XCJcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl1cIixyc01vZGlmaWVyPVwiKD86XCIgKyByc0NvbWJvICsgXCJ8XCIgKyByc0ZpdHogKyBcIilcIixyc05vbkFzdHJhbD1cIlteXCIgKyByc0FzdHJhbFJhbmdlICsgXCJdXCIscnNSZWdpb25hbD1cIig/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn1cIixyc1N1cnJQYWlyPVwiW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdXCIscnNVcHBlcj1cIltcIiArIHJzVXBwZXJSYW5nZSArIFwiXVwiLHJzWldKPVwiXFxcXHUyMDBkXCI7dmFyIHJzTG93ZXJNaXNjPVwiKD86XCIgKyByc0xvd2VyICsgXCJ8XCIgKyByc01pc2MgKyBcIilcIixyc1VwcGVyTWlzYz1cIig/OlwiICsgcnNVcHBlciArIFwifFwiICsgcnNNaXNjICsgXCIpXCIscmVPcHRNb2Q9cnNNb2RpZmllciArIFwiP1wiLHJzT3B0VmFyPVwiW1wiICsgcnNWYXJSYW5nZSArIFwiXT9cIixyc09wdEpvaW49XCIoPzpcIiArIHJzWldKICsgXCIoPzpcIiArIFtyc05vbkFzdHJhbCxyc1JlZ2lvbmFsLHJzU3VyclBhaXJdLmpvaW4oXCJ8XCIpICsgXCIpXCIgKyByc09wdFZhciArIHJlT3B0TW9kICsgXCIpKlwiLHJzU2VxPXJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4scnNFbW9qaT1cIig/OlwiICsgW3JzRGluZ2JhdCxyc1JlZ2lvbmFsLHJzU3VyclBhaXJdLmpvaW4oXCJ8XCIpICsgXCIpXCIgKyByc1NlcSxyc1N5bWJvbD1cIig/OlwiICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArIFwiP1wiLHJzQ29tYm8scnNSZWdpb25hbCxyc1N1cnJQYWlyLHJzQXN0cmFsXS5qb2luKFwifFwiKSArIFwiKVwiO3ZhciByZUNvbWJvTWFyaz1SZWdFeHAocnNDb21ibyxcImdcIik7dmFyIHJlQ29tcGxleFN5bWJvbD1SZWdFeHAocnNGaXR6ICsgXCIoPz1cIiArIHJzRml0eiArIFwiKXxcIiArIHJzU3ltYm9sICsgcnNTZXEsXCJnXCIpO3ZhciByZUhhc0NvbXBsZXhTeW1ib2w9UmVnRXhwKFwiW1wiICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICsgcnNDb21ib01hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlICsgcnNWYXJSYW5nZSArIFwiXVwiKTt2YXIgcmVCYXNpY1dvcmQ9L1thLXpBLVowLTldKy9nO3ZhciByZUNvbXBsZXhXb3JkPVJlZ0V4cChbcnNVcHBlciArIFwiP1wiICsgcnNMb3dlciArIFwiKyg/PVwiICsgW3JzQnJlYWsscnNVcHBlcixcIiRcIl0uam9pbihcInxcIikgKyBcIilcIixyc1VwcGVyTWlzYyArIFwiKyg/PVwiICsgW3JzQnJlYWsscnNVcHBlciArIHJzTG93ZXJNaXNjLFwiJFwiXS5qb2luKFwifFwiKSArIFwiKVwiLHJzVXBwZXIgKyBcIj9cIiArIHJzTG93ZXJNaXNjICsgXCIrXCIscnNVcHBlciArIFwiK1wiLHJzRGlnaXRzLHJzRW1vamldLmpvaW4oXCJ8XCIpLFwiZ1wiKTt2YXIgcmVIYXNDb21wbGV4V29yZD0vW2Etel1bQS1aXXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87dmFyIGNvbnRleHRQcm9wcz1bXCJBcnJheVwiLFwiRGF0ZVwiLFwiRXJyb3JcIixcIkZsb2F0MzJBcnJheVwiLFwiRmxvYXQ2NEFycmF5XCIsXCJGdW5jdGlvblwiLFwiSW50OEFycmF5XCIsXCJJbnQxNkFycmF5XCIsXCJJbnQzMkFycmF5XCIsXCJNYXBcIixcIk1hdGhcIixcIk9iamVjdFwiLFwiUmVmbGVjdFwiLFwiUmVnRXhwXCIsXCJTZXRcIixcIlN0cmluZ1wiLFwiU3ltYm9sXCIsXCJUeXBlRXJyb3JcIixcIlVpbnQ4QXJyYXlcIixcIlVpbnQ4Q2xhbXBlZEFycmF5XCIsXCJVaW50MTZBcnJheVwiLFwiVWludDMyQXJyYXlcIixcIldlYWtNYXBcIixcIl9cIixcImNsZWFyVGltZW91dFwiLFwiaXNGaW5pdGVcIixcInBhcnNlSW50XCIsXCJzZXRUaW1lb3V0XCJdO3ZhciB0ZW1wbGF0ZUNvdW50ZXI9LTE7dmFyIHR5cGVkQXJyYXlUYWdzPXt9O3R5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7dHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID0gdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPSB0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID0gdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPSB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO3ZhciBjbG9uZWFibGVUYWdzPXt9O2Nsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID0gY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID0gY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID0gY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO2Nsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9IGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTt2YXIgZGVidXJyZWRMZXR0ZXJzPXtcIuiEjFwiOlwiQVwiLFwi6ISVXCI6XCJBXCIsXCLohJdcIjpcIkFcIixcIuiEmVwiOlwiQVwiLFwi6ISbXCI6XCJBXCIsXCLohJxcIjpcIkFcIixcIuiEv1wiOlwiYVwiLFwi6LCpXCI6XCJhXCIsXCLoipJcIjpcImFcIixcIuiMq1wiOlwiYVwiLFwi55uyXCI6XCJhXCIsXCLmsJNcIjpcImFcIixcIuiEn1wiOlwiQ1wiLFwi6I69XCI6XCJjXCIsXCLohKhcIjpcIkRcIixcIuWGklwiOlwiZFwiLFwi6ISgXCI6XCJFXCIsXCLohKFcIjpcIkVcIixcIuiEolwiOlwiRVwiLFwi6ISjXCI6XCJFXCIsXCLnjKtcIjpcImVcIixcIuiMhVwiOlwiZVwiLFwi6ZSaXCI6XCJlXCIsXCLmr5tcIjpcImVcIixcIuiEpFwiOlwiSVwiLFwi6ISlXCI6XCJJXCIsXCLohKZcIjpcIklcIixcIuiEp1wiOlwiSVwiLFwi55+bXCI6XCJpXCIsXCLpk4ZcIjpcImlcIixcIuWNr1wiOlwiaVwiLFwi6IyCXCI6XCJpXCIsXCLohKlcIjpcIk5cIixcIuW4vVwiOlwiblwiLFwi6ISqXCI6XCJPXCIsXCLohKtcIjpcIk9cIixcIuiErVwiOlwiT1wiLFwi6ISuXCI6XCJPXCIsXCLohLBcIjpcIk9cIixcIuiEtFwiOlwiT1wiLFwi6LKMXCI6XCJvXCIsXCLotLhcIjpcIm9cIixcIuS5iFwiOlwib1wiLFwi546rXCI6XCJvXCIsXCLmnppcIjpcIm9cIixcIumFtlwiOlwib1wiLFwi6IS1XCI6XCJVXCIsXCLohLdcIjpcIlVcIixcIuiEuVwiOlwiVVwiLFwi6IS6XCI6XCJVXCIsXCLpnIlcIjpcInVcIixcIueFpFwiOlwidVwiLFwi5rKhXCI6XCJ1XCIsXCLnnIlcIjpcInVcIixcIuiEu1wiOlwiWVwiLFwi5aqSXCI6XCJ5XCIsXCLmr49cIjpcInlcIixcIuiEnVwiOlwiQWVcIixcIuW/mVwiOlwiYWVcIixcIuiEvFwiOlwiVGhcIixcIumVgVwiOlwidGhcIixcIuiEvVwiOlwic3NcIn07dmFyIGh0bWxFc2NhcGVzPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJiMzOTtcIixcImBcIjpcIiYjOTY7XCJ9O3ZhciBodG1sVW5lc2NhcGVzPXtcIiZhbXA7XCI6XCImXCIsXCImbHQ7XCI6XCI8XCIsXCImZ3Q7XCI6XCI+XCIsXCImcXVvdDtcIjonXCInLFwiJiMzOTtcIjpcIidcIixcIiYjOTY7XCI6XCJgXCJ9O3ZhciBvYmplY3RUeXBlcz17XCJmdW5jdGlvblwiOnRydWUsb2JqZWN0OnRydWV9O3ZhciBzdHJpbmdFc2NhcGVzPXtcIlxcXFxcIjpcIlxcXFxcIixcIidcIjpcIidcIixcIlxcblwiOlwiblwiLFwiXFxyXCI6XCJyXCIsXCJcXHUyMDI4XCI6XCJ1MjAyOFwiLFwiXFx1MjAyOVwiOlwidTIwMjlcIn07dmFyIGZyZWVQYXJzZUZsb2F0PXBhcnNlRmxvYXQsZnJlZVBhcnNlSW50PXBhcnNlSW50O3ZhciBmcmVlRXhwb3J0cz1vYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZT9leHBvcnRzOm51bGw7dmFyIGZyZWVNb2R1bGU9b2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0gJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGU/bW9kdWxlOm51bGw7dmFyIGZyZWVHbG9iYWw9Y2hlY2tHbG9iYWwoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSAmJiB0eXBlb2YgZ2xvYmFsID09IFwib2JqZWN0XCIgJiYgZ2xvYmFsKTt2YXIgZnJlZVNlbGY9Y2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpO3ZhciBmcmVlV2luZG93PWNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyk7dmFyIG1vZHVsZUV4cG9ydHM9ZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzP2ZyZWVFeHBvcnRzOm51bGw7dmFyIHRoaXNHbG9iYWw9Y2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHRoaXNdICYmIHRoaXMpO3ZhciByb290PWZyZWVHbG9iYWwgfHwgZnJlZVdpbmRvdyAhPT0gKHRoaXNHbG9iYWwgJiYgdGhpc0dsb2JhbC53aW5kb3cpICYmIGZyZWVXaW5kb3cgfHwgZnJlZVNlbGYgfHwgdGhpc0dsb2JhbCB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7ZnVuY3Rpb24gYWRkTWFwRW50cnkobWFwLHBhaXIpe21hcC5zZXQocGFpclswXSxwYWlyWzFdKTtyZXR1cm4gbWFwO31mdW5jdGlvbiBhZGRTZXRFbnRyeShzZXQsdmFsdWUpe3NldC5hZGQodmFsdWUpO3JldHVybiBzZXQ7fWZ1bmN0aW9uIGFwcGx5KGZ1bmMsdGhpc0FyZyxhcmdzKXt2YXIgbGVuZ3RoPWFyZ3MubGVuZ3RoO3N3aXRjaChsZW5ndGgpe2Nhc2UgMDpyZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO2Nhc2UgMTpyZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsYXJnc1swXSk7Y2FzZSAyOnJldHVybiBmdW5jLmNhbGwodGhpc0FyZyxhcmdzWzBdLGFyZ3NbMV0pO2Nhc2UgMzpyZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsYXJnc1swXSxhcmdzWzFdLGFyZ3NbMl0pO31yZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLGFyZ3MpO31mdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksc2V0dGVyLGl0ZXJhdGVlLGFjY3VtdWxhdG9yKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPWFycmF5Lmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7dmFyIHZhbHVlPWFycmF5W2luZGV4XTtzZXR0ZXIoYWNjdW11bGF0b3IsdmFsdWUsaXRlcmF0ZWUodmFsdWUpLGFycmF5KTt9cmV0dXJuIGFjY3VtdWxhdG9yO31mdW5jdGlvbiBhcnJheUNvbmNhdChhcnJheSxvdGhlcil7dmFyIGluZGV4PS0xLGxlbmd0aD1hcnJheS5sZW5ndGgsb3RoSW5kZXg9LTEsb3RoTGVuZ3RoPW90aGVyLmxlbmd0aCxyZXN1bHQ9QXJyYXkobGVuZ3RoICsgb3RoTGVuZ3RoKTt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7cmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4XTt9d2hpbGUoKytvdGhJbmRleCA8IG90aExlbmd0aCkge3Jlc3VsdFtpbmRleCsrXSA9IG90aGVyW290aEluZGV4XTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LGl0ZXJhdGVlKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPWFycmF5Lmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7aWYoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLGluZGV4LGFycmF5KSA9PT0gZmFsc2Upe2JyZWFrO319cmV0dXJuIGFycmF5O31mdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSxpdGVyYXRlZSl7dmFyIGxlbmd0aD1hcnJheS5sZW5ndGg7d2hpbGUobGVuZ3RoLS0pIHtpZihpdGVyYXRlZShhcnJheVtsZW5ndGhdLGxlbmd0aCxhcnJheSkgPT09IGZhbHNlKXticmVhazt9fXJldHVybiBhcnJheTt9ZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSxwcmVkaWNhdGUpe3ZhciBpbmRleD0tMSxsZW5ndGg9YXJyYXkubGVuZ3RoO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHtpZighcHJlZGljYXRlKGFycmF5W2luZGV4XSxpbmRleCxhcnJheSkpe3JldHVybiBmYWxzZTt9fXJldHVybiB0cnVlO31mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSxwcmVkaWNhdGUpe3ZhciBpbmRleD0tMSxsZW5ndGg9YXJyYXkubGVuZ3RoLHJlc0luZGV4PS0xLHJlc3VsdD1bXTt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7dmFyIHZhbHVlPWFycmF5W2luZGV4XTtpZihwcmVkaWNhdGUodmFsdWUsaW5kZXgsYXJyYXkpKXtyZXN1bHRbKytyZXNJbmRleF0gPSB2YWx1ZTt9fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksdmFsdWUpe3JldHVybiAhIWFycmF5Lmxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSx2YWx1ZSwwKSA+IC0xO31mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSx2YWx1ZSxjb21wYXJhdG9yKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPWFycmF5Lmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7aWYoY29tcGFyYXRvcih2YWx1ZSxhcnJheVtpbmRleF0pKXtyZXR1cm4gdHJ1ZTt9fXJldHVybiBmYWxzZTt9ZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksaXRlcmF0ZWUpe3ZhciBpbmRleD0tMSxsZW5ndGg9YXJyYXkubGVuZ3RoLHJlc3VsdD1BcnJheShsZW5ndGgpO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHtyZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLGluZGV4LGFycmF5KTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LHZhbHVlcyl7dmFyIGluZGV4PS0xLGxlbmd0aD12YWx1ZXMubGVuZ3RoLG9mZnNldD1hcnJheS5sZW5ndGg7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge2FycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07fXJldHVybiBhcnJheTt9ZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksaXRlcmF0ZWUsYWNjdW11bGF0b3IsaW5pdEFjY3VtKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPWFycmF5Lmxlbmd0aDtpZihpbml0QWNjdW0gJiYgbGVuZ3RoKXthY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO313aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7YWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvcixhcnJheVtpbmRleF0saW5kZXgsYXJyYXkpO31yZXR1cm4gYWNjdW11bGF0b3I7fWZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksaXRlcmF0ZWUsYWNjdW11bGF0b3IsaW5pdEFjY3VtKXt2YXIgbGVuZ3RoPWFycmF5Lmxlbmd0aDtpZihpbml0QWNjdW0gJiYgbGVuZ3RoKXthY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTt9d2hpbGUobGVuZ3RoLS0pIHthY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLGFycmF5W2xlbmd0aF0sbGVuZ3RoLGFycmF5KTt9cmV0dXJuIGFjY3VtdWxhdG9yO31mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXkscHJlZGljYXRlKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPWFycmF5Lmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7aWYocHJlZGljYXRlKGFycmF5W2luZGV4XSxpbmRleCxhcnJheSkpe3JldHVybiB0cnVlO319cmV0dXJuIGZhbHNlO31mdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksaXRlcmF0ZWUsY29tcGFyYXRvcil7dmFyIGluZGV4PS0xLGxlbmd0aD1hcnJheS5sZW5ndGg7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3ZhciB2YWx1ZT1hcnJheVtpbmRleF0sY3VycmVudD1pdGVyYXRlZSh2YWx1ZSk7aWYoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkP2N1cnJlbnQgPT09IGN1cnJlbnQ6Y29tcGFyYXRvcihjdXJyZW50LGNvbXB1dGVkKSkpe3ZhciBjb21wdXRlZD1jdXJyZW50LHJlc3VsdD12YWx1ZTt9fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGJhc2VGaW5kKGNvbGxlY3Rpb24scHJlZGljYXRlLGVhY2hGdW5jLHJldEtleSl7dmFyIHJlc3VsdDtlYWNoRnVuYyhjb2xsZWN0aW9uLGZ1bmN0aW9uKHZhbHVlLGtleSxjb2xsZWN0aW9uKXtpZihwcmVkaWNhdGUodmFsdWUsa2V5LGNvbGxlY3Rpb24pKXtyZXN1bHQgPSByZXRLZXk/a2V5OnZhbHVlO3JldHVybiBmYWxzZTt9fSk7cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSxwcmVkaWNhdGUsZnJvbVJpZ2h0KXt2YXIgbGVuZ3RoPWFycmF5Lmxlbmd0aCxpbmRleD1mcm9tUmlnaHQ/bGVuZ3RoOi0xO3doaWxlKGZyb21SaWdodD9pbmRleC0tOisraW5kZXggPCBsZW5ndGgpIHtpZihwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLGluZGV4LGFycmF5KSl7cmV0dXJuIGluZGV4O319cmV0dXJuIC0xO31mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSx2YWx1ZSxmcm9tSW5kZXgpe2lmKHZhbHVlICE9PSB2YWx1ZSl7cmV0dXJuIGluZGV4T2ZOYU4oYXJyYXksZnJvbUluZGV4KTt9dmFyIGluZGV4PWZyb21JbmRleCAtIDEsbGVuZ3RoPWFycmF5Lmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7aWYoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSl7cmV0dXJuIGluZGV4O319cmV0dXJuIC0xO31mdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24saXRlcmF0ZWUsYWNjdW11bGF0b3IsaW5pdEFjY3VtLGVhY2hGdW5jKXtlYWNoRnVuYyhjb2xsZWN0aW9uLGZ1bmN0aW9uKHZhbHVlLGluZGV4LGNvbGxlY3Rpb24pe2FjY3VtdWxhdG9yID0gaW5pdEFjY3VtPyhpbml0QWNjdW0gPSBmYWxzZSx2YWx1ZSk6aXRlcmF0ZWUoYWNjdW11bGF0b3IsdmFsdWUsaW5kZXgsY29sbGVjdGlvbik7fSk7cmV0dXJuIGFjY3VtdWxhdG9yO31mdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LGNvbXBhcmVyKXt2YXIgbGVuZ3RoPWFycmF5Lmxlbmd0aDthcnJheS5zb3J0KGNvbXBhcmVyKTt3aGlsZShsZW5ndGgtLSkge2FycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO31yZXR1cm4gYXJyYXk7fWZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksaXRlcmF0ZWUpe3ZhciByZXN1bHQsaW5kZXg9LTEsbGVuZ3RoPWFycmF5Lmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7dmFyIGN1cnJlbnQ9aXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtpZihjdXJyZW50ICE9PSB1bmRlZmluZWQpe3Jlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkP2N1cnJlbnQ6cmVzdWx0ICsgY3VycmVudDt9fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGJhc2VUaW1lcyhuLGl0ZXJhdGVlKXt2YXIgaW5kZXg9LTEscmVzdWx0PUFycmF5KG4pO3doaWxlKCsraW5kZXggPCBuKSB7cmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LHByb3BzKXtyZXR1cm4gYXJyYXlNYXAocHJvcHMsZnVuY3Rpb24oa2V5KXtyZXR1cm4gW2tleSxvYmplY3Rba2V5XV07fSk7fWZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKXtyZXR1cm4gZnVuY3Rpb24odmFsdWUpe3JldHVybiBmdW5jKHZhbHVlKTt9O31mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCxwcm9wcyl7cmV0dXJuIGFycmF5TWFwKHByb3BzLGZ1bmN0aW9uKGtleSl7cmV0dXJuIG9iamVjdFtrZXldO30pO31mdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scyxjaHJTeW1ib2xzKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPXN0clN5bWJvbHMubGVuZ3RoO3doaWxlKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scyxzdHJTeW1ib2xzW2luZGV4XSwwKSA+IC0xKSB7fXJldHVybiBpbmRleDt9ZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLGNoclN5bWJvbHMpe3ZhciBpbmRleD1zdHJTeW1ib2xzLmxlbmd0aDt3aGlsZShpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsc3RyU3ltYm9sc1tpbmRleF0sMCkgPiAtMSkge31yZXR1cm4gaW5kZXg7fWZ1bmN0aW9uIGNoZWNrR2xvYmFsKHZhbHVlKXtyZXR1cm4gdmFsdWUgJiYgdmFsdWUuT2JqZWN0ID09PSBPYmplY3Q/dmFsdWU6bnVsbDt9ZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSxvdGhlcil7aWYodmFsdWUgIT09IG90aGVyKXt2YXIgdmFsSXNOdWxsPXZhbHVlID09PSBudWxsLHZhbElzVW5kZWY9dmFsdWUgPT09IHVuZGVmaW5lZCx2YWxJc1JlZmxleGl2ZT12YWx1ZSA9PT0gdmFsdWU7dmFyIG90aElzTnVsbD1vdGhlciA9PT0gbnVsbCxvdGhJc1VuZGVmPW90aGVyID09PSB1bmRlZmluZWQsb3RoSXNSZWZsZXhpdmU9b3RoZXIgPT09IG90aGVyO2lmKHZhbHVlID4gb3RoZXIgJiYgIW90aElzTnVsbCB8fCAhdmFsSXNSZWZsZXhpdmUgfHwgdmFsSXNOdWxsICYmICFvdGhJc1VuZGVmICYmIG90aElzUmVmbGV4aXZlIHx8IHZhbElzVW5kZWYgJiYgb3RoSXNSZWZsZXhpdmUpe3JldHVybiAxO31pZih2YWx1ZSA8IG90aGVyICYmICF2YWxJc051bGwgfHwgIW90aElzUmVmbGV4aXZlIHx8IG90aElzTnVsbCAmJiAhdmFsSXNVbmRlZiAmJiB2YWxJc1JlZmxleGl2ZSB8fCBvdGhJc1VuZGVmICYmIHZhbElzUmVmbGV4aXZlKXtyZXR1cm4gLTE7fX1yZXR1cm4gMDt9ZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCxvdGhlcixvcmRlcnMpe3ZhciBpbmRleD0tMSxvYmpDcml0ZXJpYT1vYmplY3QuY3JpdGVyaWEsb3RoQ3JpdGVyaWE9b3RoZXIuY3JpdGVyaWEsbGVuZ3RoPW9iakNyaXRlcmlhLmxlbmd0aCxvcmRlcnNMZW5ndGg9b3JkZXJzLmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7dmFyIHJlc3VsdD1jb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSxvdGhDcml0ZXJpYVtpbmRleF0pO2lmKHJlc3VsdCl7aWYoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKXtyZXR1cm4gcmVzdWx0O312YXIgb3JkZXI9b3JkZXJzW2luZGV4XTtyZXR1cm4gcmVzdWx0ICogKG9yZGVyID09IFwiZGVzY1wiPy0xOjEpO319cmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O31mdW5jdGlvbiBkZWJ1cnJMZXR0ZXIobGV0dGVyKXtyZXR1cm4gZGVidXJyZWRMZXR0ZXJzW2xldHRlcl07fWZ1bmN0aW9uIGVzY2FwZUh0bWxDaGFyKGNocil7cmV0dXJuIGh0bWxFc2NhcGVzW2Nocl07fWZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKXtyZXR1cm4gXCJcXFxcXCIgKyBzdHJpbmdFc2NhcGVzW2Nocl07fWZ1bmN0aW9uIGluZGV4T2ZOYU4oYXJyYXksZnJvbUluZGV4LGZyb21SaWdodCl7dmFyIGxlbmd0aD1hcnJheS5sZW5ndGgsaW5kZXg9ZnJvbUluZGV4ICsgKGZyb21SaWdodD8wOi0xKTt3aGlsZShmcm9tUmlnaHQ/aW5kZXgtLTorK2luZGV4IDwgbGVuZ3RoKSB7dmFyIG90aGVyPWFycmF5W2luZGV4XTtpZihvdGhlciAhPT0gb3RoZXIpe3JldHVybiBpbmRleDt9fXJldHVybiAtMTt9ZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKXt2YXIgcmVzdWx0PWZhbHNlO2lmKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9IFwiZnVuY3Rpb25cIil7dHJ5e3Jlc3VsdCA9ICEhKHZhbHVlICsgXCJcIik7fWNhdGNoKGUpIHt9fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsbGVuZ3RoKXt2YWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpPyt2YWx1ZTotMTtsZW5ndGggPSBsZW5ndGggPT0gbnVsbD9NQVhfU0FGRV9JTlRFR0VSOmxlbmd0aDtyZXR1cm4gdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aDt9ZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKXt2YXIgZGF0YSxyZXN1bHQ9W107d2hpbGUoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7cmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKXt2YXIgaW5kZXg9LTEscmVzdWx0PUFycmF5KG1hcC5zaXplKTttYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSxrZXkpe3Jlc3VsdFsrK2luZGV4XSA9IFtrZXksdmFsdWVdO30pO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LHBsYWNlaG9sZGVyKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPWFycmF5Lmxlbmd0aCxyZXNJbmRleD0tMSxyZXN1bHQ9W107d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge2lmKGFycmF5W2luZGV4XSA9PT0gcGxhY2Vob2xkZXIpe2FycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO3Jlc3VsdFsrK3Jlc0luZGV4XSA9IGluZGV4O319cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpe3ZhciBpbmRleD0tMSxyZXN1bHQ9QXJyYXkoc2V0LnNpemUpO3NldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtyZXN1bHRbKytpbmRleF0gPSB2YWx1ZTt9KTtyZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZyl7aWYoIShzdHJpbmcgJiYgcmVIYXNDb21wbGV4U3ltYm9sLnRlc3Qoc3RyaW5nKSkpe3JldHVybiBzdHJpbmcubGVuZ3RoO312YXIgcmVzdWx0PXJlQ29tcGxleFN5bWJvbC5sYXN0SW5kZXggPSAwO3doaWxlKHJlQ29tcGxleFN5bWJvbC50ZXN0KHN0cmluZykpIHtyZXN1bHQrKzt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpe3JldHVybiBzdHJpbmcubWF0Y2gocmVDb21wbGV4U3ltYm9sKTt9ZnVuY3Rpb24gdW5lc2NhcGVIdG1sQ2hhcihjaHIpe3JldHVybiBodG1sVW5lc2NhcGVzW2Nocl07fWZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KXtjb250ZXh0ID0gY29udGV4dD9fLmRlZmF1bHRzKHt9LGNvbnRleHQsXy5waWNrKHJvb3QsY29udGV4dFByb3BzKSk6cm9vdDt2YXIgRGF0ZT1jb250ZXh0LkRhdGUsRXJyb3I9Y29udGV4dC5FcnJvcixNYXRoPWNvbnRleHQuTWF0aCxSZWdFeHA9Y29udGV4dC5SZWdFeHAsVHlwZUVycm9yPWNvbnRleHQuVHlwZUVycm9yO3ZhciBhcnJheVByb3RvPWNvbnRleHQuQXJyYXkucHJvdG90eXBlLG9iamVjdFByb3RvPWNvbnRleHQuT2JqZWN0LnByb3RvdHlwZTt2YXIgZnVuY1RvU3RyaW5nPWNvbnRleHQuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO3ZhciBoYXNPd25Qcm9wZXJ0eT1vYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTt2YXIgaWRDb3VudGVyPTA7dmFyIG9iamVjdEN0b3JTdHJpbmc9ZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTt2YXIgb2JqZWN0VG9TdHJpbmc9b2JqZWN0UHJvdG8udG9TdHJpbmc7dmFyIG9sZERhc2g9cm9vdC5fO3ZhciByZUlzTmF0aXZlPVJlZ0V4cChcIl5cIiArIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhcixcIlxcXFwkJlwiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLFwiJDEuKj9cIikgKyBcIiRcIik7dmFyIFJlZmxlY3Q9Y29udGV4dC5SZWZsZWN0LFN5bWJvbD1jb250ZXh0LlN5bWJvbCxVaW50OEFycmF5PWNvbnRleHQuVWludDhBcnJheSxjbGVhclRpbWVvdXQ9Y29udGV4dC5jbGVhclRpbWVvdXQsZW51bWVyYXRlPVJlZmxlY3Q/UmVmbGVjdC5lbnVtZXJhdGU6dW5kZWZpbmVkLGdldFByb3RvdHlwZU9mPU9iamVjdC5nZXRQcm90b3R5cGVPZixnZXRPd25Qcm9wZXJ0eVN5bWJvbHM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxpdGVyYXRvclN5bWJvbD10eXBlb2YgKGl0ZXJhdG9yU3ltYm9sID0gU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcikgPT0gXCJzeW1ib2xcIj9pdGVyYXRvclN5bWJvbDp1bmRlZmluZWQscHJvcGVydHlJc0VudW1lcmFibGU9b2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsc2V0VGltZW91dD1jb250ZXh0LnNldFRpbWVvdXQsc3BsaWNlPWFycmF5UHJvdG8uc3BsaWNlO3ZhciBuYXRpdmVDZWlsPU1hdGguY2VpbCxuYXRpdmVGbG9vcj1NYXRoLmZsb29yLG5hdGl2ZUlzRmluaXRlPWNvbnRleHQuaXNGaW5pdGUsbmF0aXZlSm9pbj1hcnJheVByb3RvLmpvaW4sbmF0aXZlS2V5cz1PYmplY3Qua2V5cyxuYXRpdmVNYXg9TWF0aC5tYXgsbmF0aXZlTWluPU1hdGgubWluLG5hdGl2ZVBhcnNlSW50PWNvbnRleHQucGFyc2VJbnQsbmF0aXZlUmFuZG9tPU1hdGgucmFuZG9tLG5hdGl2ZVJldmVyc2U9YXJyYXlQcm90by5yZXZlcnNlO3ZhciBNYXA9Z2V0TmF0aXZlKGNvbnRleHQsXCJNYXBcIiksU2V0PWdldE5hdGl2ZShjb250ZXh0LFwiU2V0XCIpLFdlYWtNYXA9Z2V0TmF0aXZlKGNvbnRleHQsXCJXZWFrTWFwXCIpLG5hdGl2ZUNyZWF0ZT1nZXROYXRpdmUoT2JqZWN0LFwiY3JlYXRlXCIpO3ZhciBtZXRhTWFwPVdlYWtNYXAgJiYgbmV3IFdlYWtNYXAoKTt2YXIgbWFwQ3RvclN0cmluZz1NYXA/ZnVuY1RvU3RyaW5nLmNhbGwoTWFwKTpcIlwiLHNldEN0b3JTdHJpbmc9U2V0P2Z1bmNUb1N0cmluZy5jYWxsKFNldCk6XCJcIjt2YXIgc3ltYm9sUHJvdG89U3ltYm9sP1N5bWJvbC5wcm90b3R5cGU6dW5kZWZpbmVkLHN5bWJvbFZhbHVlT2Y9U3ltYm9sP3N5bWJvbFByb3RvLnZhbHVlT2Y6dW5kZWZpbmVkLHN5bWJvbFRvU3RyaW5nPVN5bWJvbD9zeW1ib2xQcm90by50b1N0cmluZzp1bmRlZmluZWQ7dmFyIHJlYWxOYW1lcz17fTtmdW5jdGlvbiBsb2Rhc2godmFsdWUpe2lmKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpe2lmKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcil7cmV0dXJuIHZhbHVlO31pZihoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLFwiX193cmFwcGVkX19cIikpe3JldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO319cmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTt9ZnVuY3Rpb24gYmFzZUxvZGFzaCgpe31mdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLGNoYWluQWxsKXt0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7dGhpcy5fX2FjdGlvbnNfXyA9IFtdO3RoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDt0aGlzLl9faW5kZXhfXyA9IDA7dGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO31sb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtlc2NhcGU6cmVFc2NhcGUsZXZhbHVhdGU6cmVFdmFsdWF0ZSxpbnRlcnBvbGF0ZTpyZUludGVycG9sYXRlLHZhcmlhYmxlOlwiXCIsaW1wb3J0czp7Xzpsb2Rhc2h9fTtmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSl7dGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO3RoaXMuX19hY3Rpb25zX18gPSBbXTt0aGlzLl9fZGlyX18gPSAxO3RoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7dGhpcy5fX2l0ZXJhdGVlc19fID0gW107dGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDt0aGlzLl9fdmlld3NfXyA9IFtdO31mdW5jdGlvbiBsYXp5Q2xvbmUoKXt2YXIgcmVzdWx0PW5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtyZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7cmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187cmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO3Jlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7cmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187cmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gbGF6eVJldmVyc2UoKXtpZih0aGlzLl9fZmlsdGVyZWRfXyl7dmFyIHJlc3VsdD1uZXcgTGF6eVdyYXBwZXIodGhpcyk7cmVzdWx0Ll9fZGlyX18gPSAtMTtyZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTt9ZWxzZSB7cmVzdWx0ID0gdGhpcy5jbG9uZSgpO3Jlc3VsdC5fX2Rpcl9fICo9IC0xO31yZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBsYXp5VmFsdWUoKXt2YXIgYXJyYXk9dGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLGRpcj10aGlzLl9fZGlyX18saXNBcnI9aXNBcnJheShhcnJheSksaXNSaWdodD1kaXIgPCAwLGFyckxlbmd0aD1pc0Fycj9hcnJheS5sZW5ndGg6MCx2aWV3PWdldFZpZXcoMCxhcnJMZW5ndGgsdGhpcy5fX3ZpZXdzX18pLHN0YXJ0PXZpZXcuc3RhcnQsZW5kPXZpZXcuZW5kLGxlbmd0aD1lbmQgLSBzdGFydCxpbmRleD1pc1JpZ2h0P2VuZDpzdGFydCAtIDEsaXRlcmF0ZWVzPXRoaXMuX19pdGVyYXRlZXNfXyxpdGVyTGVuZ3RoPWl0ZXJhdGVlcy5sZW5ndGgscmVzSW5kZXg9MCx0YWtlQ291bnQ9bmF0aXZlTWluKGxlbmd0aCx0aGlzLl9fdGFrZUNvdW50X18pO2lmKCFpc0FyciB8fCBhcnJMZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIHx8IGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCl7cmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksdGhpcy5fX2FjdGlvbnNfXyk7fXZhciByZXN1bHQ9W107b3V0ZXI6IHdoaWxlKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7aW5kZXggKz0gZGlyO3ZhciBpdGVySW5kZXg9LTEsdmFsdWU9YXJyYXlbaW5kZXhdO3doaWxlKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge3ZhciBkYXRhPWl0ZXJhdGVlc1tpdGVySW5kZXhdLGl0ZXJhdGVlPWRhdGEuaXRlcmF0ZWUsdHlwZT1kYXRhLnR5cGUsY29tcHV0ZWQ9aXRlcmF0ZWUodmFsdWUpO2lmKHR5cGUgPT0gTEFaWV9NQVBfRkxBRyl7dmFsdWUgPSBjb21wdXRlZDt9ZWxzZSBpZighY29tcHV0ZWQpe2lmKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyl7Y29udGludWUgb3V0ZXI7fWVsc2Uge2JyZWFrIG91dGVyO319fXJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO31yZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBIYXNoKCl7fWZ1bmN0aW9uIGhhc2hEZWxldGUoaGFzaCxrZXkpe3JldHVybiBoYXNoSGFzKGhhc2gsa2V5KSAmJiBkZWxldGUgaGFzaFtrZXldO31mdW5jdGlvbiBoYXNoR2V0KGhhc2gsa2V5KXtpZihuYXRpdmVDcmVhdGUpe3ZhciByZXN1bHQ9aGFzaFtrZXldO3JldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEP3VuZGVmaW5lZDpyZXN1bHQ7fXJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGhhc2gsa2V5KT9oYXNoW2tleV06dW5kZWZpbmVkO31mdW5jdGlvbiBoYXNoSGFzKGhhc2gsa2V5KXtyZXR1cm4gbmF0aXZlQ3JlYXRlP2hhc2hba2V5XSAhPT0gdW5kZWZpbmVkOmhhc093blByb3BlcnR5LmNhbGwoaGFzaCxrZXkpO31mdW5jdGlvbiBoYXNoU2V0KGhhc2gsa2V5LHZhbHVlKXtoYXNoW2tleV0gPSBuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZD9IQVNIX1VOREVGSU5FRDp2YWx1ZTt9ZnVuY3Rpb24gTWFwQ2FjaGUodmFsdWVzKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPXZhbHVlcz92YWx1ZXMubGVuZ3RoOjA7dGhpcy5jbGVhcigpO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIgZW50cnk9dmFsdWVzW2luZGV4XTt0aGlzLnNldChlbnRyeVswXSxlbnRyeVsxXSk7fX1mdW5jdGlvbiBtYXBDbGVhcigpe3RoaXMuX19kYXRhX18gPSB7aGFzaDpuZXcgSGFzaCgpLG1hcDpNYXA/bmV3IE1hcCgpOltdLHN0cmluZzpuZXcgSGFzaCgpfTt9ZnVuY3Rpb24gbWFwRGVsZXRlKGtleSl7dmFyIGRhdGE9dGhpcy5fX2RhdGFfXztpZihpc0tleWFibGUoa2V5KSl7cmV0dXJuIGhhc2hEZWxldGUodHlwZW9mIGtleSA9PSBcInN0cmluZ1wiP2RhdGEuc3RyaW5nOmRhdGEuaGFzaCxrZXkpO31yZXR1cm4gTWFwP2RhdGEubWFwW1wiZGVsZXRlXCJdKGtleSk6YXNzb2NEZWxldGUoZGF0YS5tYXAsa2V5KTt9ZnVuY3Rpb24gbWFwR2V0KGtleSl7dmFyIGRhdGE9dGhpcy5fX2RhdGFfXztpZihpc0tleWFibGUoa2V5KSl7cmV0dXJuIGhhc2hHZXQodHlwZW9mIGtleSA9PSBcInN0cmluZ1wiP2RhdGEuc3RyaW5nOmRhdGEuaGFzaCxrZXkpO31yZXR1cm4gTWFwP2RhdGEubWFwLmdldChrZXkpOmFzc29jR2V0KGRhdGEubWFwLGtleSk7fWZ1bmN0aW9uIG1hcEhhcyhrZXkpe3ZhciBkYXRhPXRoaXMuX19kYXRhX187aWYoaXNLZXlhYmxlKGtleSkpe3JldHVybiBoYXNoSGFzKHR5cGVvZiBrZXkgPT0gXCJzdHJpbmdcIj9kYXRhLnN0cmluZzpkYXRhLmhhc2gsa2V5KTt9cmV0dXJuIE1hcD9kYXRhLm1hcC5oYXMoa2V5KTphc3NvY0hhcyhkYXRhLm1hcCxrZXkpO31mdW5jdGlvbiBtYXBTZXQoa2V5LHZhbHVlKXt2YXIgZGF0YT10aGlzLl9fZGF0YV9fO2lmKGlzS2V5YWJsZShrZXkpKXtoYXNoU2V0KHR5cGVvZiBrZXkgPT0gXCJzdHJpbmdcIj9kYXRhLnN0cmluZzpkYXRhLmhhc2gsa2V5LHZhbHVlKTt9ZWxzZSBpZihNYXApe2RhdGEubWFwLnNldChrZXksdmFsdWUpO31lbHNlIHthc3NvY1NldChkYXRhLm1hcCxrZXksdmFsdWUpO31yZXR1cm4gdGhpczt9ZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPXZhbHVlcz92YWx1ZXMubGVuZ3RoOjA7dGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZSgpO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHt0aGlzLnB1c2godmFsdWVzW2luZGV4XSk7fX1mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSx2YWx1ZSl7dmFyIG1hcD1jYWNoZS5fX2RhdGFfXztpZihpc0tleWFibGUodmFsdWUpKXt2YXIgZGF0YT1tYXAuX19kYXRhX18saGFzaD10eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIj9kYXRhLnN0cmluZzpkYXRhLmhhc2g7cmV0dXJuIGhhc2hbdmFsdWVdID09PSBIQVNIX1VOREVGSU5FRDt9cmV0dXJuIG1hcC5oYXModmFsdWUpO31mdW5jdGlvbiBjYWNoZVB1c2godmFsdWUpe3ZhciBtYXA9dGhpcy5fX2RhdGFfXztpZihpc0tleWFibGUodmFsdWUpKXt2YXIgZGF0YT1tYXAuX19kYXRhX18saGFzaD10eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIj9kYXRhLnN0cmluZzpkYXRhLmhhc2g7aGFzaFt2YWx1ZV0gPSBIQVNIX1VOREVGSU5FRDt9ZWxzZSB7bWFwLnNldCh2YWx1ZSxIQVNIX1VOREVGSU5FRCk7fX1mdW5jdGlvbiBTdGFjayh2YWx1ZXMpe3ZhciBpbmRleD0tMSxsZW5ndGg9dmFsdWVzP3ZhbHVlcy5sZW5ndGg6MDt0aGlzLmNsZWFyKCk7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3ZhciBlbnRyeT12YWx1ZXNbaW5kZXhdO3RoaXMuc2V0KGVudHJ5WzBdLGVudHJ5WzFdKTt9fWZ1bmN0aW9uIHN0YWNrQ2xlYXIoKXt0aGlzLl9fZGF0YV9fID0ge2FycmF5OltdLG1hcDpudWxsfTt9ZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KXt2YXIgZGF0YT10aGlzLl9fZGF0YV9fLGFycmF5PWRhdGEuYXJyYXk7cmV0dXJuIGFycmF5P2Fzc29jRGVsZXRlKGFycmF5LGtleSk6ZGF0YS5tYXBbXCJkZWxldGVcIl0oa2V5KTt9ZnVuY3Rpb24gc3RhY2tHZXQoa2V5KXt2YXIgZGF0YT10aGlzLl9fZGF0YV9fLGFycmF5PWRhdGEuYXJyYXk7cmV0dXJuIGFycmF5P2Fzc29jR2V0KGFycmF5LGtleSk6ZGF0YS5tYXAuZ2V0KGtleSk7fWZ1bmN0aW9uIHN0YWNrSGFzKGtleSl7dmFyIGRhdGE9dGhpcy5fX2RhdGFfXyxhcnJheT1kYXRhLmFycmF5O3JldHVybiBhcnJheT9hc3NvY0hhcyhhcnJheSxrZXkpOmRhdGEubWFwLmhhcyhrZXkpO31mdW5jdGlvbiBzdGFja1NldChrZXksdmFsdWUpe3ZhciBkYXRhPXRoaXMuX19kYXRhX18sYXJyYXk9ZGF0YS5hcnJheTtpZihhcnJheSl7aWYoYXJyYXkubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpe2Fzc29jU2V0KGFycmF5LGtleSx2YWx1ZSk7fWVsc2Uge2RhdGEuYXJyYXkgPSBudWxsO2RhdGEubWFwID0gbmV3IE1hcENhY2hlKGFycmF5KTt9fXZhciBtYXA9ZGF0YS5tYXA7aWYobWFwKXttYXAuc2V0KGtleSx2YWx1ZSk7fXJldHVybiB0aGlzO31mdW5jdGlvbiBhc3NvY0RlbGV0ZShhcnJheSxrZXkpe3ZhciBpbmRleD1hc3NvY0luZGV4T2YoYXJyYXksa2V5KTtpZihpbmRleCA8IDApe3JldHVybiBmYWxzZTt9dmFyIGxhc3RJbmRleD1hcnJheS5sZW5ndGggLSAxO2lmKGluZGV4ID09IGxhc3RJbmRleCl7YXJyYXkucG9wKCk7fWVsc2Uge3NwbGljZS5jYWxsKGFycmF5LGluZGV4LDEpO31yZXR1cm4gdHJ1ZTt9ZnVuY3Rpb24gYXNzb2NHZXQoYXJyYXksa2V5KXt2YXIgaW5kZXg9YXNzb2NJbmRleE9mKGFycmF5LGtleSk7cmV0dXJuIGluZGV4IDwgMD91bmRlZmluZWQ6YXJyYXlbaW5kZXhdWzFdO31mdW5jdGlvbiBhc3NvY0hhcyhhcnJheSxrZXkpe3JldHVybiBhc3NvY0luZGV4T2YoYXJyYXksa2V5KSA+IC0xO31mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksa2V5KXt2YXIgbGVuZ3RoPWFycmF5Lmxlbmd0aDt3aGlsZShsZW5ndGgtLSkge2lmKGVxKGFycmF5W2xlbmd0aF1bMF0sa2V5KSl7cmV0dXJuIGxlbmd0aDt9fXJldHVybiAtMTt9ZnVuY3Rpb24gYXNzb2NTZXQoYXJyYXksa2V5LHZhbHVlKXt2YXIgaW5kZXg9YXNzb2NJbmRleE9mKGFycmF5LGtleSk7aWYoaW5kZXggPCAwKXthcnJheS5wdXNoKFtrZXksdmFsdWVdKTt9ZWxzZSB7YXJyYXlbaW5kZXhdWzFdID0gdmFsdWU7fX1mdW5jdGlvbiBhc3NpZ25JbkRlZmF1bHRzKG9ialZhbHVlLHNyY1ZhbHVlLGtleSxvYmplY3Qpe2lmKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHwgZXEob2JqVmFsdWUsb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LGtleSkpe3JldHVybiBzcmNWYWx1ZTt9cmV0dXJuIG9ialZhbHVlO31mdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCxrZXksdmFsdWUpe2lmKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLHZhbHVlKSB8fCB0eXBlb2Yga2V5ID09IFwibnVtYmVyXCIgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKXtvYmplY3Rba2V5XSA9IHZhbHVlO319ZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LGtleSx2YWx1ZSl7dmFyIG9ialZhbHVlPW9iamVjdFtrZXldO2lmKCFlcShvYmpWYWx1ZSx2YWx1ZSkgfHwgZXEob2JqVmFsdWUsb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LGtleSkgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKXtvYmplY3Rba2V5XSA9IHZhbHVlO319ZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbixzZXR0ZXIsaXRlcmF0ZWUsYWNjdW11bGF0b3Ipe2Jhc2VFYWNoKGNvbGxlY3Rpb24sZnVuY3Rpb24odmFsdWUsa2V5LGNvbGxlY3Rpb24pe3NldHRlcihhY2N1bXVsYXRvcix2YWx1ZSxpdGVyYXRlZSh2YWx1ZSksY29sbGVjdGlvbik7fSk7cmV0dXJuIGFjY3VtdWxhdG9yO31mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCxzb3VyY2Upe3JldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2Usa2V5cyhzb3VyY2UpLG9iamVjdCk7fWZ1bmN0aW9uIGJhc2VBdChvYmplY3QscGF0aHMpe3ZhciBpbmRleD0tMSxpc05pbD1vYmplY3QgPT0gbnVsbCxsZW5ndGg9cGF0aHMubGVuZ3RoLHJlc3VsdD1BcnJheShsZW5ndGgpO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHtyZXN1bHRbaW5kZXhdID0gaXNOaWw/dW5kZWZpbmVkOmdldChvYmplY3QscGF0aHNbaW5kZXhdKTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlcixsb3dlcix1cHBlcil7aWYobnVtYmVyID09PSBudW1iZXIpe2lmKHVwcGVyICE9PSB1bmRlZmluZWQpe251bWJlciA9IG51bWJlciA8PSB1cHBlcj9udW1iZXI6dXBwZXI7fWlmKGxvd2VyICE9PSB1bmRlZmluZWQpe251bWJlciA9IG51bWJlciA+PSBsb3dlcj9udW1iZXI6bG93ZXI7fX1yZXR1cm4gbnVtYmVyO31mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsaXNEZWVwLGN1c3RvbWl6ZXIsa2V5LG9iamVjdCxzdGFjayl7dmFyIHJlc3VsdDtpZihjdXN0b21pemVyKXtyZXN1bHQgPSBvYmplY3Q/Y3VzdG9taXplcih2YWx1ZSxrZXksb2JqZWN0LHN0YWNrKTpjdXN0b21pemVyKHZhbHVlKTt9aWYocmVzdWx0ICE9PSB1bmRlZmluZWQpe3JldHVybiByZXN1bHQ7fWlmKCFpc09iamVjdCh2YWx1ZSkpe3JldHVybiB2YWx1ZTt9dmFyIGlzQXJyPWlzQXJyYXkodmFsdWUpO2lmKGlzQXJyKXtyZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7aWYoIWlzRGVlcCl7cmV0dXJuIGNvcHlBcnJheSh2YWx1ZSxyZXN1bHQpO319ZWxzZSB7dmFyIHRhZz1nZXRUYWcodmFsdWUpLGlzRnVuYz10YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO2lmKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgaXNGdW5jICYmICFvYmplY3Qpe2lmKGlzSG9zdE9iamVjdCh2YWx1ZSkpe3JldHVybiBvYmplY3Q/dmFsdWU6e307fXJlc3VsdCA9IGluaXRDbG9uZU9iamVjdChpc0Z1bmM/e306dmFsdWUpO2lmKCFpc0RlZXApe3JldHVybiBjb3B5U3ltYm9scyh2YWx1ZSxiYXNlQXNzaWduKHJlc3VsdCx2YWx1ZSkpO319ZWxzZSB7cmV0dXJuIGNsb25lYWJsZVRhZ3NbdGFnXT9pbml0Q2xvbmVCeVRhZyh2YWx1ZSx0YWcsaXNEZWVwKTpvYmplY3Q/dmFsdWU6e307fX1zdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2soKSk7dmFyIHN0YWNrZWQ9c3RhY2suZ2V0KHZhbHVlKTtpZihzdGFja2VkKXtyZXR1cm4gc3RhY2tlZDt9c3RhY2suc2V0KHZhbHVlLHJlc3VsdCk7KGlzQXJyP2FycmF5RWFjaDpiYXNlRm9yT3duKSh2YWx1ZSxmdW5jdGlvbihzdWJWYWx1ZSxrZXkpe2Fzc2lnblZhbHVlKHJlc3VsdCxrZXksYmFzZUNsb25lKHN1YlZhbHVlLGlzRGVlcCxjdXN0b21pemVyLGtleSx2YWx1ZSxzdGFjaykpO30pO3JldHVybiBpc0Fycj9yZXN1bHQ6Y29weVN5bWJvbHModmFsdWUscmVzdWx0KTt9ZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSl7dmFyIHByb3BzPWtleXMoc291cmNlKSxsZW5ndGg9cHJvcHMubGVuZ3RoO3JldHVybiBmdW5jdGlvbihvYmplY3Qpe2lmKG9iamVjdCA9PSBudWxsKXtyZXR1cm4gIWxlbmd0aDt9dmFyIGluZGV4PWxlbmd0aDt3aGlsZShpbmRleC0tKSB7dmFyIGtleT1wcm9wc1tpbmRleF0scHJlZGljYXRlPXNvdXJjZVtrZXldLHZhbHVlPW9iamVjdFtrZXldO2lmKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKXtyZXR1cm4gZmFsc2U7fX1yZXR1cm4gdHJ1ZTt9O312YXIgYmFzZUNyZWF0ZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiBvYmplY3QoKXt9cmV0dXJuIGZ1bmN0aW9uKHByb3RvdHlwZSl7aWYoaXNPYmplY3QocHJvdG90eXBlKSl7b2JqZWN0LnByb3RvdHlwZSA9IHByb3RvdHlwZTt2YXIgcmVzdWx0PW5ldyBvYmplY3QoKTtvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO31yZXR1cm4gcmVzdWx0IHx8IHt9O307fSkoKTtmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYyx3YWl0LGFyZ3Mpe2lmKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIil7dGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO31yZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2Z1bmMuYXBwbHkodW5kZWZpbmVkLGFyZ3MpO30sd2FpdCk7fWZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LHZhbHVlcyxpdGVyYXRlZSxjb21wYXJhdG9yKXt2YXIgaW5kZXg9LTEsaW5jbHVkZXM9YXJyYXlJbmNsdWRlcyxpc0NvbW1vbj10cnVlLGxlbmd0aD1hcnJheS5sZW5ndGgscmVzdWx0PVtdLHZhbHVlc0xlbmd0aD12YWx1ZXMubGVuZ3RoO2lmKCFsZW5ndGgpe3JldHVybiByZXN1bHQ7fWlmKGl0ZXJhdGVlKXt2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7fWlmKGNvbXBhcmF0b3Ipe2luY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7aXNDb21tb24gPSBmYWxzZTt9ZWxzZSBpZih2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpe2luY2x1ZGVzID0gY2FjaGVIYXM7aXNDb21tb24gPSBmYWxzZTt2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTt9b3V0ZXI6IHdoaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIgdmFsdWU9YXJyYXlbaW5kZXhdLGNvbXB1dGVkPWl0ZXJhdGVlP2l0ZXJhdGVlKHZhbHVlKTp2YWx1ZTtpZihpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpe3ZhciB2YWx1ZXNJbmRleD12YWx1ZXNMZW5ndGg7d2hpbGUodmFsdWVzSW5kZXgtLSkge2lmKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKXtjb250aW51ZSBvdXRlcjt9fXJlc3VsdC5wdXNoKHZhbHVlKTt9ZWxzZSBpZighaW5jbHVkZXModmFsdWVzLGNvbXB1dGVkLGNvbXBhcmF0b3IpKXtyZXN1bHQucHVzaCh2YWx1ZSk7fX1yZXR1cm4gcmVzdWx0O312YXIgYmFzZUVhY2g9Y3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7dmFyIGJhc2VFYWNoUmlnaHQ9Y3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LHRydWUpO2Z1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLHByZWRpY2F0ZSl7dmFyIHJlc3VsdD10cnVlO2Jhc2VFYWNoKGNvbGxlY3Rpb24sZnVuY3Rpb24odmFsdWUsaW5kZXgsY29sbGVjdGlvbil7cmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsaW5kZXgsY29sbGVjdGlvbik7cmV0dXJuIHJlc3VsdDt9KTtyZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBiYXNlRmlsbChhcnJheSx2YWx1ZSxzdGFydCxlbmQpe3ZhciBsZW5ndGg9YXJyYXkubGVuZ3RoO3N0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtpZihzdGFydCA8IDApe3N0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoPzA6bGVuZ3RoICsgc3RhcnQ7fWVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aD9sZW5ndGg6dG9JbnRlZ2VyKGVuZCk7aWYoZW5kIDwgMCl7ZW5kICs9IGxlbmd0aDt9ZW5kID0gc3RhcnQgPiBlbmQ/MDp0b0xlbmd0aChlbmQpO3doaWxlKHN0YXJ0IDwgZW5kKSB7YXJyYXlbc3RhcnQrK10gPSB2YWx1ZTt9cmV0dXJuIGFycmF5O31mdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24scHJlZGljYXRlKXt2YXIgcmVzdWx0PVtdO2Jhc2VFYWNoKGNvbGxlY3Rpb24sZnVuY3Rpb24odmFsdWUsaW5kZXgsY29sbGVjdGlvbil7aWYocHJlZGljYXRlKHZhbHVlLGluZGV4LGNvbGxlY3Rpb24pKXtyZXN1bHQucHVzaCh2YWx1ZSk7fX0pO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LGlzRGVlcCxpc1N0cmljdCxyZXN1bHQpe3Jlc3VsdCB8fCAocmVzdWx0ID0gW10pO3ZhciBpbmRleD0tMSxsZW5ndGg9YXJyYXkubGVuZ3RoO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIgdmFsdWU9YXJyYXlbaW5kZXhdO2lmKGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSAmJiAoaXNTdHJpY3QgfHwgaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSl7aWYoaXNEZWVwKXtiYXNlRmxhdHRlbih2YWx1ZSxpc0RlZXAsaXNTdHJpY3QscmVzdWx0KTt9ZWxzZSB7YXJyYXlQdXNoKHJlc3VsdCx2YWx1ZSk7fX1lbHNlIGlmKCFpc1N0cmljdCl7cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7fX1yZXR1cm4gcmVzdWx0O312YXIgYmFzZUZvcj1jcmVhdGVCYXNlRm9yKCk7dmFyIGJhc2VGb3JSaWdodD1jcmVhdGVCYXNlRm9yKHRydWUpO2Z1bmN0aW9uIGJhc2VGb3JJbihvYmplY3QsaXRlcmF0ZWUpe3JldHVybiBvYmplY3QgPT0gbnVsbD9vYmplY3Q6YmFzZUZvcihvYmplY3QsaXRlcmF0ZWUsa2V5c0luKTt9ZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsaXRlcmF0ZWUpe3JldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsaXRlcmF0ZWUsa2V5cyk7fWZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsaXRlcmF0ZWUpe3JldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCxpdGVyYXRlZSxrZXlzKTt9ZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QscHJvcHMpe3JldHVybiBhcnJheUZpbHRlcihwcm9wcyxmdW5jdGlvbihrZXkpe3JldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTt9KTt9ZnVuY3Rpb24gYmFzZUdldChvYmplY3QscGF0aCl7cGF0aCA9IGlzS2V5KHBhdGgsb2JqZWN0KT9bcGF0aCArIFwiXCJdOmJhc2VUb1BhdGgocGF0aCk7dmFyIGluZGV4PTAsbGVuZ3RoPXBhdGgubGVuZ3RoO3doaWxlKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7b2JqZWN0ID0gb2JqZWN0W3BhdGhbaW5kZXgrK11dO31yZXR1cm4gaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoP29iamVjdDp1bmRlZmluZWQ7fWZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LGtleSl7cmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LGtleSkgfHwgdHlwZW9mIG9iamVjdCA9PSBcIm9iamVjdFwiICYmIGtleSBpbiBvYmplY3QgJiYgZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSA9PT0gbnVsbDt9ZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCxrZXkpe3JldHVybiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7fWZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlcixzdGFydCxlbmQpe3JldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LGVuZCk7fWZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLGl0ZXJhdGVlLGNvbXBhcmF0b3Ipe3ZhciBpbmNsdWRlcz1jb21wYXJhdG9yP2FycmF5SW5jbHVkZXNXaXRoOmFycmF5SW5jbHVkZXMsb3RoTGVuZ3RoPWFycmF5cy5sZW5ndGgsb3RoSW5kZXg9b3RoTGVuZ3RoLGNhY2hlcz1BcnJheShvdGhMZW5ndGgpLHJlc3VsdD1bXTt3aGlsZShvdGhJbmRleC0tKSB7dmFyIGFycmF5PWFycmF5c1tvdGhJbmRleF07aWYob3RoSW5kZXggJiYgaXRlcmF0ZWUpe2FycmF5ID0gYXJyYXlNYXAoYXJyYXksYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7fWNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgYXJyYXkubGVuZ3RoID49IDEyMCk/bmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KTp1bmRlZmluZWQ7fWFycmF5ID0gYXJyYXlzWzBdO3ZhciBpbmRleD0tMSxsZW5ndGg9YXJyYXkubGVuZ3RoLHNlZW49Y2FjaGVzWzBdO291dGVyOiB3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7dmFyIHZhbHVlPWFycmF5W2luZGV4XSxjb21wdXRlZD1pdGVyYXRlZT9pdGVyYXRlZSh2YWx1ZSk6dmFsdWU7aWYoIShzZWVuP2NhY2hlSGFzKHNlZW4sY29tcHV0ZWQpOmluY2x1ZGVzKHJlc3VsdCxjb21wdXRlZCxjb21wYXJhdG9yKSkpe3ZhciBvdGhJbmRleD1vdGhMZW5ndGg7d2hpbGUoLS1vdGhJbmRleCkge3ZhciBjYWNoZT1jYWNoZXNbb3RoSW5kZXhdO2lmKCEoY2FjaGU/Y2FjaGVIYXMoY2FjaGUsY29tcHV0ZWQpOmluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sY29tcHV0ZWQsY29tcGFyYXRvcikpKXtjb250aW51ZSBvdXRlcjt9fWlmKHNlZW4pe3NlZW4ucHVzaChjb21wdXRlZCk7fXJlc3VsdC5wdXNoKHZhbHVlKTt9fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3Qsc2V0dGVyLGl0ZXJhdGVlLGFjY3VtdWxhdG9yKXtiYXNlRm9yT3duKG9iamVjdCxmdW5jdGlvbih2YWx1ZSxrZXksb2JqZWN0KXtzZXR0ZXIoYWNjdW11bGF0b3IsaXRlcmF0ZWUodmFsdWUpLGtleSxvYmplY3QpO30pO3JldHVybiBhY2N1bXVsYXRvcjt9ZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QscGF0aCxhcmdzKXtpZighaXNLZXkocGF0aCxvYmplY3QpKXtwYXRoID0gYmFzZVRvUGF0aChwYXRoKTtvYmplY3QgPSBwYXJlbnQob2JqZWN0LHBhdGgpO3BhdGggPSBsYXN0KHBhdGgpO312YXIgZnVuYz1vYmplY3QgPT0gbnVsbD9vYmplY3Q6b2JqZWN0W3BhdGhdO3JldHVybiBmdW5jID09IG51bGw/dW5kZWZpbmVkOmFwcGx5KGZ1bmMsb2JqZWN0LGFyZ3MpO31mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSxvdGhlcixjdXN0b21pemVyLGJpdG1hc2ssc3RhY2spe2lmKHZhbHVlID09PSBvdGhlcil7cmV0dXJuIHRydWU7fWlmKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAhaXNPYmplY3QodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKXtyZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjt9cmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSxvdGhlcixiYXNlSXNFcXVhbCxjdXN0b21pemVyLGJpdG1hc2ssc3RhY2spO31mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LG90aGVyLGVxdWFsRnVuYyxjdXN0b21pemVyLGJpdG1hc2ssc3RhY2spe3ZhciBvYmpJc0Fycj1pc0FycmF5KG9iamVjdCksb3RoSXNBcnI9aXNBcnJheShvdGhlciksb2JqVGFnPWFycmF5VGFnLG90aFRhZz1hcnJheVRhZztpZighb2JqSXNBcnIpe29ialRhZyA9IGdldFRhZyhvYmplY3QpO2lmKG9ialRhZyA9PSBhcmdzVGFnKXtvYmpUYWcgPSBvYmplY3RUYWc7fWVsc2UgaWYob2JqVGFnICE9IG9iamVjdFRhZyl7b2JqSXNBcnIgPSBpc1R5cGVkQXJyYXkob2JqZWN0KTt9fWlmKCFvdGhJc0Fycil7b3RoVGFnID0gZ2V0VGFnKG90aGVyKTtpZihvdGhUYWcgPT0gYXJnc1RhZyl7b3RoVGFnID0gb2JqZWN0VGFnO31lbHNlIGlmKG90aFRhZyAhPSBvYmplY3RUYWcpe290aElzQXJyID0gaXNUeXBlZEFycmF5KG90aGVyKTt9fXZhciBvYmpJc09iaj1vYmpUYWcgPT0gb2JqZWN0VGFnICYmICFpc0hvc3RPYmplY3Qob2JqZWN0KSxvdGhJc09iaj1vdGhUYWcgPT0gb2JqZWN0VGFnICYmICFpc0hvc3RPYmplY3Qob3RoZXIpLGlzU2FtZVRhZz1vYmpUYWcgPT0gb3RoVGFnO2lmKGlzU2FtZVRhZyAmJiAhKG9iaklzQXJyIHx8IG9iaklzT2JqKSl7cmV0dXJuIGVxdWFsQnlUYWcob2JqZWN0LG90aGVyLG9ialRhZyxlcXVhbEZ1bmMsY3VzdG9taXplcixiaXRtYXNrKTt9dmFyIGlzUGFydGlhbD1iaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUc7aWYoIWlzUGFydGlhbCl7dmFyIG9iaklzV3JhcHBlZD1vYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCxcIl9fd3JhcHBlZF9fXCIpLG90aElzV3JhcHBlZD1vdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLFwiX193cmFwcGVkX19cIik7aWYob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCl7cmV0dXJuIGVxdWFsRnVuYyhvYmpJc1dyYXBwZWQ/b2JqZWN0LnZhbHVlKCk6b2JqZWN0LG90aElzV3JhcHBlZD9vdGhlci52YWx1ZSgpOm90aGVyLGN1c3RvbWl6ZXIsYml0bWFzayxzdGFjayk7fX1pZighaXNTYW1lVGFnKXtyZXR1cm4gZmFsc2U7fXN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjaygpKTtyZXR1cm4gKG9iaklzQXJyP2VxdWFsQXJyYXlzOmVxdWFsT2JqZWN0cykob2JqZWN0LG90aGVyLGVxdWFsRnVuYyxjdXN0b21pemVyLGJpdG1hc2ssc3RhY2spO31mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3Qsc291cmNlLG1hdGNoRGF0YSxjdXN0b21pemVyKXt2YXIgaW5kZXg9bWF0Y2hEYXRhLmxlbmd0aCxsZW5ndGg9aW5kZXgsbm9DdXN0b21pemVyPSFjdXN0b21pemVyO2lmKG9iamVjdCA9PSBudWxsKXtyZXR1cm4gIWxlbmd0aDt9b2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7d2hpbGUoaW5kZXgtLSkge3ZhciBkYXRhPW1hdGNoRGF0YVtpbmRleF07aWYobm9DdXN0b21pemVyICYmIGRhdGFbMl0/ZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dOiEoZGF0YVswXSBpbiBvYmplY3QpKXtyZXR1cm4gZmFsc2U7fX13aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7ZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07dmFyIGtleT1kYXRhWzBdLG9ialZhbHVlPW9iamVjdFtrZXldLHNyY1ZhbHVlPWRhdGFbMV07aWYobm9DdXN0b21pemVyICYmIGRhdGFbMl0pe2lmKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSl7cmV0dXJuIGZhbHNlO319ZWxzZSB7dmFyIHN0YWNrPW5ldyBTdGFjaygpLHJlc3VsdD1jdXN0b21pemVyP2N1c3RvbWl6ZXIob2JqVmFsdWUsc3JjVmFsdWUsa2V5LG9iamVjdCxzb3VyY2Usc3RhY2spOnVuZGVmaW5lZDtpZighKHJlc3VsdCA9PT0gdW5kZWZpbmVkP2Jhc2VJc0VxdWFsKHNyY1ZhbHVlLG9ialZhbHVlLGN1c3RvbWl6ZXIsVU5PUkRFUkVEX0NPTVBBUkVfRkxBRyB8IFBBUlRJQUxfQ09NUEFSRV9GTEFHLHN0YWNrKTpyZXN1bHQpKXtyZXR1cm4gZmFsc2U7fX19cmV0dXJuIHRydWU7fWZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSl7dmFyIHR5cGU9dHlwZW9mIHZhbHVlO2lmKHR5cGUgPT0gXCJmdW5jdGlvblwiKXtyZXR1cm4gdmFsdWU7fWlmKHZhbHVlID09IG51bGwpe3JldHVybiBpZGVudGl0eTt9aWYodHlwZSA9PSBcIm9iamVjdFwiKXtyZXR1cm4gaXNBcnJheSh2YWx1ZSk/YmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSx2YWx1ZVsxXSk6YmFzZU1hdGNoZXModmFsdWUpO31yZXR1cm4gcHJvcGVydHkodmFsdWUpO31mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3Qpe3JldHVybiBuYXRpdmVLZXlzKE9iamVjdChvYmplY3QpKTt9ZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3Qpe29iamVjdCA9IG9iamVjdCA9PSBudWxsP29iamVjdDpPYmplY3Qob2JqZWN0KTt2YXIgcmVzdWx0PVtdO2Zvcih2YXIga2V5IGluIG9iamVjdCkge3Jlc3VsdC5wdXNoKGtleSk7fXJldHVybiByZXN1bHQ7fWlmKGVudW1lcmF0ZSAmJiAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7dmFsdWVPZjoxfSxcInZhbHVlT2ZcIikpe2Jhc2VLZXlzSW4gPSBmdW5jdGlvbihvYmplY3Qpe3JldHVybiBpdGVyYXRvclRvQXJyYXkoZW51bWVyYXRlKG9iamVjdCkpO307fWZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbixpdGVyYXRlZSl7dmFyIGluZGV4PS0xLHJlc3VsdD1pc0FycmF5TGlrZShjb2xsZWN0aW9uKT9BcnJheShjb2xsZWN0aW9uLmxlbmd0aCk6W107YmFzZUVhY2goY29sbGVjdGlvbixmdW5jdGlvbih2YWx1ZSxrZXksY29sbGVjdGlvbil7cmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsa2V5LGNvbGxlY3Rpb24pO30pO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSl7dmFyIG1hdGNoRGF0YT1nZXRNYXRjaERhdGEoc291cmNlKTtpZihtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKXt2YXIga2V5PW1hdGNoRGF0YVswXVswXSx2YWx1ZT1tYXRjaERhdGFbMF1bMV07cmV0dXJuIGZ1bmN0aW9uKG9iamVjdCl7aWYob2JqZWN0ID09IG51bGwpe3JldHVybiBmYWxzZTt9cmV0dXJuIG9iamVjdFtrZXldID09PSB2YWx1ZSAmJiAodmFsdWUgIT09IHVuZGVmaW5lZCB8fCBrZXkgaW4gT2JqZWN0KG9iamVjdCkpO307fXJldHVybiBmdW5jdGlvbihvYmplY3Qpe3JldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3Qsc291cmNlLG1hdGNoRGF0YSk7fTt9ZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLHNyY1ZhbHVlKXtyZXR1cm4gZnVuY3Rpb24ob2JqZWN0KXt2YXIgb2JqVmFsdWU9Z2V0KG9iamVjdCxwYXRoKTtyZXR1cm4gb2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWU/aGFzSW4ob2JqZWN0LHBhdGgpOmJhc2VJc0VxdWFsKHNyY1ZhbHVlLG9ialZhbHVlLHVuZGVmaW5lZCxVTk9SREVSRURfQ09NUEFSRV9GTEFHIHwgUEFSVElBTF9DT01QQVJFX0ZMQUcpO307fWZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3Qsc291cmNlLHNyY0luZGV4LGN1c3RvbWl6ZXIsc3RhY2spe2lmKG9iamVjdCA9PT0gc291cmNlKXtyZXR1cm47fXZhciBwcm9wcz1pc0FycmF5KHNvdXJjZSkgfHwgaXNUeXBlZEFycmF5KHNvdXJjZSk/dW5kZWZpbmVkOmtleXNJbihzb3VyY2UpO2FycmF5RWFjaChwcm9wcyB8fCBzb3VyY2UsZnVuY3Rpb24oc3JjVmFsdWUsa2V5KXtpZihwcm9wcyl7a2V5ID0gc3JjVmFsdWU7c3JjVmFsdWUgPSBzb3VyY2Vba2V5XTt9aWYoaXNPYmplY3Qoc3JjVmFsdWUpKXtzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2soKSk7YmFzZU1lcmdlRGVlcChvYmplY3Qsc291cmNlLGtleSxzcmNJbmRleCxiYXNlTWVyZ2UsY3VzdG9taXplcixzdGFjayk7fWVsc2Uge3ZhciBuZXdWYWx1ZT1jdXN0b21pemVyP2N1c3RvbWl6ZXIob2JqZWN0W2tleV0sc3JjVmFsdWUsa2V5ICsgXCJcIixvYmplY3Qsc291cmNlLHN0YWNrKTp1bmRlZmluZWQ7aWYobmV3VmFsdWUgPT09IHVuZGVmaW5lZCl7bmV3VmFsdWUgPSBzcmNWYWx1ZTt9YXNzaWduTWVyZ2VWYWx1ZShvYmplY3Qsa2V5LG5ld1ZhbHVlKTt9fSk7fWZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LHNvdXJjZSxrZXksc3JjSW5kZXgsbWVyZ2VGdW5jLGN1c3RvbWl6ZXIsc3RhY2spe3ZhciBvYmpWYWx1ZT1vYmplY3Rba2V5XSxzcmNWYWx1ZT1zb3VyY2Vba2V5XSxzdGFja2VkPXN0YWNrLmdldChzcmNWYWx1ZSk7aWYoc3RhY2tlZCl7YXNzaWduTWVyZ2VWYWx1ZShvYmplY3Qsa2V5LHN0YWNrZWQpO3JldHVybjt9dmFyIG5ld1ZhbHVlPWN1c3RvbWl6ZXI/Y3VzdG9taXplcihvYmpWYWx1ZSxzcmNWYWx1ZSxrZXkgKyBcIlwiLG9iamVjdCxzb3VyY2Usc3RhY2spOnVuZGVmaW5lZCxpc0NvbW1vbj1uZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO2lmKGlzQ29tbW9uKXtuZXdWYWx1ZSA9IHNyY1ZhbHVlO2lmKGlzQXJyYXkoc3JjVmFsdWUpIHx8IGlzVHlwZWRBcnJheShzcmNWYWx1ZSkpe2lmKGlzQXJyYXkob2JqVmFsdWUpKXtuZXdWYWx1ZSA9IHNyY0luZGV4P2NvcHlBcnJheShvYmpWYWx1ZSk6b2JqVmFsdWU7fWVsc2UgaWYoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKXtuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7fWVsc2Uge2lzQ29tbW9uID0gZmFsc2U7bmV3VmFsdWUgPSBiYXNlQ2xvbmUoc3JjVmFsdWUpO319ZWxzZSBpZihpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpe2lmKGlzQXJndW1lbnRzKG9ialZhbHVlKSl7bmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTt9ZWxzZSBpZighaXNPYmplY3Qob2JqVmFsdWUpIHx8IHNyY0luZGV4ICYmIGlzRnVuY3Rpb24ob2JqVmFsdWUpKXtpc0NvbW1vbiA9IGZhbHNlO25ld1ZhbHVlID0gYmFzZUNsb25lKHNyY1ZhbHVlKTt9ZWxzZSB7bmV3VmFsdWUgPSBzcmNJbmRleD9iYXNlQ2xvbmUob2JqVmFsdWUpOm9ialZhbHVlO319ZWxzZSB7aXNDb21tb24gPSBmYWxzZTt9fXN0YWNrLnNldChzcmNWYWx1ZSxuZXdWYWx1ZSk7aWYoaXNDb21tb24pe21lcmdlRnVuYyhuZXdWYWx1ZSxzcmNWYWx1ZSxzcmNJbmRleCxjdXN0b21pemVyLHN0YWNrKTt9YXNzaWduTWVyZ2VWYWx1ZShvYmplY3Qsa2V5LG5ld1ZhbHVlKTt9ZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbixpdGVyYXRlZXMsb3JkZXJzKXt2YXIgaW5kZXg9LTEsdG9JdGVyYXRlZT1nZXRJdGVyYXRlZSgpO2l0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGg/aXRlcmF0ZWVzOkFycmF5KDEpLGZ1bmN0aW9uKGl0ZXJhdGVlKXtyZXR1cm4gdG9JdGVyYXRlZShpdGVyYXRlZSk7fSk7dmFyIHJlc3VsdD1iYXNlTWFwKGNvbGxlY3Rpb24sZnVuY3Rpb24odmFsdWUsa2V5LGNvbGxlY3Rpb24pe3ZhciBjcml0ZXJpYT1hcnJheU1hcChpdGVyYXRlZXMsZnVuY3Rpb24oaXRlcmF0ZWUpe3JldHVybiBpdGVyYXRlZSh2YWx1ZSk7fSk7cmV0dXJuIHtjcml0ZXJpYTpjcml0ZXJpYSxpbmRleDorK2luZGV4LHZhbHVlOnZhbHVlfTt9KTtyZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsZnVuY3Rpb24ob2JqZWN0LG90aGVyKXtyZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCxvdGhlcixvcmRlcnMpO30pO31mdW5jdGlvbiBiYXNlUGljayhvYmplY3QscHJvcHMpe29iamVjdCA9IE9iamVjdChvYmplY3QpO3JldHVybiBhcnJheVJlZHVjZShwcm9wcyxmdW5jdGlvbihyZXN1bHQsa2V5KXtpZihrZXkgaW4gb2JqZWN0KXtyZXN1bHRba2V5XSA9IG9iamVjdFtrZXldO31yZXR1cm4gcmVzdWx0O30se30pO31mdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCxwcmVkaWNhdGUpe3ZhciByZXN1bHQ9e307YmFzZUZvckluKG9iamVjdCxmdW5jdGlvbih2YWx1ZSxrZXkpe2lmKHByZWRpY2F0ZSh2YWx1ZSxrZXkpKXtyZXN1bHRba2V5XSA9IHZhbHVlO319KTtyZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KXtyZXR1cm4gZnVuY3Rpb24ob2JqZWN0KXtyZXR1cm4gb2JqZWN0ID09IG51bGw/dW5kZWZpbmVkOm9iamVjdFtrZXldO307fWZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCl7cmV0dXJuIGZ1bmN0aW9uKG9iamVjdCl7cmV0dXJuIGJhc2VHZXQob2JqZWN0LHBhdGgpO307fWZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LHZhbHVlcyl7cmV0dXJuIGJhc2VQdWxsQWxsQnkoYXJyYXksdmFsdWVzKTt9ZnVuY3Rpb24gYmFzZVB1bGxBbGxCeShhcnJheSx2YWx1ZXMsaXRlcmF0ZWUpe3ZhciBpbmRleD0tMSxsZW5ndGg9dmFsdWVzLmxlbmd0aCxzZWVuPWFycmF5O2lmKGl0ZXJhdGVlKXtzZWVuID0gYXJyYXlNYXAoYXJyYXksZnVuY3Rpb24odmFsdWUpe3JldHVybiBpdGVyYXRlZSh2YWx1ZSk7fSk7fXdoaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIgZnJvbUluZGV4PTAsdmFsdWU9dmFsdWVzW2luZGV4XSxjb21wdXRlZD1pdGVyYXRlZT9pdGVyYXRlZSh2YWx1ZSk6dmFsdWU7d2hpbGUoKGZyb21JbmRleCA9IGJhc2VJbmRleE9mKHNlZW4sY29tcHV0ZWQsZnJvbUluZGV4KSkgPiAtMSkge2lmKHNlZW4gIT09IGFycmF5KXtzcGxpY2UuY2FsbChzZWVuLGZyb21JbmRleCwxKTt9c3BsaWNlLmNhbGwoYXJyYXksZnJvbUluZGV4LDEpO319cmV0dXJuIGFycmF5O31mdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LGluZGV4ZXMpe3ZhciBsZW5ndGg9YXJyYXk/aW5kZXhlcy5sZW5ndGg6MCxsYXN0SW5kZXg9bGVuZ3RoIC0gMTt3aGlsZShsZW5ndGgtLSkge3ZhciBpbmRleD1pbmRleGVzW2xlbmd0aF07aWYobGFzdEluZGV4ID09IGxlbmd0aCB8fCBpbmRleCAhPSBwcmV2aW91cyl7dmFyIHByZXZpb3VzPWluZGV4O2lmKGlzSW5kZXgoaW5kZXgpKXtzcGxpY2UuY2FsbChhcnJheSxpbmRleCwxKTt9ZWxzZSBpZighaXNLZXkoaW5kZXgsYXJyYXkpKXt2YXIgcGF0aD1iYXNlVG9QYXRoKGluZGV4KSxvYmplY3Q9cGFyZW50KGFycmF5LHBhdGgpO2lmKG9iamVjdCAhPSBudWxsKXtkZWxldGUgb2JqZWN0W2xhc3QocGF0aCldO319ZWxzZSB7ZGVsZXRlIGFycmF5W2luZGV4XTt9fX1yZXR1cm4gYXJyYXk7fWZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsdXBwZXIpe3JldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7fWZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCxlbmQsc3RlcCxmcm9tUmlnaHQpe3ZhciBpbmRleD0tMSxsZW5ndGg9bmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwwKSxyZXN1bHQ9QXJyYXkobGVuZ3RoKTt3aGlsZShsZW5ndGgtLSkge3Jlc3VsdFtmcm9tUmlnaHQ/bGVuZ3RoOisraW5kZXhdID0gc3RhcnQ7c3RhcnQgKz0gc3RlcDt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYmFzZVNldChvYmplY3QscGF0aCx2YWx1ZSxjdXN0b21pemVyKXtwYXRoID0gaXNLZXkocGF0aCxvYmplY3QpP1twYXRoICsgXCJcIl06YmFzZVRvUGF0aChwYXRoKTt2YXIgaW5kZXg9LTEsbGVuZ3RoPXBhdGgubGVuZ3RoLGxhc3RJbmRleD1sZW5ndGggLSAxLG5lc3RlZD1vYmplY3Q7d2hpbGUobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge3ZhciBrZXk9cGF0aFtpbmRleF07aWYoaXNPYmplY3QobmVzdGVkKSl7dmFyIG5ld1ZhbHVlPXZhbHVlO2lmKGluZGV4ICE9IGxhc3RJbmRleCl7dmFyIG9ialZhbHVlPW5lc3RlZFtrZXldO25ld1ZhbHVlID0gY3VzdG9taXplcj9jdXN0b21pemVyKG9ialZhbHVlLGtleSxuZXN0ZWQpOnVuZGVmaW5lZDtpZihuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKXtuZXdWYWx1ZSA9IG9ialZhbHVlID09IG51bGw/aXNJbmRleChwYXRoW2luZGV4ICsgMV0pP1tdOnt9Om9ialZhbHVlO319YXNzaWduVmFsdWUobmVzdGVkLGtleSxuZXdWYWx1ZSk7fW5lc3RlZCA9IG5lc3RlZFtrZXldO31yZXR1cm4gb2JqZWN0O312YXIgYmFzZVNldERhdGE9IW1ldGFNYXA/aWRlbnRpdHk6ZnVuY3Rpb24oZnVuYyxkYXRhKXttZXRhTWFwLnNldChmdW5jLGRhdGEpO3JldHVybiBmdW5jO307ZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LHN0YXJ0LGVuZCl7dmFyIGluZGV4PS0xLGxlbmd0aD1hcnJheS5sZW5ndGg7aWYoc3RhcnQgPCAwKXtzdGFydCA9IC1zdGFydCA+IGxlbmd0aD8wOmxlbmd0aCArIHN0YXJ0O31lbmQgPSBlbmQgPiBsZW5ndGg/bGVuZ3RoOmVuZDtpZihlbmQgPCAwKXtlbmQgKz0gbGVuZ3RoO31sZW5ndGggPSBzdGFydCA+IGVuZD8wOmVuZCAtIHN0YXJ0ID4+PiAwO3N0YXJ0ID4+Pj0gMDt2YXIgcmVzdWx0PUFycmF5KGxlbmd0aCk7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3Jlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbixwcmVkaWNhdGUpe3ZhciByZXN1bHQ7YmFzZUVhY2goY29sbGVjdGlvbixmdW5jdGlvbih2YWx1ZSxpbmRleCxjb2xsZWN0aW9uKXtyZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsaW5kZXgsY29sbGVjdGlvbik7cmV0dXJuICFyZXN1bHQ7fSk7cmV0dXJuICEhcmVzdWx0O31mdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksdmFsdWUscmV0SGlnaGVzdCl7dmFyIGxvdz0wLGhpZ2g9YXJyYXk/YXJyYXkubGVuZ3RoOmxvdztpZih0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpe3doaWxlKGxvdyA8IGhpZ2gpIHt2YXIgbWlkPWxvdyArIGhpZ2ggPj4+IDEsY29tcHV0ZWQ9YXJyYXlbbWlkXTtpZigocmV0SGlnaGVzdD9jb21wdXRlZCA8PSB2YWx1ZTpjb21wdXRlZCA8IHZhbHVlKSAmJiBjb21wdXRlZCAhPT0gbnVsbCl7bG93ID0gbWlkICsgMTt9ZWxzZSB7aGlnaCA9IG1pZDt9fXJldHVybiBoaWdoO31yZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksdmFsdWUsaWRlbnRpdHkscmV0SGlnaGVzdCk7fWZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LHZhbHVlLGl0ZXJhdGVlLHJldEhpZ2hlc3Qpe3ZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO3ZhciBsb3c9MCxoaWdoPWFycmF5P2FycmF5Lmxlbmd0aDowLHZhbElzTmFOPXZhbHVlICE9PSB2YWx1ZSx2YWxJc051bGw9dmFsdWUgPT09IG51bGwsdmFsSXNVbmRlZj12YWx1ZSA9PT0gdW5kZWZpbmVkO3doaWxlKGxvdyA8IGhpZ2gpIHt2YXIgbWlkPW5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLGNvbXB1dGVkPWl0ZXJhdGVlKGFycmF5W21pZF0pLGlzRGVmPWNvbXB1dGVkICE9PSB1bmRlZmluZWQsaXNSZWZsZXhpdmU9Y29tcHV0ZWQgPT09IGNvbXB1dGVkO2lmKHZhbElzTmFOKXt2YXIgc2V0TG93PWlzUmVmbGV4aXZlIHx8IHJldEhpZ2hlc3Q7fWVsc2UgaWYodmFsSXNOdWxsKXtzZXRMb3cgPSBpc1JlZmxleGl2ZSAmJiBpc0RlZiAmJiAocmV0SGlnaGVzdCB8fCBjb21wdXRlZCAhPSBudWxsKTt9ZWxzZSBpZih2YWxJc1VuZGVmKXtzZXRMb3cgPSBpc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBpc0RlZik7fWVsc2UgaWYoY29tcHV0ZWQgPT0gbnVsbCl7c2V0TG93ID0gZmFsc2U7fWVsc2Uge3NldExvdyA9IHJldEhpZ2hlc3Q/Y29tcHV0ZWQgPD0gdmFsdWU6Y29tcHV0ZWQgPCB2YWx1ZTt9aWYoc2V0TG93KXtsb3cgPSBtaWQgKyAxO31lbHNlIHtoaWdoID0gbWlkO319cmV0dXJuIG5hdGl2ZU1pbihoaWdoLE1BWF9BUlJBWV9JTkRFWCk7fWZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5KXtyZXR1cm4gYmFzZVNvcnRlZFVuaXFCeShhcnJheSk7fWZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxQnkoYXJyYXksaXRlcmF0ZWUpe3ZhciBpbmRleD0wLGxlbmd0aD1hcnJheS5sZW5ndGgsdmFsdWU9YXJyYXlbMF0sY29tcHV0ZWQ9aXRlcmF0ZWU/aXRlcmF0ZWUodmFsdWUpOnZhbHVlLHNlZW49Y29tcHV0ZWQscmVzSW5kZXg9MCxyZXN1bHQ9W3ZhbHVlXTt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7dmFsdWUgPSBhcnJheVtpbmRleF0sY29tcHV0ZWQgPSBpdGVyYXRlZT9pdGVyYXRlZSh2YWx1ZSk6dmFsdWU7aWYoIWVxKGNvbXB1dGVkLHNlZW4pKXtzZWVuID0gY29tcHV0ZWQ7cmVzdWx0WysrcmVzSW5kZXhdID0gdmFsdWU7fX1yZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBiYXNlVG9QYXRoKHZhbHVlKXtyZXR1cm4gaXNBcnJheSh2YWx1ZSk/dmFsdWU6c3RyaW5nVG9QYXRoKHZhbHVlKTt9ZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksaXRlcmF0ZWUsY29tcGFyYXRvcil7dmFyIGluZGV4PS0xLGluY2x1ZGVzPWFycmF5SW5jbHVkZXMsbGVuZ3RoPWFycmF5Lmxlbmd0aCxpc0NvbW1vbj10cnVlLHJlc3VsdD1bXSxzZWVuPXJlc3VsdDtpZihjb21wYXJhdG9yKXtpc0NvbW1vbiA9IGZhbHNlO2luY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7fWVsc2UgaWYobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpe3ZhciBzZXQ9aXRlcmF0ZWU/bnVsbDpjcmVhdGVTZXQoYXJyYXkpO2lmKHNldCl7cmV0dXJuIHNldFRvQXJyYXkoc2V0KTt9aXNDb21tb24gPSBmYWxzZTtpbmNsdWRlcyA9IGNhY2hlSGFzO3NlZW4gPSBuZXcgU2V0Q2FjaGUoKTt9ZWxzZSB7c2VlbiA9IGl0ZXJhdGVlP1tdOnJlc3VsdDt9b3V0ZXI6IHdoaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIgdmFsdWU9YXJyYXlbaW5kZXhdLGNvbXB1dGVkPWl0ZXJhdGVlP2l0ZXJhdGVlKHZhbHVlKTp2YWx1ZTtpZihpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpe3ZhciBzZWVuSW5kZXg9c2Vlbi5sZW5ndGg7d2hpbGUoc2VlbkluZGV4LS0pIHtpZihzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKXtjb250aW51ZSBvdXRlcjt9fWlmKGl0ZXJhdGVlKXtzZWVuLnB1c2goY29tcHV0ZWQpO31yZXN1bHQucHVzaCh2YWx1ZSk7fWVsc2UgaWYoIWluY2x1ZGVzKHNlZW4sY29tcHV0ZWQsY29tcGFyYXRvcikpe2lmKHNlZW4gIT09IHJlc3VsdCl7c2Vlbi5wdXNoKGNvbXB1dGVkKTt9cmVzdWx0LnB1c2godmFsdWUpO319cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCxwYXRoKXtwYXRoID0gaXNLZXkocGF0aCxvYmplY3QpP1twYXRoICsgXCJcIl06YmFzZVRvUGF0aChwYXRoKTtvYmplY3QgPSBwYXJlbnQob2JqZWN0LHBhdGgpO3ZhciBrZXk9bGFzdChwYXRoKTtyZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzKG9iamVjdCxrZXkpP2RlbGV0ZSBvYmplY3Rba2V5XTp0cnVlO31mdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXkscHJlZGljYXRlLGlzRHJvcCxmcm9tUmlnaHQpe3ZhciBsZW5ndGg9YXJyYXkubGVuZ3RoLGluZGV4PWZyb21SaWdodD9sZW5ndGg6LTE7d2hpbGUoKGZyb21SaWdodD9pbmRleC0tOisraW5kZXggPCBsZW5ndGgpICYmIHByZWRpY2F0ZShhcnJheVtpbmRleF0saW5kZXgsYXJyYXkpKSB7fXJldHVybiBpc0Ryb3A/YmFzZVNsaWNlKGFycmF5LGZyb21SaWdodD8wOmluZGV4LGZyb21SaWdodD9pbmRleCArIDE6bGVuZ3RoKTpiYXNlU2xpY2UoYXJyYXksZnJvbVJpZ2h0P2luZGV4ICsgMTowLGZyb21SaWdodD9sZW5ndGg6aW5kZXgpO31mdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLGFjdGlvbnMpe3ZhciByZXN1bHQ9dmFsdWU7aWYocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpe3Jlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO31yZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucyxmdW5jdGlvbihyZXN1bHQsYWN0aW9uKXtyZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsYXJyYXlQdXNoKFtyZXN1bHRdLGFjdGlvbi5hcmdzKSk7fSxyZXN1bHQpO31mdW5jdGlvbiBiYXNlWG9yKGFycmF5cyxpdGVyYXRlZSxjb21wYXJhdG9yKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPWFycmF5cy5sZW5ndGg7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3ZhciByZXN1bHQ9cmVzdWx0P2FycmF5UHVzaChiYXNlRGlmZmVyZW5jZShyZXN1bHQsYXJyYXlzW2luZGV4XSxpdGVyYXRlZSxjb21wYXJhdG9yKSxiYXNlRGlmZmVyZW5jZShhcnJheXNbaW5kZXhdLHJlc3VsdCxpdGVyYXRlZSxjb21wYXJhdG9yKSk6YXJyYXlzW2luZGV4XTt9cmV0dXJuIHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoP2Jhc2VVbmlxKHJlc3VsdCxpdGVyYXRlZSxjb21wYXJhdG9yKTpbXTt9ZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcyx2YWx1ZXMsYXNzaWduRnVuYyl7dmFyIGluZGV4PS0xLGxlbmd0aD1wcm9wcy5sZW5ndGgsdmFsc0xlbmd0aD12YWx1ZXMubGVuZ3RoLHJlc3VsdD17fTt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7YXNzaWduRnVuYyhyZXN1bHQscHJvcHNbaW5kZXhdLGluZGV4IDwgdmFsc0xlbmd0aD92YWx1ZXNbaW5kZXhdOnVuZGVmaW5lZCk7fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlcil7dmFyIEN0b3I9YnVmZmVyLmNvbnN0cnVjdG9yLHJlc3VsdD1uZXcgQ3RvcihidWZmZXIuYnl0ZUxlbmd0aCksdmlldz1uZXcgVWludDhBcnJheShyZXN1bHQpO3ZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGNsb25lTWFwKG1hcCl7dmFyIEN0b3I9bWFwLmNvbnN0cnVjdG9yO3JldHVybiBhcnJheVJlZHVjZShtYXBUb0FycmF5KG1hcCksYWRkTWFwRW50cnksbmV3IEN0b3IoKSk7fWZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCl7dmFyIEN0b3I9cmVnZXhwLmNvbnN0cnVjdG9yLHJlc3VsdD1uZXcgQ3RvcihyZWdleHAuc291cmNlLHJlRmxhZ3MuZXhlYyhyZWdleHApKTtyZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtyZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBjbG9uZVNldChzZXQpe3ZhciBDdG9yPXNldC5jb25zdHJ1Y3RvcjtyZXR1cm4gYXJyYXlSZWR1Y2Uoc2V0VG9BcnJheShzZXQpLGFkZFNldEVudHJ5LG5ldyBDdG9yKCkpO31mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpe3JldHVybiBTeW1ib2w/T2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKTp7fTt9ZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksaXNEZWVwKXt2YXIgYnVmZmVyPXR5cGVkQXJyYXkuYnVmZmVyLEN0b3I9dHlwZWRBcnJheS5jb25zdHJ1Y3RvcjtyZXR1cm4gbmV3IEN0b3IoaXNEZWVwP2Nsb25lQnVmZmVyKGJ1ZmZlcik6YnVmZmVyLHR5cGVkQXJyYXkuYnl0ZU9mZnNldCx0eXBlZEFycmF5Lmxlbmd0aCk7fWZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MscGFydGlhbHMsaG9sZGVycyl7dmFyIGhvbGRlcnNMZW5ndGg9aG9sZGVycy5sZW5ndGgsYXJnc0luZGV4PS0xLGFyZ3NMZW5ndGg9bmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwwKSxsZWZ0SW5kZXg9LTEsbGVmdExlbmd0aD1wYXJ0aWFscy5sZW5ndGgscmVzdWx0PUFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKTt3aGlsZSgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtyZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07fXdoaWxlKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge3Jlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO313aGlsZShhcmdzTGVuZ3RoLS0pIHtyZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncyxwYXJ0aWFscyxob2xkZXJzKXt2YXIgaG9sZGVyc0luZGV4PS0xLGhvbGRlcnNMZW5ndGg9aG9sZGVycy5sZW5ndGgsYXJnc0luZGV4PS0xLGFyZ3NMZW5ndGg9bmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwwKSxyaWdodEluZGV4PS0xLHJpZ2h0TGVuZ3RoPXBhcnRpYWxzLmxlbmd0aCxyZXN1bHQ9QXJyYXkoYXJnc0xlbmd0aCArIHJpZ2h0TGVuZ3RoKTt3aGlsZSgrK2FyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtyZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTt9dmFyIG9mZnNldD1hcmdzSW5kZXg7d2hpbGUoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtyZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTt9d2hpbGUoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7cmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSxhcnJheSl7dmFyIGluZGV4PS0xLGxlbmd0aD1zb3VyY2UubGVuZ3RoO2FycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHthcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO31yZXR1cm4gYXJyYXk7fWZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLHByb3BzLG9iamVjdCl7cmV0dXJuIGNvcHlPYmplY3RXaXRoKHNvdXJjZSxwcm9wcyxvYmplY3QpO31mdW5jdGlvbiBjb3B5T2JqZWN0V2l0aChzb3VyY2UscHJvcHMsb2JqZWN0LGN1c3RvbWl6ZXIpe29iamVjdCB8fCAob2JqZWN0ID0ge30pO3ZhciBpbmRleD0tMSxsZW5ndGg9cHJvcHMubGVuZ3RoO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIga2V5PXByb3BzW2luZGV4XSxuZXdWYWx1ZT1jdXN0b21pemVyP2N1c3RvbWl6ZXIob2JqZWN0W2tleV0sc291cmNlW2tleV0sa2V5LG9iamVjdCxzb3VyY2UpOnNvdXJjZVtrZXldO2Fzc2lnblZhbHVlKG9iamVjdCxrZXksbmV3VmFsdWUpO31yZXR1cm4gb2JqZWN0O31mdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2Usb2JqZWN0KXtyZXR1cm4gY29weU9iamVjdChzb3VyY2UsZ2V0U3ltYm9scyhzb3VyY2UpLG9iamVjdCk7fWZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLGluaXRpYWxpemVyKXtyZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbixpdGVyYXRlZSl7dmFyIGZ1bmM9aXNBcnJheShjb2xsZWN0aW9uKT9hcnJheUFnZ3JlZ2F0b3I6YmFzZUFnZ3JlZ2F0b3IsYWNjdW11bGF0b3I9aW5pdGlhbGl6ZXI/aW5pdGlhbGl6ZXIoKTp7fTtyZXR1cm4gZnVuYyhjb2xsZWN0aW9uLHNldHRlcixnZXRJdGVyYXRlZShpdGVyYXRlZSksYWNjdW11bGF0b3IpO307fWZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKXtyZXR1cm4gcmVzdChmdW5jdGlvbihvYmplY3Qsc291cmNlcyl7dmFyIGluZGV4PS0xLGxlbmd0aD1zb3VyY2VzLmxlbmd0aCxjdXN0b21pemVyPWxlbmd0aCA+IDE/c291cmNlc1tsZW5ndGggLSAxXTp1bmRlZmluZWQsZ3VhcmQ9bGVuZ3RoID4gMj9zb3VyY2VzWzJdOnVuZGVmaW5lZDtjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gXCJmdW5jdGlvblwiPyhsZW5ndGgtLSxjdXN0b21pemVyKTp1bmRlZmluZWQ7aWYoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSxzb3VyY2VzWzFdLGd1YXJkKSl7Y3VzdG9taXplciA9IGxlbmd0aCA8IDM/dW5kZWZpbmVkOmN1c3RvbWl6ZXI7bGVuZ3RoID0gMTt9b2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3ZhciBzb3VyY2U9c291cmNlc1tpbmRleF07aWYoc291cmNlKXthc3NpZ25lcihvYmplY3Qsc291cmNlLGluZGV4LGN1c3RvbWl6ZXIpO319cmV0dXJuIG9iamVjdDt9KTt9ZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsZnJvbVJpZ2h0KXtyZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbixpdGVyYXRlZSl7aWYoY29sbGVjdGlvbiA9PSBudWxsKXtyZXR1cm4gY29sbGVjdGlvbjt9aWYoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKXtyZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbixpdGVyYXRlZSk7fXZhciBsZW5ndGg9Y29sbGVjdGlvbi5sZW5ndGgsaW5kZXg9ZnJvbVJpZ2h0P2xlbmd0aDotMSxpdGVyYWJsZT1PYmplY3QoY29sbGVjdGlvbik7d2hpbGUoZnJvbVJpZ2h0P2luZGV4LS06KytpbmRleCA8IGxlbmd0aCkge2lmKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSxpbmRleCxpdGVyYWJsZSkgPT09IGZhbHNlKXticmVhazt9fXJldHVybiBjb2xsZWN0aW9uO307fWZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KXtyZXR1cm4gZnVuY3Rpb24ob2JqZWN0LGl0ZXJhdGVlLGtleXNGdW5jKXt2YXIgaW5kZXg9LTEsaXRlcmFibGU9T2JqZWN0KG9iamVjdCkscHJvcHM9a2V5c0Z1bmMob2JqZWN0KSxsZW5ndGg9cHJvcHMubGVuZ3RoO3doaWxlKGxlbmd0aC0tKSB7dmFyIGtleT1wcm9wc1tmcm9tUmlnaHQ/bGVuZ3RoOisraW5kZXhdO2lmKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sa2V5LGl0ZXJhYmxlKSA9PT0gZmFsc2Upe2JyZWFrO319cmV0dXJuIG9iamVjdDt9O31mdW5jdGlvbiBjcmVhdGVCYXNlV3JhcHBlcihmdW5jLGJpdG1hc2ssdGhpc0FyZyl7dmFyIGlzQmluZD1iaXRtYXNrICYgQklORF9GTEFHLEN0b3I9Y3JlYXRlQ3RvcldyYXBwZXIoZnVuYyk7ZnVuY3Rpb24gd3JhcHBlcigpe3ZhciBmbj10aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXI/Q3RvcjpmdW5jO3JldHVybiBmbi5hcHBseShpc0JpbmQ/dGhpc0FyZzp0aGlzLGFyZ3VtZW50cyk7fXJldHVybiB3cmFwcGVyO31mdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSl7cmV0dXJuIGZ1bmN0aW9uKHN0cmluZyl7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTt2YXIgc3RyU3ltYm9scz1yZUhhc0NvbXBsZXhTeW1ib2wudGVzdChzdHJpbmcpP3N0cmluZ1RvQXJyYXkoc3RyaW5nKTp1bmRlZmluZWQsY2hyPXN0clN5bWJvbHM/c3RyU3ltYm9sc1swXTpzdHJpbmcuY2hhckF0KDApLHRyYWlsaW5nPXN0clN5bWJvbHM/c3RyU3ltYm9scy5zbGljZSgxKS5qb2luKFwiXCIpOnN0cmluZy5zbGljZSgxKTtyZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZzt9O31mdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKXtyZXR1cm4gZnVuY3Rpb24oc3RyaW5nKXtyZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykpLGNhbGxiYWNrLFwiXCIpO307fWZ1bmN0aW9uIGNyZWF0ZUN0b3JXcmFwcGVyKEN0b3Ipe3JldHVybiBmdW5jdGlvbigpe3ZhciBhcmdzPWFyZ3VtZW50cztzd2l0Y2goYXJncy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IEN0b3IoKTtjYXNlIDE6cmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO2Nhc2UgMjpyZXR1cm4gbmV3IEN0b3IoYXJnc1swXSxhcmdzWzFdKTtjYXNlIDM6cmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sYXJnc1sxXSxhcmdzWzJdKTtjYXNlIDQ6cmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sYXJnc1sxXSxhcmdzWzJdLGFyZ3NbM10pO2Nhc2UgNTpyZXR1cm4gbmV3IEN0b3IoYXJnc1swXSxhcmdzWzFdLGFyZ3NbMl0sYXJnc1szXSxhcmdzWzRdKTtjYXNlIDY6cmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sYXJnc1sxXSxhcmdzWzJdLGFyZ3NbM10sYXJnc1s0XSxhcmdzWzVdKTtjYXNlIDc6cmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sYXJnc1sxXSxhcmdzWzJdLGFyZ3NbM10sYXJnc1s0XSxhcmdzWzVdLGFyZ3NbNl0pO312YXIgdGhpc0JpbmRpbmc9YmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSkscmVzdWx0PUN0b3IuYXBwbHkodGhpc0JpbmRpbmcsYXJncyk7cmV0dXJuIGlzT2JqZWN0KHJlc3VsdCk/cmVzdWx0OnRoaXNCaW5kaW5nO307fWZ1bmN0aW9uIGNyZWF0ZUN1cnJ5V3JhcHBlcihmdW5jLGJpdG1hc2ssYXJpdHkpe3ZhciBDdG9yPWNyZWF0ZUN0b3JXcmFwcGVyKGZ1bmMpO2Z1bmN0aW9uIHdyYXBwZXIoKXt2YXIgbGVuZ3RoPWFyZ3VtZW50cy5sZW5ndGgsaW5kZXg9bGVuZ3RoLGFyZ3M9QXJyYXkobGVuZ3RoKSxmbj10aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXI/Q3RvcjpmdW5jLHBsYWNlaG9sZGVyPXdyYXBwZXIucGxhY2Vob2xkZXI7d2hpbGUoaW5kZXgtLSkge2FyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTt9dmFyIGhvbGRlcnM9bGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcj9bXTpyZXBsYWNlSG9sZGVycyhhcmdzLHBsYWNlaG9sZGVyKTtsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7cmV0dXJuIGxlbmd0aCA8IGFyaXR5P2NyZWF0ZVJlY3VycnlXcmFwcGVyKGZ1bmMsYml0bWFzayxjcmVhdGVIeWJyaWRXcmFwcGVyLHBsYWNlaG9sZGVyLHVuZGVmaW5lZCxhcmdzLGhvbGRlcnMsdW5kZWZpbmVkLHVuZGVmaW5lZCxhcml0eSAtIGxlbmd0aCk6YXBwbHkoZm4sdGhpcyxhcmdzKTt9cmV0dXJuIHdyYXBwZXI7fWZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KXtyZXR1cm4gcmVzdChmdW5jdGlvbihmdW5jcyl7ZnVuY3MgPSBiYXNlRmxhdHRlbihmdW5jcyk7dmFyIGxlbmd0aD1mdW5jcy5sZW5ndGgsaW5kZXg9bGVuZ3RoLHByZXJlcT1Mb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O2lmKGZyb21SaWdodCl7ZnVuY3MucmV2ZXJzZSgpO313aGlsZShpbmRleC0tKSB7dmFyIGZ1bmM9ZnVuY3NbaW5kZXhdO2lmKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIil7dGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO31pZihwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gXCJ3cmFwcGVyXCIpe3ZhciB3cmFwcGVyPW5ldyBMb2Rhc2hXcmFwcGVyKFtdLHRydWUpO319aW5kZXggPSB3cmFwcGVyP2luZGV4Omxlbmd0aDt3aGlsZSgrK2luZGV4IDwgbGVuZ3RoKSB7ZnVuYyA9IGZ1bmNzW2luZGV4XTt2YXIgZnVuY05hbWU9Z2V0RnVuY05hbWUoZnVuYyksZGF0YT1mdW5jTmFtZSA9PSBcIndyYXBwZXJcIj9nZXREYXRhKGZ1bmMpOnVuZGVmaW5lZDtpZihkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiYgZGF0YVsxXSA9PSAoQVJZX0ZMQUcgfCBDVVJSWV9GTEFHIHwgUEFSVElBTF9GTEFHIHwgUkVBUkdfRkxBRykgJiYgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMSl7d3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsZGF0YVszXSk7fWVsc2Uge3dyYXBwZXIgPSBmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYyk/d3JhcHBlcltmdW5jTmFtZV0oKTp3cmFwcGVyLnRocnUoZnVuYyk7fX1yZXR1cm4gZnVuY3Rpb24oKXt2YXIgYXJncz1hcmd1bWVudHMsdmFsdWU9YXJnc1swXTtpZih3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpe3JldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO312YXIgaW5kZXg9MCxyZXN1bHQ9bGVuZ3RoP2Z1bmNzW2luZGV4XS5hcHBseSh0aGlzLGFyZ3MpOnZhbHVlO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHtyZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLHJlc3VsdCk7fXJldHVybiByZXN1bHQ7fTt9KTt9ZnVuY3Rpb24gY3JlYXRlSHlicmlkV3JhcHBlcihmdW5jLGJpdG1hc2ssdGhpc0FyZyxwYXJ0aWFscyxob2xkZXJzLHBhcnRpYWxzUmlnaHQsaG9sZGVyc1JpZ2h0LGFyZ1BvcyxhcnksYXJpdHkpe3ZhciBpc0FyeT1iaXRtYXNrICYgQVJZX0ZMQUcsaXNCaW5kPWJpdG1hc2sgJiBCSU5EX0ZMQUcsaXNCaW5kS2V5PWJpdG1hc2sgJiBCSU5EX0tFWV9GTEFHLGlzQ3Vycnk9Yml0bWFzayAmIENVUlJZX0ZMQUcsaXNDdXJyeVJpZ2h0PWJpdG1hc2sgJiBDVVJSWV9SSUdIVF9GTEFHLGlzRmxpcD1iaXRtYXNrICYgRkxJUF9GTEFHLEN0b3I9aXNCaW5kS2V5P3VuZGVmaW5lZDpjcmVhdGVDdG9yV3JhcHBlcihmdW5jKTtmdW5jdGlvbiB3cmFwcGVyKCl7dmFyIGxlbmd0aD1hcmd1bWVudHMubGVuZ3RoLGluZGV4PWxlbmd0aCxhcmdzPUFycmF5KGxlbmd0aCk7d2hpbGUoaW5kZXgtLSkge2FyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTt9aWYocGFydGlhbHMpe2FyZ3MgPSBjb21wb3NlQXJncyhhcmdzLHBhcnRpYWxzLGhvbGRlcnMpO31pZihwYXJ0aWFsc1JpZ2h0KXthcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLHBhcnRpYWxzUmlnaHQsaG9sZGVyc1JpZ2h0KTt9aWYoaXNDdXJyeSB8fCBpc0N1cnJ5UmlnaHQpe3ZhciBwbGFjZWhvbGRlcj13cmFwcGVyLnBsYWNlaG9sZGVyLGFyZ3NIb2xkZXJzPXJlcGxhY2VIb2xkZXJzKGFyZ3MscGxhY2Vob2xkZXIpO2xlbmd0aCAtPSBhcmdzSG9sZGVycy5sZW5ndGg7aWYobGVuZ3RoIDwgYXJpdHkpe3JldHVybiBjcmVhdGVSZWN1cnJ5V3JhcHBlcihmdW5jLGJpdG1hc2ssY3JlYXRlSHlicmlkV3JhcHBlcixwbGFjZWhvbGRlcix0aGlzQXJnLGFyZ3MsYXJnc0hvbGRlcnMsYXJnUG9zLGFyeSxhcml0eSAtIGxlbmd0aCk7fX12YXIgdGhpc0JpbmRpbmc9aXNCaW5kP3RoaXNBcmc6dGhpcyxmbj1pc0JpbmRLZXk/dGhpc0JpbmRpbmdbZnVuY106ZnVuYztpZihhcmdQb3Mpe2FyZ3MgPSByZW9yZGVyKGFyZ3MsYXJnUG9zKTt9ZWxzZSBpZihpc0ZsaXAgJiYgYXJncy5sZW5ndGggPiAxKXthcmdzLnJldmVyc2UoKTt9aWYoaXNBcnkgJiYgYXJ5IDwgYXJncy5sZW5ndGgpe2FyZ3MubGVuZ3RoID0gYXJ5O31pZih0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpe2ZuID0gQ3RvciB8fCBjcmVhdGVDdG9yV3JhcHBlcihmbik7fXJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZyxhcmdzKTt9cmV0dXJuIHdyYXBwZXI7fWZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlcix0b0l0ZXJhdGVlKXtyZXR1cm4gZnVuY3Rpb24ob2JqZWN0LGl0ZXJhdGVlKXtyZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCxzZXR0ZXIsdG9JdGVyYXRlZShpdGVyYXRlZSkse30pO307fWZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKXtyZXR1cm4gcmVzdChmdW5jdGlvbihpdGVyYXRlZXMpe2l0ZXJhdGVlcyA9IGFycmF5TWFwKGJhc2VGbGF0dGVuKGl0ZXJhdGVlcyksZ2V0SXRlcmF0ZWUoKSk7cmV0dXJuIHJlc3QoZnVuY3Rpb24oYXJncyl7dmFyIHRoaXNBcmc9dGhpcztyZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcyxmdW5jdGlvbihpdGVyYXRlZSl7cmV0dXJuIGFwcGx5KGl0ZXJhdGVlLHRoaXNBcmcsYXJncyk7fSk7fSk7fSk7fWZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcoc3RyaW5nLGxlbmd0aCxjaGFycyl7bGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7dmFyIHN0ckxlbmd0aD1zdHJpbmdTaXplKHN0cmluZyk7aWYoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKXtyZXR1cm4gXCJcIjt9dmFyIHBhZExlbmd0aD1sZW5ndGggLSBzdHJMZW5ndGg7Y2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkP1wiIFwiOmNoYXJzICsgXCJcIjt2YXIgcmVzdWx0PXJlcGVhdChjaGFycyxuYXRpdmVDZWlsKHBhZExlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7cmV0dXJuIHJlSGFzQ29tcGxleFN5bWJvbC50ZXN0KGNoYXJzKT9zdHJpbmdUb0FycmF5KHJlc3VsdCkuc2xpY2UoMCxwYWRMZW5ndGgpLmpvaW4oXCJcIik6cmVzdWx0LnNsaWNlKDAscGFkTGVuZ3RoKTt9ZnVuY3Rpb24gY3JlYXRlUGFydGlhbFdyYXBwZXIoZnVuYyxiaXRtYXNrLHRoaXNBcmcscGFydGlhbHMpe3ZhciBpc0JpbmQ9Yml0bWFzayAmIEJJTkRfRkxBRyxDdG9yPWNyZWF0ZUN0b3JXcmFwcGVyKGZ1bmMpO2Z1bmN0aW9uIHdyYXBwZXIoKXt2YXIgYXJnc0luZGV4PS0xLGFyZ3NMZW5ndGg9YXJndW1lbnRzLmxlbmd0aCxsZWZ0SW5kZXg9LTEsbGVmdExlbmd0aD1wYXJ0aWFscy5sZW5ndGgsYXJncz1BcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksZm49dGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyP0N0b3I6ZnVuYzt3aGlsZSgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHthcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO313aGlsZShhcmdzTGVuZ3RoLS0pIHthcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07fXJldHVybiBhcHBseShmbixpc0JpbmQ/dGhpc0FyZzp0aGlzLGFyZ3MpO31yZXR1cm4gd3JhcHBlcjt9ZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KXtyZXR1cm4gZnVuY3Rpb24oc3RhcnQsZW5kLHN0ZXApe2lmKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gXCJudW1iZXJcIiAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCxlbmQsc3RlcCkpe2VuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7fXN0YXJ0ID0gdG9OdW1iZXIoc3RhcnQpO3N0YXJ0ID0gc3RhcnQgPT09IHN0YXJ0P3N0YXJ0OjA7aWYoZW5kID09PSB1bmRlZmluZWQpe2VuZCA9IHN0YXJ0O3N0YXJ0ID0gMDt9ZWxzZSB7ZW5kID0gdG9OdW1iZXIoZW5kKSB8fCAwO31zdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkP3N0YXJ0IDwgZW5kPzE6LTE6dG9OdW1iZXIoc3RlcCkgfHwgMDtyZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LGVuZCxzdGVwLGZyb21SaWdodCk7fTt9ZnVuY3Rpb24gY3JlYXRlUmVjdXJyeVdyYXBwZXIoZnVuYyxiaXRtYXNrLHdyYXBGdW5jLHBsYWNlaG9sZGVyLHRoaXNBcmcscGFydGlhbHMsaG9sZGVycyxhcmdQb3MsYXJ5LGFyaXR5KXt2YXIgaXNDdXJyeT1iaXRtYXNrICYgQ1VSUllfRkxBRyxuZXdBcmdQb3M9YXJnUG9zP2NvcHlBcnJheShhcmdQb3MpOnVuZGVmaW5lZCxuZXdzSG9sZGVycz1pc0N1cnJ5P2hvbGRlcnM6dW5kZWZpbmVkLG5ld0hvbGRlcnNSaWdodD1pc0N1cnJ5P3VuZGVmaW5lZDpob2xkZXJzLG5ld1BhcnRpYWxzPWlzQ3Vycnk/cGFydGlhbHM6dW5kZWZpbmVkLG5ld1BhcnRpYWxzUmlnaHQ9aXNDdXJyeT91bmRlZmluZWQ6cGFydGlhbHM7Yml0bWFzayB8PSBpc0N1cnJ5P1BBUlRJQUxfRkxBRzpQQVJUSUFMX1JJR0hUX0ZMQUc7Yml0bWFzayAmPSB+KGlzQ3Vycnk/UEFSVElBTF9SSUdIVF9GTEFHOlBBUlRJQUxfRkxBRyk7aWYoIShiaXRtYXNrICYgQ1VSUllfQk9VTkRfRkxBRykpe2JpdG1hc2sgJj0gfihCSU5EX0ZMQUcgfCBCSU5EX0tFWV9GTEFHKTt9dmFyIG5ld0RhdGE9W2Z1bmMsYml0bWFzayx0aGlzQXJnLG5ld1BhcnRpYWxzLG5ld3NIb2xkZXJzLG5ld1BhcnRpYWxzUmlnaHQsbmV3SG9sZGVyc1JpZ2h0LG5ld0FyZ1BvcyxhcnksYXJpdHldLHJlc3VsdD13cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsbmV3RGF0YSk7aWYoaXNMYXppYWJsZShmdW5jKSl7c2V0RGF0YShyZXN1bHQsbmV3RGF0YSk7fXJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpe3ZhciBmdW5jPU1hdGhbbWV0aG9kTmFtZV07cmV0dXJuIGZ1bmN0aW9uKG51bWJlcixwcmVjaXNpb24pe251bWJlciA9IHRvTnVtYmVyKG51bWJlcik7cHJlY2lzaW9uID0gdG9JbnRlZ2VyKHByZWNpc2lvbik7aWYocHJlY2lzaW9uKXt2YXIgcGFpcj0odG9TdHJpbmcobnVtYmVyKSArIFwiZVwiKS5zcGxpdChcImVcIiksdmFsdWU9ZnVuYyhwYWlyWzBdICsgXCJlXCIgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArIFwiZVwiKS5zcGxpdChcImVcIik7cmV0dXJuICsocGFpclswXSArIFwiZVwiICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7fXJldHVybiBmdW5jKG51bWJlcik7fTt9dmFyIGNyZWF0ZVNldD0hKFNldCAmJiBuZXcgU2V0KFsxLDJdKS5zaXplID09PSAyKT9ub29wOmZ1bmN0aW9uKHZhbHVlcyl7cmV0dXJuIG5ldyBTZXQodmFsdWVzKTt9O2Z1bmN0aW9uIGNyZWF0ZVdyYXBwZXIoZnVuYyxiaXRtYXNrLHRoaXNBcmcscGFydGlhbHMsaG9sZGVycyxhcmdQb3MsYXJ5LGFyaXR5KXt2YXIgaXNCaW5kS2V5PWJpdG1hc2sgJiBCSU5EX0tFWV9GTEFHO2lmKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gXCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7fXZhciBsZW5ndGg9cGFydGlhbHM/cGFydGlhbHMubGVuZ3RoOjA7aWYoIWxlbmd0aCl7Yml0bWFzayAmPSB+KFBBUlRJQUxfRkxBRyB8IFBBUlRJQUxfUklHSFRfRkxBRyk7cGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO31hcnkgPSBhcnkgPT09IHVuZGVmaW5lZD9hcnk6bmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLDApO2FyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZD9hcml0eTp0b0ludGVnZXIoYXJpdHkpO2xlbmd0aCAtPSBob2xkZXJzP2hvbGRlcnMubGVuZ3RoOjA7aWYoYml0bWFzayAmIFBBUlRJQUxfUklHSFRfRkxBRyl7dmFyIHBhcnRpYWxzUmlnaHQ9cGFydGlhbHMsaG9sZGVyc1JpZ2h0PWhvbGRlcnM7cGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO312YXIgZGF0YT1pc0JpbmRLZXk/dW5kZWZpbmVkOmdldERhdGEoZnVuYyksbmV3RGF0YT1bZnVuYyxiaXRtYXNrLHRoaXNBcmcscGFydGlhbHMsaG9sZGVycyxwYXJ0aWFsc1JpZ2h0LGhvbGRlcnNSaWdodCxhcmdQb3MsYXJ5LGFyaXR5XTtpZihkYXRhKXttZXJnZURhdGEobmV3RGF0YSxkYXRhKTt9ZnVuYyA9IG5ld0RhdGFbMF07Yml0bWFzayA9IG5ld0RhdGFbMV07dGhpc0FyZyA9IG5ld0RhdGFbMl07cGFydGlhbHMgPSBuZXdEYXRhWzNdO2hvbGRlcnMgPSBuZXdEYXRhWzRdO2FyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT0gbnVsbD9pc0JpbmRLZXk/MDpmdW5jLmxlbmd0aDpuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwwKTtpZighYXJpdHkgJiYgYml0bWFzayAmIChDVVJSWV9GTEFHIHwgQ1VSUllfUklHSFRfRkxBRykpe2JpdG1hc2sgJj0gfihDVVJSWV9GTEFHIHwgQ1VSUllfUklHSFRfRkxBRyk7fWlmKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gQklORF9GTEFHKXt2YXIgcmVzdWx0PWNyZWF0ZUJhc2VXcmFwcGVyKGZ1bmMsYml0bWFzayx0aGlzQXJnKTt9ZWxzZSBpZihiaXRtYXNrID09IENVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBDVVJSWV9SSUdIVF9GTEFHKXtyZXN1bHQgPSBjcmVhdGVDdXJyeVdyYXBwZXIoZnVuYyxiaXRtYXNrLGFyaXR5KTt9ZWxzZSBpZigoYml0bWFzayA9PSBQQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoQklORF9GTEFHIHwgUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKXtyZXN1bHQgPSBjcmVhdGVQYXJ0aWFsV3JhcHBlcihmdW5jLGJpdG1hc2ssdGhpc0FyZyxwYXJ0aWFscyk7fWVsc2Uge3Jlc3VsdCA9IGNyZWF0ZUh5YnJpZFdyYXBwZXIuYXBwbHkodW5kZWZpbmVkLG5ld0RhdGEpO312YXIgc2V0dGVyPWRhdGE/YmFzZVNldERhdGE6c2V0RGF0YTtyZXR1cm4gc2V0dGVyKHJlc3VsdCxuZXdEYXRhKTt9ZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksb3RoZXIsZXF1YWxGdW5jLGN1c3RvbWl6ZXIsYml0bWFzayxzdGFjayl7dmFyIGluZGV4PS0xLGlzUGFydGlhbD1iaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUcsaXNVbm9yZGVyZWQ9Yml0bWFzayAmIFVOT1JERVJFRF9DT01QQVJFX0ZMQUcsYXJyTGVuZ3RoPWFycmF5Lmxlbmd0aCxvdGhMZW5ndGg9b3RoZXIubGVuZ3RoO2lmKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSl7cmV0dXJuIGZhbHNlO312YXIgc3RhY2tlZD1zdGFjay5nZXQoYXJyYXkpO2lmKHN0YWNrZWQpe3JldHVybiBzdGFja2VkID09IG90aGVyO312YXIgcmVzdWx0PXRydWU7c3RhY2suc2V0KGFycmF5LG90aGVyKTt3aGlsZSgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7dmFyIGFyclZhbHVlPWFycmF5W2luZGV4XSxvdGhWYWx1ZT1vdGhlcltpbmRleF07aWYoY3VzdG9taXplcil7dmFyIGNvbXBhcmVkPWlzUGFydGlhbD9jdXN0b21pemVyKG90aFZhbHVlLGFyclZhbHVlLGluZGV4LG90aGVyLGFycmF5LHN0YWNrKTpjdXN0b21pemVyKGFyclZhbHVlLG90aFZhbHVlLGluZGV4LGFycmF5LG90aGVyLHN0YWNrKTt9aWYoY29tcGFyZWQgIT09IHVuZGVmaW5lZCl7aWYoY29tcGFyZWQpe2NvbnRpbnVlO31yZXN1bHQgPSBmYWxzZTticmVhazt9aWYoaXNVbm9yZGVyZWQpe2lmKCFhcnJheVNvbWUob3RoZXIsZnVuY3Rpb24ob3RoVmFsdWUpe3JldHVybiBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLG90aFZhbHVlLGN1c3RvbWl6ZXIsYml0bWFzayxzdGFjayk7fSkpe3Jlc3VsdCA9IGZhbHNlO2JyZWFrO319ZWxzZSBpZighKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsb3RoVmFsdWUsY3VzdG9taXplcixiaXRtYXNrLHN0YWNrKSkpe3Jlc3VsdCA9IGZhbHNlO2JyZWFrO319c3RhY2tbXCJkZWxldGVcIl0oYXJyYXkpO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LG90aGVyLHRhZyxlcXVhbEZ1bmMsY3VzdG9taXplcixiaXRtYXNrKXtzd2l0Y2godGFnKXtjYXNlIGFycmF5QnVmZmVyVGFnOmlmKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGggfHwgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLG5ldyBVaW50OEFycmF5KG90aGVyKSkpe3JldHVybiBmYWxzZTt9cmV0dXJuIHRydWU7Y2FzZSBib29sVGFnOmNhc2UgZGF0ZVRhZzpyZXR1cm4gK29iamVjdCA9PSArb3RoZXI7Y2FzZSBlcnJvclRhZzpyZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO2Nhc2UgbnVtYmVyVGFnOnJldHVybiBvYmplY3QgIT0gK29iamVjdD9vdGhlciAhPSArb3RoZXI6b2JqZWN0ID09ICtvdGhlcjtjYXNlIHJlZ2V4cFRhZzpjYXNlIHN0cmluZ1RhZzpyZXR1cm4gb2JqZWN0ID09IG90aGVyICsgXCJcIjtjYXNlIG1hcFRhZzp2YXIgY29udmVydD1tYXBUb0FycmF5O2Nhc2Ugc2V0VGFnOnZhciBpc1BhcnRpYWw9Yml0bWFzayAmIFBBUlRJQUxfQ09NUEFSRV9GTEFHO2NvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtyZXR1cm4gKGlzUGFydGlhbCB8fCBvYmplY3Quc2l6ZSA9PSBvdGhlci5zaXplKSAmJiBlcXVhbEZ1bmMoY29udmVydChvYmplY3QpLGNvbnZlcnQob3RoZXIpLGN1c3RvbWl6ZXIsYml0bWFzayB8IFVOT1JERVJFRF9DT01QQVJFX0ZMQUcpO2Nhc2Ugc3ltYm9sVGFnOnJldHVybiAhIVN5bWJvbCAmJiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO31yZXR1cm4gZmFsc2U7fWZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3Qsb3RoZXIsZXF1YWxGdW5jLGN1c3RvbWl6ZXIsYml0bWFzayxzdGFjayl7dmFyIGlzUGFydGlhbD1iaXRtYXNrICYgUEFSVElBTF9DT01QQVJFX0ZMQUcsb2JqUHJvcHM9a2V5cyhvYmplY3QpLG9iakxlbmd0aD1vYmpQcm9wcy5sZW5ndGgsb3RoUHJvcHM9a2V5cyhvdGhlciksb3RoTGVuZ3RoPW90aFByb3BzLmxlbmd0aDtpZihvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpe3JldHVybiBmYWxzZTt9dmFyIGluZGV4PW9iakxlbmd0aDt3aGlsZShpbmRleC0tKSB7dmFyIGtleT1vYmpQcm9wc1tpbmRleF07aWYoIShpc1BhcnRpYWw/a2V5IGluIG90aGVyOmJhc2VIYXMob3RoZXIsa2V5KSkpe3JldHVybiBmYWxzZTt9fXZhciBzdGFja2VkPXN0YWNrLmdldChvYmplY3QpO2lmKHN0YWNrZWQpe3JldHVybiBzdGFja2VkID09IG90aGVyO312YXIgcmVzdWx0PXRydWU7c3RhY2suc2V0KG9iamVjdCxvdGhlcik7dmFyIHNraXBDdG9yPWlzUGFydGlhbDt3aGlsZSgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7a2V5ID0gb2JqUHJvcHNbaW5kZXhdO3ZhciBvYmpWYWx1ZT1vYmplY3Rba2V5XSxvdGhWYWx1ZT1vdGhlcltrZXldO2lmKGN1c3RvbWl6ZXIpe3ZhciBjb21wYXJlZD1pc1BhcnRpYWw/Y3VzdG9taXplcihvdGhWYWx1ZSxvYmpWYWx1ZSxrZXksb3RoZXIsb2JqZWN0LHN0YWNrKTpjdXN0b21pemVyKG9ialZhbHVlLG90aFZhbHVlLGtleSxvYmplY3Qsb3RoZXIsc3RhY2spO31pZighKGNvbXBhcmVkID09PSB1bmRlZmluZWQ/b2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSxvdGhWYWx1ZSxjdXN0b21pemVyLGJpdG1hc2ssc3RhY2spOmNvbXBhcmVkKSl7cmVzdWx0ID0gZmFsc2U7YnJlYWs7fXNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSBcImNvbnN0cnVjdG9yXCIpO31pZihyZXN1bHQgJiYgIXNraXBDdG9yKXt2YXIgb2JqQ3Rvcj1vYmplY3QuY29uc3RydWN0b3Isb3RoQ3Rvcj1vdGhlci5jb25zdHJ1Y3RvcjtpZihvYmpDdG9yICE9IG90aEN0b3IgJiYgXCJjb25zdHJ1Y3RvclwiIGluIG9iamVjdCAmJiBcImNvbnN0cnVjdG9yXCIgaW4gb3RoZXIgJiYgISh0eXBlb2Ygb2JqQ3RvciA9PSBcImZ1bmN0aW9uXCIgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiYgdHlwZW9mIG90aEN0b3IgPT0gXCJmdW5jdGlvblwiICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSl7cmVzdWx0ID0gZmFsc2U7fX1zdGFja1tcImRlbGV0ZVwiXShvYmplY3QpO3JldHVybiByZXN1bHQ7fXZhciBnZXREYXRhPSFtZXRhTWFwP25vb3A6ZnVuY3Rpb24oZnVuYyl7cmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO307ZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYyl7dmFyIHJlc3VsdD1mdW5jLm5hbWUgKyBcIlwiLGFycmF5PXJlYWxOYW1lc1tyZXN1bHRdLGxlbmd0aD1oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcyxyZXN1bHQpP2FycmF5Lmxlbmd0aDowO3doaWxlKGxlbmd0aC0tKSB7dmFyIGRhdGE9YXJyYXlbbGVuZ3RoXSxvdGhlckZ1bmM9ZGF0YS5mdW5jO2lmKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKXtyZXR1cm4gZGF0YS5uYW1lO319cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKXt2YXIgcmVzdWx0PWxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtyZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlP2Jhc2VJdGVyYXRlZTpyZXN1bHQ7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/cmVzdWx0KGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0pOnJlc3VsdDt9dmFyIGdldExlbmd0aD1iYXNlUHJvcGVydHkoXCJsZW5ndGhcIik7ZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCl7dmFyIHJlc3VsdD10b1BhaXJzKG9iamVjdCksbGVuZ3RoPXJlc3VsdC5sZW5ndGg7d2hpbGUobGVuZ3RoLS0pIHtyZXN1bHRbbGVuZ3RoXVsyXSA9IGlzU3RyaWN0Q29tcGFyYWJsZShyZXN1bHRbbGVuZ3RoXVsxXSk7fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3Qsa2V5KXt2YXIgdmFsdWU9b2JqZWN0ID09IG51bGw/dW5kZWZpbmVkOm9iamVjdFtrZXldO3JldHVybiBpc05hdGl2ZSh2YWx1ZSk/dmFsdWU6dW5kZWZpbmVkO312YXIgZ2V0U3ltYm9scz1nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgfHwgZnVuY3Rpb24oKXtyZXR1cm4gW107fTtmdW5jdGlvbiBnZXRUYWcodmFsdWUpe3JldHVybiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTt9aWYoTWFwICYmIGdldFRhZyhuZXcgTWFwKCkpICE9IG1hcFRhZyB8fCBTZXQgJiYgZ2V0VGFnKG5ldyBTZXQoKSkgIT0gc2V0VGFnKXtnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSl7dmFyIHJlc3VsdD1vYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSxDdG9yPXJlc3VsdCA9PSBvYmplY3RUYWc/dmFsdWUuY29uc3RydWN0b3I6bnVsbCxjdG9yU3RyaW5nPXR5cGVvZiBDdG9yID09IFwiZnVuY3Rpb25cIj9mdW5jVG9TdHJpbmcuY2FsbChDdG9yKTpcIlwiO2lmKGN0b3JTdHJpbmcpe2lmKGN0b3JTdHJpbmcgPT0gbWFwQ3RvclN0cmluZyl7cmV0dXJuIG1hcFRhZzt9aWYoY3RvclN0cmluZyA9PSBzZXRDdG9yU3RyaW5nKXtyZXR1cm4gc2V0VGFnO319cmV0dXJuIHJlc3VsdDt9O31mdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LGVuZCx0cmFuc2Zvcm1zKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPXRyYW5zZm9ybXMubGVuZ3RoO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIgZGF0YT10cmFuc2Zvcm1zW2luZGV4XSxzaXplPWRhdGEuc2l6ZTtzd2l0Y2goZGF0YS50eXBlKXtjYXNlIFwiZHJvcFwiOnN0YXJ0ICs9IHNpemU7YnJlYWs7Y2FzZSBcImRyb3BSaWdodFwiOmVuZCAtPSBzaXplO2JyZWFrO2Nhc2UgXCJ0YWtlXCI6ZW5kID0gbmF0aXZlTWluKGVuZCxzdGFydCArIHNpemUpO2JyZWFrO2Nhc2UgXCJ0YWtlUmlnaHRcIjpzdGFydCA9IG5hdGl2ZU1heChzdGFydCxlbmQgLSBzaXplKTticmVhazt9fXJldHVybiB7c3RhcnQ6c3RhcnQsZW5kOmVuZH07fWZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LHBhdGgsaGFzRnVuYyl7aWYob2JqZWN0ID09IG51bGwpe3JldHVybiBmYWxzZTt9dmFyIHJlc3VsdD1oYXNGdW5jKG9iamVjdCxwYXRoKTtpZighcmVzdWx0ICYmICFpc0tleShwYXRoKSl7cGF0aCA9IGJhc2VUb1BhdGgocGF0aCk7b2JqZWN0ID0gcGFyZW50KG9iamVjdCxwYXRoKTtpZihvYmplY3QgIT0gbnVsbCl7cGF0aCA9IGxhc3QocGF0aCk7cmVzdWx0ID0gaGFzRnVuYyhvYmplY3QscGF0aCk7fX12YXIgbGVuZ3RoPW9iamVjdD9vYmplY3QubGVuZ3RoOnVuZGVmaW5lZDtyZXR1cm4gcmVzdWx0IHx8ICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChwYXRoLGxlbmd0aCkgJiYgKGlzQXJyYXkob2JqZWN0KSB8fCBpc1N0cmluZyhvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO31mdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSl7dmFyIGxlbmd0aD1hcnJheS5sZW5ndGgscmVzdWx0PWFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7aWYobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSBcInN0cmluZ1wiICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksXCJpbmRleFwiKSl7cmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7cmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3Qpe2lmKGlzUHJvdG90eXBlKG9iamVjdCkpe3JldHVybiB7fTt9dmFyIEN0b3I9b2JqZWN0LmNvbnN0cnVjdG9yO3JldHVybiBiYXNlQ3JlYXRlKGlzRnVuY3Rpb24oQ3Rvcik/Q3Rvci5wcm90b3R5cGU6dW5kZWZpbmVkKTt9ZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LHRhZyxpc0RlZXApe3ZhciBDdG9yPW9iamVjdC5jb25zdHJ1Y3Rvcjtzd2l0Y2godGFnKXtjYXNlIGFycmF5QnVmZmVyVGFnOnJldHVybiBjbG9uZUJ1ZmZlcihvYmplY3QpO2Nhc2UgYm9vbFRhZzpjYXNlIGRhdGVUYWc6cmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO2Nhc2UgZmxvYXQzMlRhZzpjYXNlIGZsb2F0NjRUYWc6Y2FzZSBpbnQ4VGFnOmNhc2UgaW50MTZUYWc6Y2FzZSBpbnQzMlRhZzpjYXNlIHVpbnQ4VGFnOmNhc2UgdWludDhDbGFtcGVkVGFnOmNhc2UgdWludDE2VGFnOmNhc2UgdWludDMyVGFnOnJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LGlzRGVlcCk7Y2FzZSBtYXBUYWc6cmV0dXJuIGNsb25lTWFwKG9iamVjdCk7Y2FzZSBudW1iZXJUYWc6Y2FzZSBzdHJpbmdUYWc6cmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7Y2FzZSByZWdleHBUYWc6cmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7Y2FzZSBzZXRUYWc6cmV0dXJuIGNsb25lU2V0KG9iamVjdCk7Y2FzZSBzeW1ib2xUYWc6cmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7fX1mdW5jdGlvbiBpbmRleEtleXMob2JqZWN0KXt2YXIgbGVuZ3RoPW9iamVjdD9vYmplY3QubGVuZ3RoOnVuZGVmaW5lZDtpZihpc0xlbmd0aChsZW5ndGgpICYmIChpc0FycmF5KG9iamVjdCkgfHwgaXNTdHJpbmcob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKSl7cmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsU3RyaW5nKTt9cmV0dXJuIG51bGw7fWZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLGluZGV4LG9iamVjdCl7aWYoIWlzT2JqZWN0KG9iamVjdCkpe3JldHVybiBmYWxzZTt9dmFyIHR5cGU9dHlwZW9mIGluZGV4O2lmKHR5cGUgPT0gXCJudW1iZXJcIj9pc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsb2JqZWN0Lmxlbmd0aCk6dHlwZSA9PSBcInN0cmluZ1wiICYmIGluZGV4IGluIG9iamVjdCl7cmV0dXJuIGVxKG9iamVjdFtpbmRleF0sdmFsdWUpO31yZXR1cm4gZmFsc2U7fWZ1bmN0aW9uIGlzS2V5KHZhbHVlLG9iamVjdCl7aWYodHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIpe3JldHVybiB0cnVlO31yZXR1cm4gIWlzQXJyYXkodmFsdWUpICYmIChyZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHwgb2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO31mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpe3ZhciB0eXBlPXR5cGVvZiB2YWx1ZTtyZXR1cm4gdHlwZSA9PSBcIm51bWJlclwiIHx8IHR5cGUgPT0gXCJib29sZWFuXCIgfHwgdHlwZSA9PSBcInN0cmluZ1wiICYmIHZhbHVlICE9PSBcIl9fcHJvdG9fX1wiIHx8IHZhbHVlID09IG51bGw7fWZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYyl7dmFyIGZ1bmNOYW1lPWdldEZ1bmNOYW1lKGZ1bmMpLG90aGVyPWxvZGFzaFtmdW5jTmFtZV07aWYodHlwZW9mIG90aGVyICE9IFwiZnVuY3Rpb25cIiB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpe3JldHVybiBmYWxzZTt9aWYoZnVuYyA9PT0gb3RoZXIpe3JldHVybiB0cnVlO312YXIgZGF0YT1nZXREYXRhKG90aGVyKTtyZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07fWZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKXt2YXIgQ3Rvcj12YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3Rvcixwcm90bz10eXBlb2YgQ3RvciA9PSBcImZ1bmN0aW9uXCIgJiYgQ3Rvci5wcm90b3R5cGUgfHwgb2JqZWN0UHJvdG87cmV0dXJuIHZhbHVlID09PSBwcm90bzt9ZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKXtyZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7fWZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLHNvdXJjZSl7dmFyIGJpdG1hc2s9ZGF0YVsxXSxzcmNCaXRtYXNrPXNvdXJjZVsxXSxuZXdCaXRtYXNrPWJpdG1hc2sgfCBzcmNCaXRtYXNrLGlzQ29tbW9uPW5ld0JpdG1hc2sgPCAoQklORF9GTEFHIHwgQklORF9LRVlfRkxBRyB8IEFSWV9GTEFHKTt2YXIgaXNDb21ibz1zcmNCaXRtYXNrID09IEFSWV9GTEFHICYmIGJpdG1hc2sgPT0gQ1VSUllfRkxBRyB8fCBzcmNCaXRtYXNrID09IEFSWV9GTEFHICYmIGJpdG1hc2sgPT0gUkVBUkdfRkxBRyAmJiBkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0gfHwgc3JjQml0bWFzayA9PSAoQVJZX0ZMQUcgfCBSRUFSR19GTEFHKSAmJiBzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSAmJiBiaXRtYXNrID09IENVUlJZX0ZMQUc7aWYoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSl7cmV0dXJuIGRhdGE7fWlmKHNyY0JpdG1hc2sgJiBCSU5EX0ZMQUcpe2RhdGFbMl0gPSBzb3VyY2VbMl07bmV3Qml0bWFzayB8PSBiaXRtYXNrICYgQklORF9GTEFHPzA6Q1VSUllfQk9VTkRfRkxBRzt9dmFyIHZhbHVlPXNvdXJjZVszXTtpZih2YWx1ZSl7dmFyIHBhcnRpYWxzPWRhdGFbM107ZGF0YVszXSA9IHBhcnRpYWxzP2NvbXBvc2VBcmdzKHBhcnRpYWxzLHZhbHVlLHNvdXJjZVs0XSk6Y29weUFycmF5KHZhbHVlKTtkYXRhWzRdID0gcGFydGlhbHM/cmVwbGFjZUhvbGRlcnMoZGF0YVszXSxQTEFDRUhPTERFUik6Y29weUFycmF5KHNvdXJjZVs0XSk7fXZhbHVlID0gc291cmNlWzVdO2lmKHZhbHVlKXtwYXJ0aWFscyA9IGRhdGFbNV07ZGF0YVs1XSA9IHBhcnRpYWxzP2NvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsdmFsdWUsc291cmNlWzZdKTpjb3B5QXJyYXkodmFsdWUpO2RhdGFbNl0gPSBwYXJ0aWFscz9yZXBsYWNlSG9sZGVycyhkYXRhWzVdLFBMQUNFSE9MREVSKTpjb3B5QXJyYXkoc291cmNlWzZdKTt9dmFsdWUgPSBzb3VyY2VbN107aWYodmFsdWUpe2RhdGFbN10gPSBjb3B5QXJyYXkodmFsdWUpO31pZihzcmNCaXRtYXNrICYgQVJZX0ZMQUcpe2RhdGFbOF0gPSBkYXRhWzhdID09IG51bGw/c291cmNlWzhdOm5hdGl2ZU1pbihkYXRhWzhdLHNvdXJjZVs4XSk7fWlmKGRhdGFbOV0gPT0gbnVsbCl7ZGF0YVs5XSA9IHNvdXJjZVs5XTt9ZGF0YVswXSA9IHNvdXJjZVswXTtkYXRhWzFdID0gbmV3Qml0bWFzaztyZXR1cm4gZGF0YTt9ZnVuY3Rpb24gbWVyZ2VEZWZhdWx0cyhvYmpWYWx1ZSxzcmNWYWx1ZSxrZXksb2JqZWN0LHNvdXJjZSxzdGFjayl7aWYoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSl7c3RhY2suc2V0KHNyY1ZhbHVlLG9ialZhbHVlKTtiYXNlTWVyZ2Uob2JqVmFsdWUsc3JjVmFsdWUsdW5kZWZpbmVkLG1lcmdlRGVmYXVsdHMsc3RhY2spO31yZXR1cm4gb2JqVmFsdWU7fWZ1bmN0aW9uIHBhcmVudChvYmplY3QscGF0aCl7cmV0dXJuIHBhdGgubGVuZ3RoID09IDE/b2JqZWN0OmdldChvYmplY3QsYmFzZVNsaWNlKHBhdGgsMCwtMSkpO31mdW5jdGlvbiByZW9yZGVyKGFycmF5LGluZGV4ZXMpe3ZhciBhcnJMZW5ndGg9YXJyYXkubGVuZ3RoLGxlbmd0aD1uYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsYXJyTGVuZ3RoKSxvbGRBcnJheT1jb3B5QXJyYXkoYXJyYXkpO3doaWxlKGxlbmd0aC0tKSB7dmFyIGluZGV4PWluZGV4ZXNbbGVuZ3RoXTthcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCxhcnJMZW5ndGgpP29sZEFycmF5W2luZGV4XTp1bmRlZmluZWQ7fXJldHVybiBhcnJheTt9dmFyIHNldERhdGE9KGZ1bmN0aW9uKCl7dmFyIGNvdW50PTAsbGFzdENhbGxlZD0wO3JldHVybiBmdW5jdGlvbihrZXksdmFsdWUpe3ZhciBzdGFtcD1ub3coKSxyZW1haW5pbmc9SE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtsYXN0Q2FsbGVkID0gc3RhbXA7aWYocmVtYWluaW5nID4gMCl7aWYoKytjb3VudCA+PSBIT1RfQ09VTlQpe3JldHVybiBrZXk7fX1lbHNlIHtjb3VudCA9IDA7fXJldHVybiBiYXNlU2V0RGF0YShrZXksdmFsdWUpO307fSkoKTtmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKXt2YXIgcmVzdWx0PVtdO3RvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVByb3BOYW1lLGZ1bmN0aW9uKG1hdGNoLG51bWJlcixxdW90ZSxzdHJpbmcpe3Jlc3VsdC5wdXNoKHF1b3RlP3N0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhcixcIiQxXCIpOm51bWJlciB8fCBtYXRjaCk7fSk7cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gdG9BcnJheUxpa2VPYmplY3QodmFsdWUpe3JldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSk/dmFsdWU6W107fWZ1bmN0aW9uIHRvRnVuY3Rpb24odmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJmdW5jdGlvblwiP3ZhbHVlOmlkZW50aXR5O31mdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcil7aWYod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKXtyZXR1cm4gd3JhcHBlci5jbG9uZSgpO312YXIgcmVzdWx0PW5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sd3JhcHBlci5fX2NoYWluX18pO3Jlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtyZXN1bHQuX19pbmRleF9fID0gd3JhcHBlci5fX2luZGV4X187cmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gY2h1bmsoYXJyYXksc2l6ZSl7c2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksMCk7dmFyIGxlbmd0aD1hcnJheT9hcnJheS5sZW5ndGg6MDtpZighbGVuZ3RoIHx8IHNpemUgPCAxKXtyZXR1cm4gW107fXZhciBpbmRleD0wLHJlc0luZGV4PS0xLHJlc3VsdD1BcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTt3aGlsZShpbmRleCA8IGxlbmd0aCkge3Jlc3VsdFsrK3Jlc0luZGV4XSA9IGJhc2VTbGljZShhcnJheSxpbmRleCxpbmRleCArPSBzaXplKTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gY29tcGFjdChhcnJheSl7dmFyIGluZGV4PS0xLGxlbmd0aD1hcnJheT9hcnJheS5sZW5ndGg6MCxyZXNJbmRleD0tMSxyZXN1bHQ9W107d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3ZhciB2YWx1ZT1hcnJheVtpbmRleF07aWYodmFsdWUpe3Jlc3VsdFsrK3Jlc0luZGV4XSA9IHZhbHVlO319cmV0dXJuIHJlc3VsdDt9dmFyIGNvbmNhdD1yZXN0KGZ1bmN0aW9uKGFycmF5LHZhbHVlcyl7aWYoIWlzQXJyYXkoYXJyYXkpKXthcnJheSA9IGFycmF5ID09IG51bGw/W106W09iamVjdChhcnJheSldO312YWx1ZXMgPSBiYXNlRmxhdHRlbih2YWx1ZXMpO3JldHVybiBhcnJheUNvbmNhdChhcnJheSx2YWx1ZXMpO30pO3ZhciBkaWZmZXJlbmNlPXJlc3QoZnVuY3Rpb24oYXJyYXksdmFsdWVzKXtyZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpP2Jhc2VEaWZmZXJlbmNlKGFycmF5LGJhc2VGbGF0dGVuKHZhbHVlcyxmYWxzZSx0cnVlKSk6W107fSk7dmFyIGRpZmZlcmVuY2VCeT1yZXN0KGZ1bmN0aW9uKGFycmF5LHZhbHVlcyl7dmFyIGl0ZXJhdGVlPWxhc3QodmFsdWVzKTtpZihpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpe2l0ZXJhdGVlID0gdW5kZWZpbmVkO31yZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpP2Jhc2VEaWZmZXJlbmNlKGFycmF5LGJhc2VGbGF0dGVuKHZhbHVlcyxmYWxzZSx0cnVlKSxnZXRJdGVyYXRlZShpdGVyYXRlZSkpOltdO30pO3ZhciBkaWZmZXJlbmNlV2l0aD1yZXN0KGZ1bmN0aW9uKGFycmF5LHZhbHVlcyl7dmFyIGNvbXBhcmF0b3I9bGFzdCh2YWx1ZXMpO2lmKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKXtjb21wYXJhdG9yID0gdW5kZWZpbmVkO31yZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpP2Jhc2VEaWZmZXJlbmNlKGFycmF5LGJhc2VGbGF0dGVuKHZhbHVlcyxmYWxzZSx0cnVlKSx1bmRlZmluZWQsY29tcGFyYXRvcik6W107fSk7ZnVuY3Rpb24gZHJvcChhcnJheSxuLGd1YXJkKXt2YXIgbGVuZ3RoPWFycmF5P2FycmF5Lmxlbmd0aDowO2lmKCFsZW5ndGgpe3JldHVybiBbXTt9biA9IGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZD8xOnRvSW50ZWdlcihuKTtyZXR1cm4gYmFzZVNsaWNlKGFycmF5LG4gPCAwPzA6bixsZW5ndGgpO31mdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksbixndWFyZCl7dmFyIGxlbmd0aD1hcnJheT9hcnJheS5sZW5ndGg6MDtpZighbGVuZ3RoKXtyZXR1cm4gW107fW4gPSBndWFyZCB8fCBuID09PSB1bmRlZmluZWQ/MTp0b0ludGVnZXIobik7biA9IGxlbmd0aCAtIG47cmV0dXJuIGJhc2VTbGljZShhcnJheSwwLG4gPCAwPzA6bik7fWZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LHByZWRpY2F0ZSl7cmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aD9iYXNlV2hpbGUoYXJyYXksZ2V0SXRlcmF0ZWUocHJlZGljYXRlLDMpLHRydWUsdHJ1ZSk6W107fWZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSxwcmVkaWNhdGUpe3JldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGg/YmFzZVdoaWxlKGFycmF5LGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwzKSx0cnVlKTpbXTt9ZnVuY3Rpb24gZmlsbChhcnJheSx2YWx1ZSxzdGFydCxlbmQpe3ZhciBsZW5ndGg9YXJyYXk/YXJyYXkubGVuZ3RoOjA7aWYoIWxlbmd0aCl7cmV0dXJuIFtdO31pZihzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gXCJudW1iZXJcIiAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSx2YWx1ZSxzdGFydCkpe3N0YXJ0ID0gMDtlbmQgPSBsZW5ndGg7fXJldHVybiBiYXNlRmlsbChhcnJheSx2YWx1ZSxzdGFydCxlbmQpO31mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXkscHJlZGljYXRlKXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoP2Jhc2VGaW5kSW5kZXgoYXJyYXksZ2V0SXRlcmF0ZWUocHJlZGljYXRlLDMpKTotMTt9ZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSxwcmVkaWNhdGUpe3JldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGg/YmFzZUZpbmRJbmRleChhcnJheSxnZXRJdGVyYXRlZShwcmVkaWNhdGUsMyksdHJ1ZSk6LTE7fWZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpe3ZhciBsZW5ndGg9YXJyYXk/YXJyYXkubGVuZ3RoOjA7cmV0dXJuIGxlbmd0aD9iYXNlRmxhdHRlbihhcnJheSk6W107fWZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KXt2YXIgbGVuZ3RoPWFycmF5P2FycmF5Lmxlbmd0aDowO3JldHVybiBsZW5ndGg/YmFzZUZsYXR0ZW4oYXJyYXksdHJ1ZSk6W107fWZ1bmN0aW9uIGZyb21QYWlycyhwYWlycyl7dmFyIGluZGV4PS0xLGxlbmd0aD1wYWlycz9wYWlycy5sZW5ndGg6MCxyZXN1bHQ9e307d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3ZhciBwYWlyPXBhaXJzW2luZGV4XTtyZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO31yZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBoZWFkKGFycmF5KXtyZXR1cm4gYXJyYXk/YXJyYXlbMF06dW5kZWZpbmVkO31mdW5jdGlvbiBpbmRleE9mKGFycmF5LHZhbHVlLGZyb21JbmRleCl7dmFyIGxlbmd0aD1hcnJheT9hcnJheS5sZW5ndGg6MDtpZighbGVuZ3RoKXtyZXR1cm4gLTE7fWZyb21JbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO2lmKGZyb21JbmRleCA8IDApe2Zyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsMCk7fXJldHVybiBiYXNlSW5kZXhPZihhcnJheSx2YWx1ZSxmcm9tSW5kZXgpO31mdW5jdGlvbiBpbml0aWFsKGFycmF5KXtyZXR1cm4gZHJvcFJpZ2h0KGFycmF5LDEpO312YXIgaW50ZXJzZWN0aW9uPXJlc3QoZnVuY3Rpb24oYXJyYXlzKXt2YXIgbWFwcGVkPWFycmF5TWFwKGFycmF5cyx0b0FycmF5TGlrZU9iamVjdCk7cmV0dXJuIG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0/YmFzZUludGVyc2VjdGlvbihtYXBwZWQpOltdO30pO3ZhciBpbnRlcnNlY3Rpb25CeT1yZXN0KGZ1bmN0aW9uKGFycmF5cyl7dmFyIGl0ZXJhdGVlPWxhc3QoYXJyYXlzKSxtYXBwZWQ9YXJyYXlNYXAoYXJyYXlzLHRvQXJyYXlMaWtlT2JqZWN0KTtpZihpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKXtpdGVyYXRlZSA9IHVuZGVmaW5lZDt9ZWxzZSB7bWFwcGVkLnBvcCgpO31yZXR1cm4gbWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXT9iYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCxnZXRJdGVyYXRlZShpdGVyYXRlZSkpOltdO30pO3ZhciBpbnRlcnNlY3Rpb25XaXRoPXJlc3QoZnVuY3Rpb24oYXJyYXlzKXt2YXIgY29tcGFyYXRvcj1sYXN0KGFycmF5cyksbWFwcGVkPWFycmF5TWFwKGFycmF5cyx0b0FycmF5TGlrZU9iamVjdCk7aWYoY29tcGFyYXRvciA9PT0gbGFzdChtYXBwZWQpKXtjb21wYXJhdG9yID0gdW5kZWZpbmVkO31lbHNlIHttYXBwZWQucG9wKCk7fXJldHVybiBtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdP2Jhc2VJbnRlcnNlY3Rpb24obWFwcGVkLHVuZGVmaW5lZCxjb21wYXJhdG9yKTpbXTt9KTtmdW5jdGlvbiBqb2luKGFycmF5LHNlcGFyYXRvcil7cmV0dXJuIGFycmF5P25hdGl2ZUpvaW4uY2FsbChhcnJheSxzZXBhcmF0b3IpOlwiXCI7fWZ1bmN0aW9uIGxhc3QoYXJyYXkpe3ZhciBsZW5ndGg9YXJyYXk/YXJyYXkubGVuZ3RoOjA7cmV0dXJuIGxlbmd0aD9hcnJheVtsZW5ndGggLSAxXTp1bmRlZmluZWQ7fWZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LHZhbHVlLGZyb21JbmRleCl7dmFyIGxlbmd0aD1hcnJheT9hcnJheS5sZW5ndGg6MDtpZighbGVuZ3RoKXtyZXR1cm4gLTE7fXZhciBpbmRleD1sZW5ndGg7aWYoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpe2luZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7aW5kZXggPSAoaW5kZXggPCAwP25hdGl2ZU1heChsZW5ndGggKyBpbmRleCwwKTpuYXRpdmVNaW4oaW5kZXgsbGVuZ3RoIC0gMSkpICsgMTt9aWYodmFsdWUgIT09IHZhbHVlKXtyZXR1cm4gaW5kZXhPZk5hTihhcnJheSxpbmRleCx0cnVlKTt9d2hpbGUoaW5kZXgtLSkge2lmKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpe3JldHVybiBpbmRleDt9fXJldHVybiAtMTt9dmFyIHB1bGw9cmVzdChwdWxsQWxsKTtmdW5jdGlvbiBwdWxsQWxsKGFycmF5LHZhbHVlcyl7cmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aD9iYXNlUHVsbEFsbChhcnJheSx2YWx1ZXMpOmFycmF5O31mdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksdmFsdWVzLGl0ZXJhdGVlKXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoP2Jhc2VQdWxsQWxsQnkoYXJyYXksdmFsdWVzLGdldEl0ZXJhdGVlKGl0ZXJhdGVlKSk6YXJyYXk7fXZhciBwdWxsQXQ9cmVzdChmdW5jdGlvbihhcnJheSxpbmRleGVzKXtpbmRleGVzID0gYXJyYXlNYXAoYmFzZUZsYXR0ZW4oaW5kZXhlcyksU3RyaW5nKTt2YXIgcmVzdWx0PWJhc2VBdChhcnJheSxpbmRleGVzKTtiYXNlUHVsbEF0KGFycmF5LGluZGV4ZXMuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7cmV0dXJuIHJlc3VsdDt9KTtmdW5jdGlvbiByZW1vdmUoYXJyYXkscHJlZGljYXRlKXt2YXIgcmVzdWx0PVtdO2lmKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSl7cmV0dXJuIHJlc3VsdDt9dmFyIGluZGV4PS0xLGluZGV4ZXM9W10sbGVuZ3RoPWFycmF5Lmxlbmd0aDtwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsMyk7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge3ZhciB2YWx1ZT1hcnJheVtpbmRleF07aWYocHJlZGljYXRlKHZhbHVlLGluZGV4LGFycmF5KSl7cmVzdWx0LnB1c2godmFsdWUpO2luZGV4ZXMucHVzaChpbmRleCk7fX1iYXNlUHVsbEF0KGFycmF5LGluZGV4ZXMpO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpe3JldHVybiBhcnJheT9uYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpOmFycmF5O31mdW5jdGlvbiBzbGljZShhcnJheSxzdGFydCxlbmQpe3ZhciBsZW5ndGg9YXJyYXk/YXJyYXkubGVuZ3RoOjA7aWYoIWxlbmd0aCl7cmV0dXJuIFtdO31pZihlbmQgJiYgdHlwZW9mIGVuZCAhPSBcIm51bWJlclwiICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LHN0YXJ0LGVuZCkpe3N0YXJ0ID0gMDtlbmQgPSBsZW5ndGg7fWVsc2Uge3N0YXJ0ID0gc3RhcnQgPT0gbnVsbD8wOnRvSW50ZWdlcihzdGFydCk7ZW5kID0gZW5kID09PSB1bmRlZmluZWQ/bGVuZ3RoOnRvSW50ZWdlcihlbmQpO31yZXR1cm4gYmFzZVNsaWNlKGFycmF5LHN0YXJ0LGVuZCk7fWZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LHZhbHVlKXtyZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LHZhbHVlKTt9ZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSx2YWx1ZSxpdGVyYXRlZSl7cmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LHZhbHVlLGdldEl0ZXJhdGVlKGl0ZXJhdGVlKSk7fWZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksdmFsdWUpe3ZhciBsZW5ndGg9YXJyYXk/YXJyYXkubGVuZ3RoOjA7aWYobGVuZ3RoKXt2YXIgaW5kZXg9YmFzZVNvcnRlZEluZGV4KGFycmF5LHZhbHVlKTtpZihpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sdmFsdWUpKXtyZXR1cm4gaW5kZXg7fX1yZXR1cm4gLTE7fWZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSx2YWx1ZSl7cmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSx2YWx1ZSx0cnVlKTt9ZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksdmFsdWUsaXRlcmF0ZWUpe3JldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSx2YWx1ZSxnZXRJdGVyYXRlZShpdGVyYXRlZSksdHJ1ZSk7fWZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LHZhbHVlKXt2YXIgbGVuZ3RoPWFycmF5P2FycmF5Lmxlbmd0aDowO2lmKGxlbmd0aCl7dmFyIGluZGV4PWJhc2VTb3J0ZWRJbmRleChhcnJheSx2YWx1ZSx0cnVlKSAtIDE7aWYoZXEoYXJyYXlbaW5kZXhdLHZhbHVlKSl7cmV0dXJuIGluZGV4O319cmV0dXJuIC0xO31mdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoP2Jhc2VTb3J0ZWRVbmlxKGFycmF5KTpbXTt9ZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LGl0ZXJhdGVlKXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoP2Jhc2VTb3J0ZWRVbmlxQnkoYXJyYXksZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpKTpbXTt9ZnVuY3Rpb24gdGFpbChhcnJheSl7cmV0dXJuIGRyb3AoYXJyYXksMSk7fWZ1bmN0aW9uIHRha2UoYXJyYXksbixndWFyZCl7aWYoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKXtyZXR1cm4gW107fW4gPSBndWFyZCB8fCBuID09PSB1bmRlZmluZWQ/MTp0b0ludGVnZXIobik7cmV0dXJuIGJhc2VTbGljZShhcnJheSwwLG4gPCAwPzA6bik7fWZ1bmN0aW9uIHRha2VSaWdodChhcnJheSxuLGd1YXJkKXt2YXIgbGVuZ3RoPWFycmF5P2FycmF5Lmxlbmd0aDowO2lmKCFsZW5ndGgpe3JldHVybiBbXTt9biA9IGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZD8xOnRvSW50ZWdlcihuKTtuID0gbGVuZ3RoIC0gbjtyZXR1cm4gYmFzZVNsaWNlKGFycmF5LG4gPCAwPzA6bixsZW5ndGgpO31mdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSxwcmVkaWNhdGUpe3JldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGg/YmFzZVdoaWxlKGFycmF5LGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwzKSxmYWxzZSx0cnVlKTpbXTt9ZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LHByZWRpY2F0ZSl7cmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aD9iYXNlV2hpbGUoYXJyYXksZ2V0SXRlcmF0ZWUocHJlZGljYXRlLDMpKTpbXTt9dmFyIHVuaW9uPXJlc3QoZnVuY3Rpb24oYXJyYXlzKXtyZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLGZhbHNlLHRydWUpKTt9KTt2YXIgdW5pb25CeT1yZXN0KGZ1bmN0aW9uKGFycmF5cyl7dmFyIGl0ZXJhdGVlPWxhc3QoYXJyYXlzKTtpZihpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpe2l0ZXJhdGVlID0gdW5kZWZpbmVkO31yZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLGZhbHNlLHRydWUpLGdldEl0ZXJhdGVlKGl0ZXJhdGVlKSk7fSk7dmFyIHVuaW9uV2l0aD1yZXN0KGZ1bmN0aW9uKGFycmF5cyl7dmFyIGNvbXBhcmF0b3I9bGFzdChhcnJheXMpO2lmKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKXtjb21wYXJhdG9yID0gdW5kZWZpbmVkO31yZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLGZhbHNlLHRydWUpLHVuZGVmaW5lZCxjb21wYXJhdG9yKTt9KTtmdW5jdGlvbiB1bmlxKGFycmF5KXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoP2Jhc2VVbmlxKGFycmF5KTpbXTt9ZnVuY3Rpb24gdW5pcUJ5KGFycmF5LGl0ZXJhdGVlKXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoP2Jhc2VVbmlxKGFycmF5LGdldEl0ZXJhdGVlKGl0ZXJhdGVlKSk6W107fWZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LGNvbXBhcmF0b3Ipe3JldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGg/YmFzZVVuaXEoYXJyYXksdW5kZWZpbmVkLGNvbXBhcmF0b3IpOltdO31mdW5jdGlvbiB1bnppcChhcnJheSl7aWYoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKXtyZXR1cm4gW107fXZhciBsZW5ndGg9MDthcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LGZ1bmN0aW9uKGdyb3VwKXtpZihpc0FycmF5TGlrZU9iamVjdChncm91cCkpe2xlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsbGVuZ3RoKTtyZXR1cm4gdHJ1ZTt9fSk7cmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsZnVuY3Rpb24oaW5kZXgpe3JldHVybiBhcnJheU1hcChhcnJheSxiYXNlUHJvcGVydHkoaW5kZXgpKTt9KTt9ZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LGl0ZXJhdGVlKXtpZighKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpe3JldHVybiBbXTt9dmFyIHJlc3VsdD11bnppcChhcnJheSk7aWYoaXRlcmF0ZWUgPT0gbnVsbCl7cmV0dXJuIHJlc3VsdDt9cmV0dXJuIGFycmF5TWFwKHJlc3VsdCxmdW5jdGlvbihncm91cCl7cmV0dXJuIGFwcGx5KGl0ZXJhdGVlLHVuZGVmaW5lZCxncm91cCk7fSk7fXZhciB3aXRob3V0PXJlc3QoZnVuY3Rpb24oYXJyYXksdmFsdWVzKXtyZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpP2Jhc2VEaWZmZXJlbmNlKGFycmF5LHZhbHVlcyk6W107fSk7dmFyIHhvcj1yZXN0KGZ1bmN0aW9uKGFycmF5cyl7cmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLGlzQXJyYXlMaWtlT2JqZWN0KSk7fSk7dmFyIHhvckJ5PXJlc3QoZnVuY3Rpb24oYXJyYXlzKXt2YXIgaXRlcmF0ZWU9bGFzdChhcnJheXMpO2lmKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSl7aXRlcmF0ZWUgPSB1bmRlZmluZWQ7fXJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cyxpc0FycmF5TGlrZU9iamVjdCksZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpKTt9KTt2YXIgeG9yV2l0aD1yZXN0KGZ1bmN0aW9uKGFycmF5cyl7dmFyIGNvbXBhcmF0b3I9bGFzdChhcnJheXMpO2lmKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKXtjb21wYXJhdG9yID0gdW5kZWZpbmVkO31yZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsaXNBcnJheUxpa2VPYmplY3QpLHVuZGVmaW5lZCxjb21wYXJhdG9yKTt9KTt2YXIgemlwPXJlc3QodW56aXApO2Z1bmN0aW9uIHppcE9iamVjdChwcm9wcyx2YWx1ZXMpe3JldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLHZhbHVlcyB8fCBbXSxhc3NpZ25WYWx1ZSk7fWZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsdmFsdWVzKXtyZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSx2YWx1ZXMgfHwgW10sYmFzZVNldCk7fXZhciB6aXBXaXRoPXJlc3QoZnVuY3Rpb24oYXJyYXlzKXt2YXIgbGVuZ3RoPWFycmF5cy5sZW5ndGgsaXRlcmF0ZWU9bGVuZ3RoID4gMT9hcnJheXNbbGVuZ3RoIC0gMV06dW5kZWZpbmVkO2l0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09IFwiZnVuY3Rpb25cIj8oYXJyYXlzLnBvcCgpLGl0ZXJhdGVlKTp1bmRlZmluZWQ7cmV0dXJuIHVuemlwV2l0aChhcnJheXMsaXRlcmF0ZWUpO30pO2Z1bmN0aW9uIGNoYWluKHZhbHVlKXt2YXIgcmVzdWx0PWxvZGFzaCh2YWx1ZSk7cmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gdGFwKHZhbHVlLGludGVyY2VwdG9yKXtpbnRlcmNlcHRvcih2YWx1ZSk7cmV0dXJuIHZhbHVlO31mdW5jdGlvbiB0aHJ1KHZhbHVlLGludGVyY2VwdG9yKXtyZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO312YXIgd3JhcHBlckF0PXJlc3QoZnVuY3Rpb24ocGF0aHMpe3BhdGhzID0gYmFzZUZsYXR0ZW4ocGF0aHMpO3ZhciBsZW5ndGg9cGF0aHMubGVuZ3RoLHN0YXJ0PWxlbmd0aD9wYXRoc1swXTowLHZhbHVlPXRoaXMuX193cmFwcGVkX18saW50ZXJjZXB0b3I9ZnVuY3Rpb24gaW50ZXJjZXB0b3Iob2JqZWN0KXtyZXR1cm4gYmFzZUF0KG9iamVjdCxwYXRocyk7fTtpZihsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8ICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKXtyZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTt9dmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwrc3RhcnQgKyAobGVuZ3RoPzE6MCkpO3ZhbHVlLl9fYWN0aW9uc19fLnB1c2goe2Z1bmM6dGhydSxhcmdzOltpbnRlcmNlcHRvcl0sdGhpc0FyZzp1bmRlZmluZWR9KTtyZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpe2lmKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKXthcnJheS5wdXNoKHVuZGVmaW5lZCk7fXJldHVybiBhcnJheTt9KTt9KTtmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKXtyZXR1cm4gY2hhaW4odGhpcyk7fWZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKXtyZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLHRoaXMuX19jaGFpbl9fKTt9ZnVuY3Rpb24gd3JhcHBlckZsYXRNYXAoaXRlcmF0ZWUpe3JldHVybiB0aGlzLm1hcChpdGVyYXRlZSkuZmxhdHRlbigpO31mdW5jdGlvbiB3cmFwcGVyTmV4dCgpe2lmKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKXt0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7fXZhciBkb25lPXRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsdmFsdWU9ZG9uZT91bmRlZmluZWQ6dGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO3JldHVybiB7ZG9uZTpkb25lLHZhbHVlOnZhbHVlfTt9ZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKXtyZXR1cm4gdGhpczt9ZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKXt2YXIgcmVzdWx0LHBhcmVudD10aGlzO3doaWxlKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHt2YXIgY2xvbmU9d3JhcHBlckNsb25lKHBhcmVudCk7Y2xvbmUuX19pbmRleF9fID0gMDtjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO2lmKHJlc3VsdCl7cHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTt9ZWxzZSB7cmVzdWx0ID0gY2xvbmU7fXZhciBwcmV2aW91cz1jbG9uZTtwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187fXByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKXt2YXIgdmFsdWU9dGhpcy5fX3dyYXBwZWRfXztpZih2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKXt2YXIgd3JhcHBlZD12YWx1ZTtpZih0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCl7d3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTt9d3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO3dyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7ZnVuYzp0aHJ1LGFyZ3M6W3JldmVyc2VdLHRoaXNBcmc6dW5kZWZpbmVkfSk7cmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsdGhpcy5fX2NoYWluX18pO31yZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO31mdW5jdGlvbiB3cmFwcGVyVmFsdWUoKXtyZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLHRoaXMuX19hY3Rpb25zX18pO312YXIgY291bnRCeT1jcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCx2YWx1ZSxrZXkpe2hhc093blByb3BlcnR5LmNhbGwocmVzdWx0LGtleSk/KytyZXN1bHRba2V5XTpyZXN1bHRba2V5XSA9IDE7fSk7ZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbixwcmVkaWNhdGUsZ3VhcmQpe3ZhciBmdW5jPWlzQXJyYXkoY29sbGVjdGlvbik/YXJyYXlFdmVyeTpiYXNlRXZlcnk7aWYoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbixwcmVkaWNhdGUsZ3VhcmQpKXtwcmVkaWNhdGUgPSB1bmRlZmluZWQ7fXJldHVybiBmdW5jKGNvbGxlY3Rpb24sZ2V0SXRlcmF0ZWUocHJlZGljYXRlLDMpKTt9ZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24scHJlZGljYXRlKXt2YXIgZnVuYz1pc0FycmF5KGNvbGxlY3Rpb24pP2FycmF5RmlsdGVyOmJhc2VGaWx0ZXI7cmV0dXJuIGZ1bmMoY29sbGVjdGlvbixnZXRJdGVyYXRlZShwcmVkaWNhdGUsMykpO31mdW5jdGlvbiBmaW5kKGNvbGxlY3Rpb24scHJlZGljYXRlKXtwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsMyk7aWYoaXNBcnJheShjb2xsZWN0aW9uKSl7dmFyIGluZGV4PWJhc2VGaW5kSW5kZXgoY29sbGVjdGlvbixwcmVkaWNhdGUpO3JldHVybiBpbmRleCA+IC0xP2NvbGxlY3Rpb25baW5kZXhdOnVuZGVmaW5lZDt9cmV0dXJuIGJhc2VGaW5kKGNvbGxlY3Rpb24scHJlZGljYXRlLGJhc2VFYWNoKTt9ZnVuY3Rpb24gZmluZExhc3QoY29sbGVjdGlvbixwcmVkaWNhdGUpe3ByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwzKTtpZihpc0FycmF5KGNvbGxlY3Rpb24pKXt2YXIgaW5kZXg9YmFzZUZpbmRJbmRleChjb2xsZWN0aW9uLHByZWRpY2F0ZSx0cnVlKTtyZXR1cm4gaW5kZXggPiAtMT9jb2xsZWN0aW9uW2luZGV4XTp1bmRlZmluZWQ7fXJldHVybiBiYXNlRmluZChjb2xsZWN0aW9uLHByZWRpY2F0ZSxiYXNlRWFjaFJpZ2h0KTt9ZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLGl0ZXJhdGVlKXtyZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24saXRlcmF0ZWUpKTt9ZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLGl0ZXJhdGVlKXtyZXR1cm4gdHlwZW9mIGl0ZXJhdGVlID09IFwiZnVuY3Rpb25cIiAmJiBpc0FycmF5KGNvbGxlY3Rpb24pP2FycmF5RWFjaChjb2xsZWN0aW9uLGl0ZXJhdGVlKTpiYXNlRWFjaChjb2xsZWN0aW9uLHRvRnVuY3Rpb24oaXRlcmF0ZWUpKTt9ZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24saXRlcmF0ZWUpe3JldHVybiB0eXBlb2YgaXRlcmF0ZWUgPT0gXCJmdW5jdGlvblwiICYmIGlzQXJyYXkoY29sbGVjdGlvbik/YXJyYXlFYWNoUmlnaHQoY29sbGVjdGlvbixpdGVyYXRlZSk6YmFzZUVhY2hSaWdodChjb2xsZWN0aW9uLHRvRnVuY3Rpb24oaXRlcmF0ZWUpKTt9dmFyIGdyb3VwQnk9Y3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsdmFsdWUsa2V5KXtpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCxrZXkpKXtyZXN1bHRba2V5XS5wdXNoKHZhbHVlKTt9ZWxzZSB7cmVzdWx0W2tleV0gPSBbdmFsdWVdO319KTtmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLHZhbHVlLGZyb21JbmRleCxndWFyZCl7Y29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pP2NvbGxlY3Rpb246dmFsdWVzKGNvbGxlY3Rpb24pO2Zyb21JbmRleCA9IGZyb21JbmRleCAmJiAhZ3VhcmQ/dG9JbnRlZ2VyKGZyb21JbmRleCk6MDt2YXIgbGVuZ3RoPWNvbGxlY3Rpb24ubGVuZ3RoO2lmKGZyb21JbmRleCA8IDApe2Zyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsMCk7fXJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKT9mcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSxmcm9tSW5kZXgpID4gLTE6ISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbix2YWx1ZSxmcm9tSW5kZXgpID4gLTE7fXZhciBpbnZva2VNYXA9cmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLHBhdGgsYXJncyl7dmFyIGluZGV4PS0xLGlzRnVuYz10eXBlb2YgcGF0aCA9PSBcImZ1bmN0aW9uXCIsaXNQcm9wPWlzS2V5KHBhdGgpLHJlc3VsdD1pc0FycmF5TGlrZShjb2xsZWN0aW9uKT9BcnJheShjb2xsZWN0aW9uLmxlbmd0aCk6W107YmFzZUVhY2goY29sbGVjdGlvbixmdW5jdGlvbih2YWx1ZSl7dmFyIGZ1bmM9aXNGdW5jP3BhdGg6aXNQcm9wICYmIHZhbHVlICE9IG51bGw/dmFsdWVbcGF0aF06dW5kZWZpbmVkO3Jlc3VsdFsrK2luZGV4XSA9IGZ1bmM/YXBwbHkoZnVuYyx2YWx1ZSxhcmdzKTpiYXNlSW52b2tlKHZhbHVlLHBhdGgsYXJncyk7fSk7cmV0dXJuIHJlc3VsdDt9KTt2YXIga2V5Qnk9Y3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsdmFsdWUsa2V5KXtyZXN1bHRba2V5XSA9IHZhbHVlO30pO2Z1bmN0aW9uIG1hcChjb2xsZWN0aW9uLGl0ZXJhdGVlKXt2YXIgZnVuYz1pc0FycmF5KGNvbGxlY3Rpb24pP2FycmF5TWFwOmJhc2VNYXA7cmV0dXJuIGZ1bmMoY29sbGVjdGlvbixnZXRJdGVyYXRlZShpdGVyYXRlZSwzKSk7fWZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbixpdGVyYXRlZXMsb3JkZXJzLGd1YXJkKXtpZihjb2xsZWN0aW9uID09IG51bGwpe3JldHVybiBbXTt9aWYoIWlzQXJyYXkoaXRlcmF0ZWVzKSl7aXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGw/W106W2l0ZXJhdGVlc107fW9yZGVycyA9IGd1YXJkP3VuZGVmaW5lZDpvcmRlcnM7aWYoIWlzQXJyYXkob3JkZXJzKSl7b3JkZXJzID0gb3JkZXJzID09IG51bGw/W106W29yZGVyc107fXJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLGl0ZXJhdGVlcyxvcmRlcnMpO312YXIgcGFydGl0aW9uPWNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LHZhbHVlLGtleSl7cmVzdWx0W2tleT8wOjFdLnB1c2godmFsdWUpO30sZnVuY3Rpb24oKXtyZXR1cm4gW1tdLFtdXTt9KTtmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbixpdGVyYXRlZSxhY2N1bXVsYXRvcil7dmFyIGZ1bmM9aXNBcnJheShjb2xsZWN0aW9uKT9hcnJheVJlZHVjZTpiYXNlUmVkdWNlLGluaXRBY2N1bT1hcmd1bWVudHMubGVuZ3RoIDwgMztyZXR1cm4gZnVuYyhjb2xsZWN0aW9uLGdldEl0ZXJhdGVlKGl0ZXJhdGVlLDQpLGFjY3VtdWxhdG9yLGluaXRBY2N1bSxiYXNlRWFjaCk7fWZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24saXRlcmF0ZWUsYWNjdW11bGF0b3Ipe3ZhciBmdW5jPWlzQXJyYXkoY29sbGVjdGlvbik/YXJyYXlSZWR1Y2VSaWdodDpiYXNlUmVkdWNlLGluaXRBY2N1bT1hcmd1bWVudHMubGVuZ3RoIDwgMztyZXR1cm4gZnVuYyhjb2xsZWN0aW9uLGdldEl0ZXJhdGVlKGl0ZXJhdGVlLDQpLGFjY3VtdWxhdG9yLGluaXRBY2N1bSxiYXNlRWFjaFJpZ2h0KTt9ZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24scHJlZGljYXRlKXt2YXIgZnVuYz1pc0FycmF5KGNvbGxlY3Rpb24pP2FycmF5RmlsdGVyOmJhc2VGaWx0ZXI7cHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLDMpO3JldHVybiBmdW5jKGNvbGxlY3Rpb24sZnVuY3Rpb24odmFsdWUsaW5kZXgsY29sbGVjdGlvbil7cmV0dXJuICFwcmVkaWNhdGUodmFsdWUsaW5kZXgsY29sbGVjdGlvbik7fSk7fWZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKXt2YXIgYXJyYXk9aXNBcnJheUxpa2UoY29sbGVjdGlvbik/Y29sbGVjdGlvbjp2YWx1ZXMoY29sbGVjdGlvbiksbGVuZ3RoPWFycmF5Lmxlbmd0aDtyZXR1cm4gbGVuZ3RoID4gMD9hcnJheVtiYXNlUmFuZG9tKDAsbGVuZ3RoIC0gMSldOnVuZGVmaW5lZDt9ZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLG4pe3ZhciBpbmRleD0tMSxyZXN1bHQ9dG9BcnJheShjb2xsZWN0aW9uKSxsZW5ndGg9cmVzdWx0Lmxlbmd0aCxsYXN0SW5kZXg9bGVuZ3RoIC0gMTtuID0gYmFzZUNsYW1wKHRvSW50ZWdlcihuKSwwLGxlbmd0aCk7d2hpbGUoKytpbmRleCA8IG4pIHt2YXIgcmFuZD1iYXNlUmFuZG9tKGluZGV4LGxhc3RJbmRleCksdmFsdWU9cmVzdWx0W3JhbmRdO3Jlc3VsdFtyYW5kXSA9IHJlc3VsdFtpbmRleF07cmVzdWx0W2luZGV4XSA9IHZhbHVlO31yZXN1bHQubGVuZ3RoID0gbjtyZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pe3JldHVybiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sTUFYX0FSUkFZX0xFTkdUSCk7fWZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbil7aWYoY29sbGVjdGlvbiA9PSBudWxsKXtyZXR1cm4gMDt9aWYoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpe3ZhciByZXN1bHQ9Y29sbGVjdGlvbi5sZW5ndGg7cmV0dXJuIHJlc3VsdCAmJiBpc1N0cmluZyhjb2xsZWN0aW9uKT9zdHJpbmdTaXplKGNvbGxlY3Rpb24pOnJlc3VsdDt9cmV0dXJuIGtleXMoY29sbGVjdGlvbikubGVuZ3RoO31mdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24scHJlZGljYXRlLGd1YXJkKXt2YXIgZnVuYz1pc0FycmF5KGNvbGxlY3Rpb24pP2FycmF5U29tZTpiYXNlU29tZTtpZihndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLHByZWRpY2F0ZSxndWFyZCkpe3ByZWRpY2F0ZSA9IHVuZGVmaW5lZDt9cmV0dXJuIGZ1bmMoY29sbGVjdGlvbixnZXRJdGVyYXRlZShwcmVkaWNhdGUsMykpO312YXIgc29ydEJ5PXJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbixpdGVyYXRlZXMpe2lmKGNvbGxlY3Rpb24gPT0gbnVsbCl7cmV0dXJuIFtdO312YXIgbGVuZ3RoPWl0ZXJhdGVlcy5sZW5ndGg7aWYobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLGl0ZXJhdGVlc1swXSxpdGVyYXRlZXNbMV0pKXtpdGVyYXRlZXMgPSBbXTt9ZWxzZSBpZihsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSxpdGVyYXRlZXNbMV0saXRlcmF0ZWVzWzJdKSl7aXRlcmF0ZWVzLmxlbmd0aCA9IDE7fXJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLGJhc2VGbGF0dGVuKGl0ZXJhdGVlcyksW10pO30pO3ZhciBub3c9RGF0ZS5ub3c7ZnVuY3Rpb24gYWZ0ZXIobixmdW5jKXtpZih0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTt9biA9IHRvSW50ZWdlcihuKTtyZXR1cm4gZnVuY3Rpb24oKXtpZigtLW4gPCAxKXtyZXR1cm4gZnVuYy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fX07fWZ1bmN0aW9uIGFyeShmdW5jLG4sZ3VhcmQpe24gPSBndWFyZD91bmRlZmluZWQ6bjtuID0gZnVuYyAmJiBuID09IG51bGw/ZnVuYy5sZW5ndGg6bjtyZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLEFSWV9GTEFHLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCxuKTt9ZnVuY3Rpb24gYmVmb3JlKG4sZnVuYyl7dmFyIHJlc3VsdDtpZih0eXBlb2YgZnVuYyAhPSBcImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTt9biA9IHRvSW50ZWdlcihuKTtyZXR1cm4gZnVuY3Rpb24oKXtpZigtLW4gPiAwKXtyZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9aWYobiA8PSAxKXtmdW5jID0gdW5kZWZpbmVkO31yZXR1cm4gcmVzdWx0O307fXZhciBiaW5kPXJlc3QoZnVuY3Rpb24oZnVuYyx0aGlzQXJnLHBhcnRpYWxzKXt2YXIgYml0bWFzaz1CSU5EX0ZMQUc7aWYocGFydGlhbHMubGVuZ3RoKXt2YXIgaG9sZGVycz1yZXBsYWNlSG9sZGVycyhwYXJ0aWFscyxiaW5kLnBsYWNlaG9sZGVyKTtiaXRtYXNrIHw9IFBBUlRJQUxfRkxBRzt9cmV0dXJuIGNyZWF0ZVdyYXBwZXIoZnVuYyxiaXRtYXNrLHRoaXNBcmcscGFydGlhbHMsaG9sZGVycyk7fSk7dmFyIGJpbmRLZXk9cmVzdChmdW5jdGlvbihvYmplY3Qsa2V5LHBhcnRpYWxzKXt2YXIgYml0bWFzaz1CSU5EX0ZMQUcgfCBCSU5EX0tFWV9GTEFHO2lmKHBhcnRpYWxzLmxlbmd0aCl7dmFyIGhvbGRlcnM9cmVwbGFjZUhvbGRlcnMocGFydGlhbHMsYmluZEtleS5wbGFjZWhvbGRlcik7Yml0bWFzayB8PSBQQVJUSUFMX0ZMQUc7fXJldHVybiBjcmVhdGVXcmFwcGVyKGtleSxiaXRtYXNrLG9iamVjdCxwYXJ0aWFscyxob2xkZXJzKTt9KTtmdW5jdGlvbiBjdXJyeShmdW5jLGFyaXR5LGd1YXJkKXthcml0eSA9IGd1YXJkP3VuZGVmaW5lZDphcml0eTt2YXIgcmVzdWx0PWNyZWF0ZVdyYXBwZXIoZnVuYyxDVVJSWV9GTEFHLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQsYXJpdHkpO3Jlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYyxhcml0eSxndWFyZCl7YXJpdHkgPSBndWFyZD91bmRlZmluZWQ6YXJpdHk7dmFyIHJlc3VsdD1jcmVhdGVXcmFwcGVyKGZ1bmMsQ1VSUllfUklHSFRfRkxBRyx1bmRlZmluZWQsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQsdW5kZWZpbmVkLGFyaXR5KTtyZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsd2FpdCxvcHRpb25zKXt2YXIgYXJncyxtYXhUaW1lb3V0SWQscmVzdWx0LHN0YW1wLHRoaXNBcmcsdGltZW91dElkLHRyYWlsaW5nQ2FsbCxsYXN0Q2FsbGVkPTAsbGVhZGluZz1mYWxzZSxtYXhXYWl0PWZhbHNlLHRyYWlsaW5nPXRydWU7aWYodHlwZW9mIGZ1bmMgIT0gXCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7fXdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO2lmKGlzT2JqZWN0KG9wdGlvbnMpKXtsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7bWF4V2FpdCA9IFwibWF4V2FpdFwiIGluIG9wdGlvbnMgJiYgbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCx3YWl0KTt0cmFpbGluZyA9IFwidHJhaWxpbmdcIiBpbiBvcHRpb25zPyEhb3B0aW9ucy50cmFpbGluZzp0cmFpbGluZzt9ZnVuY3Rpb24gY2FuY2VsKCl7aWYodGltZW91dElkKXtjbGVhclRpbWVvdXQodGltZW91dElkKTt9aWYobWF4VGltZW91dElkKXtjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTt9bGFzdENhbGxlZCA9IDA7YXJncyA9IG1heFRpbWVvdXRJZCA9IHRoaXNBcmcgPSB0aW1lb3V0SWQgPSB0cmFpbGluZ0NhbGwgPSB1bmRlZmluZWQ7fWZ1bmN0aW9uIGNvbXBsZXRlKGlzQ2FsbGVkLGlkKXtpZihpZCl7Y2xlYXJUaW1lb3V0KGlkKTt9bWF4VGltZW91dElkID0gdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkO2lmKGlzQ2FsbGVkKXtsYXN0Q2FsbGVkID0gbm93KCk7cmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLGFyZ3MpO2lmKCF0aW1lb3V0SWQgJiYgIW1heFRpbWVvdXRJZCl7YXJncyA9IHRoaXNBcmcgPSB1bmRlZmluZWQ7fX19ZnVuY3Rpb24gZGVsYXllZCgpe3ZhciByZW1haW5pbmc9d2FpdCAtIChub3coKSAtIHN0YW1wKTtpZihyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KXtjb21wbGV0ZSh0cmFpbGluZ0NhbGwsbWF4VGltZW91dElkKTt9ZWxzZSB7dGltZW91dElkID0gc2V0VGltZW91dChkZWxheWVkLHJlbWFpbmluZyk7fX1mdW5jdGlvbiBmbHVzaCgpe2lmKHRpbWVvdXRJZCAmJiB0cmFpbGluZ0NhbGwgfHwgbWF4VGltZW91dElkICYmIHRyYWlsaW5nKXtyZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsYXJncyk7fWNhbmNlbCgpO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIG1heERlbGF5ZWQoKXtjb21wbGV0ZSh0cmFpbGluZyx0aW1lb3V0SWQpO31mdW5jdGlvbiBkZWJvdW5jZWQoKXthcmdzID0gYXJndW1lbnRzO3N0YW1wID0gbm93KCk7dGhpc0FyZyA9IHRoaXM7dHJhaWxpbmdDYWxsID0gdHJhaWxpbmcgJiYgKHRpbWVvdXRJZCB8fCAhbGVhZGluZyk7aWYobWF4V2FpdCA9PT0gZmFsc2Upe3ZhciBsZWFkaW5nQ2FsbD1sZWFkaW5nICYmICF0aW1lb3V0SWQ7fWVsc2Uge2lmKCFtYXhUaW1lb3V0SWQgJiYgIWxlYWRpbmcpe2xhc3RDYWxsZWQgPSBzdGFtcDt9dmFyIHJlbWFpbmluZz1tYXhXYWl0IC0gKHN0YW1wIC0gbGFzdENhbGxlZCksaXNDYWxsZWQ9cmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gbWF4V2FpdDtpZihpc0NhbGxlZCl7aWYobWF4VGltZW91dElkKXttYXhUaW1lb3V0SWQgPSBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTt9bGFzdENhbGxlZCA9IHN0YW1wO3Jlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZyxhcmdzKTt9ZWxzZSBpZighbWF4VGltZW91dElkKXttYXhUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KG1heERlbGF5ZWQscmVtYWluaW5nKTt9fWlmKGlzQ2FsbGVkICYmIHRpbWVvdXRJZCl7dGltZW91dElkID0gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7fWVsc2UgaWYoIXRpbWVvdXRJZCAmJiB3YWl0ICE9PSBtYXhXYWl0KXt0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGRlbGF5ZWQsd2FpdCk7fWlmKGxlYWRpbmdDYWxsKXtpc0NhbGxlZCA9IHRydWU7cmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLGFyZ3MpO31pZihpc0NhbGxlZCAmJiAhdGltZW91dElkICYmICFtYXhUaW1lb3V0SWQpe2FyZ3MgPSB0aGlzQXJnID0gdW5kZWZpbmVkO31yZXR1cm4gcmVzdWx0O31kZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO2RlYm91bmNlZC5mbHVzaCA9IGZsdXNoO3JldHVybiBkZWJvdW5jZWQ7fXZhciBkZWZlcj1yZXN0KGZ1bmN0aW9uKGZ1bmMsYXJncyl7cmV0dXJuIGJhc2VEZWxheShmdW5jLDEsYXJncyk7fSk7dmFyIGRlbGF5PXJlc3QoZnVuY3Rpb24oZnVuYyx3YWl0LGFyZ3Mpe3JldHVybiBiYXNlRGVsYXkoZnVuYyx0b051bWJlcih3YWl0KSB8fCAwLGFyZ3MpO30pO2Z1bmN0aW9uIGZsaXAoZnVuYyl7cmV0dXJuIGNyZWF0ZVdyYXBwZXIoZnVuYyxGTElQX0ZMQUcpO31mdW5jdGlvbiBtZW1vaXplKGZ1bmMscmVzb2x2ZXIpe2lmKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIiB8fCByZXNvbHZlciAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gXCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7fXZhciBtZW1vaXplZD1mdW5jdGlvbiBtZW1vaXplZCgpe3ZhciBhcmdzPWFyZ3VtZW50cyxrZXk9cmVzb2x2ZXI/cmVzb2x2ZXIuYXBwbHkodGhpcyxhcmdzKTphcmdzWzBdLGNhY2hlPW1lbW9pemVkLmNhY2hlO2lmKGNhY2hlLmhhcyhrZXkpKXtyZXR1cm4gY2FjaGUuZ2V0KGtleSk7fXZhciByZXN1bHQ9ZnVuYy5hcHBseSh0aGlzLGFyZ3MpO21lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSxyZXN1bHQpO3JldHVybiByZXN1bHQ7fTttZW1vaXplZC5jYWNoZSA9IG5ldyBtZW1vaXplLkNhY2hlKCk7cmV0dXJuIG1lbW9pemVkO31mdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKXtpZih0eXBlb2YgcHJlZGljYXRlICE9IFwiZnVuY3Rpb25cIil7dGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO31yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fTt9ZnVuY3Rpb24gb25jZShmdW5jKXtyZXR1cm4gYmVmb3JlKDIsZnVuYyk7fXZhciBvdmVyQXJncz1yZXN0KGZ1bmN0aW9uKGZ1bmMsdHJhbnNmb3Jtcyl7dHJhbnNmb3JtcyA9IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMpLGdldEl0ZXJhdGVlKCkpO3ZhciBmdW5jc0xlbmd0aD10cmFuc2Zvcm1zLmxlbmd0aDtyZXR1cm4gcmVzdChmdW5jdGlvbihhcmdzKXt2YXIgaW5kZXg9LTEsbGVuZ3RoPW5hdGl2ZU1pbihhcmdzLmxlbmd0aCxmdW5jc0xlbmd0aCk7d2hpbGUoKytpbmRleCA8IGxlbmd0aCkge2FyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLGFyZ3NbaW5kZXhdKTt9cmV0dXJuIGFwcGx5KGZ1bmMsdGhpcyxhcmdzKTt9KTt9KTt2YXIgcGFydGlhbD1yZXN0KGZ1bmN0aW9uKGZ1bmMscGFydGlhbHMpe3ZhciBob2xkZXJzPXJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLHBhcnRpYWwucGxhY2Vob2xkZXIpO3JldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsUEFSVElBTF9GTEFHLHVuZGVmaW5lZCxwYXJ0aWFscyxob2xkZXJzKTt9KTt2YXIgcGFydGlhbFJpZ2h0PXJlc3QoZnVuY3Rpb24oZnVuYyxwYXJ0aWFscyl7dmFyIGhvbGRlcnM9cmVwbGFjZUhvbGRlcnMocGFydGlhbHMscGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyKTtyZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLFBBUlRJQUxfUklHSFRfRkxBRyx1bmRlZmluZWQscGFydGlhbHMsaG9sZGVycyk7fSk7dmFyIHJlYXJnPXJlc3QoZnVuY3Rpb24oZnVuYyxpbmRleGVzKXtyZXR1cm4gY3JlYXRlV3JhcHBlcihmdW5jLFJFQVJHX0ZMQUcsdW5kZWZpbmVkLHVuZGVmaW5lZCx1bmRlZmluZWQsYmFzZUZsYXR0ZW4oaW5kZXhlcykpO30pO2Z1bmN0aW9uIHJlc3QoZnVuYyxzdGFydCl7aWYodHlwZW9mIGZ1bmMgIT0gXCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7fXN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQ/ZnVuYy5sZW5ndGggLSAxOnRvSW50ZWdlcihzdGFydCksMCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGFyZ3M9YXJndW1lbnRzLGluZGV4PS0xLGxlbmd0aD1uYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwwKSxhcnJheT1BcnJheShsZW5ndGgpO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHthcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO31zd2l0Y2goc3RhcnQpe2Nhc2UgMDpyZXR1cm4gZnVuYy5jYWxsKHRoaXMsYXJyYXkpO2Nhc2UgMTpyZXR1cm4gZnVuYy5jYWxsKHRoaXMsYXJnc1swXSxhcnJheSk7Y2FzZSAyOnJldHVybiBmdW5jLmNhbGwodGhpcyxhcmdzWzBdLGFyZ3NbMV0sYXJyYXkpO312YXIgb3RoZXJBcmdzPUFycmF5KHN0YXJ0ICsgMSk7aW5kZXggPSAtMTt3aGlsZSgrK2luZGV4IDwgc3RhcnQpIHtvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07fW90aGVyQXJnc1tzdGFydF0gPSBhcnJheTtyZXR1cm4gYXBwbHkoZnVuYyx0aGlzLG90aGVyQXJncyk7fTt9ZnVuY3Rpb24gc3ByZWFkKGZ1bmMsc3RhcnQpe2lmKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIil7dGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO31zdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQ/MDpuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwwKTtyZXR1cm4gcmVzdChmdW5jdGlvbihhcmdzKXt2YXIgYXJyYXk9YXJnc1tzdGFydF0sb3RoZXJBcmdzPWFyZ3Muc2xpY2UoMCxzdGFydCk7aWYoYXJyYXkpe2FycmF5UHVzaChvdGhlckFyZ3MsYXJyYXkpO31yZXR1cm4gYXBwbHkoZnVuYyx0aGlzLG90aGVyQXJncyk7fSk7fWZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsd2FpdCxvcHRpb25zKXt2YXIgbGVhZGluZz10cnVlLHRyYWlsaW5nPXRydWU7aWYodHlwZW9mIGZ1bmMgIT0gXCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7fWlmKGlzT2JqZWN0KG9wdGlvbnMpKXtsZWFkaW5nID0gXCJsZWFkaW5nXCIgaW4gb3B0aW9ucz8hIW9wdGlvbnMubGVhZGluZzpsZWFkaW5nO3RyYWlsaW5nID0gXCJ0cmFpbGluZ1wiIGluIG9wdGlvbnM/ISFvcHRpb25zLnRyYWlsaW5nOnRyYWlsaW5nO31yZXR1cm4gZGVib3VuY2UoZnVuYyx3YWl0LHtsZWFkaW5nOmxlYWRpbmcsbWF4V2FpdDp3YWl0LHRyYWlsaW5nOnRyYWlsaW5nfSk7fWZ1bmN0aW9uIHVuYXJ5KGZ1bmMpe3JldHVybiBhcnkoZnVuYywxKTt9ZnVuY3Rpb24gd3JhcCh2YWx1ZSx3cmFwcGVyKXt3cmFwcGVyID0gd3JhcHBlciA9PSBudWxsP2lkZW50aXR5OndyYXBwZXI7cmV0dXJuIHBhcnRpYWwod3JhcHBlcix2YWx1ZSk7fWZ1bmN0aW9uIGNsb25lKHZhbHVlKXtyZXR1cm4gYmFzZUNsb25lKHZhbHVlKTt9ZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLGN1c3RvbWl6ZXIpe3JldHVybiBiYXNlQ2xvbmUodmFsdWUsZmFsc2UsY3VzdG9taXplcik7fWZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSl7cmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSx0cnVlKTt9ZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSxjdXN0b21pemVyKXtyZXR1cm4gYmFzZUNsb25lKHZhbHVlLHRydWUsY3VzdG9taXplcik7fWZ1bmN0aW9uIGVxKHZhbHVlLG90aGVyKXtyZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8IHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7fWZ1bmN0aW9uIGd0KHZhbHVlLG90aGVyKXtyZXR1cm4gdmFsdWUgPiBvdGhlcjt9ZnVuY3Rpb24gZ3RlKHZhbHVlLG90aGVyKXtyZXR1cm4gdmFsdWUgPj0gb3RoZXI7fWZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKXtyZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsXCJjYWxsZWVcIikgJiYgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLFwiY2FsbGVlXCIpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpO312YXIgaXNBcnJheT1BcnJheS5pc0FycmF5O2Z1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKXtyZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAhKHR5cGVvZiB2YWx1ZSA9PSBcImZ1bmN0aW9uXCIgJiYgaXNGdW5jdGlvbih2YWx1ZSkpICYmIGlzTGVuZ3RoKGdldExlbmd0aCh2YWx1ZSkpO31mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSl7cmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO31mdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpe3JldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHwgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBib29sVGFnO31mdW5jdGlvbiBpc0RhdGUodmFsdWUpe3JldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGRhdGVUYWc7fWZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSl7cmV0dXJuICEhdmFsdWUgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7fWZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpe2lmKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoaXNBcnJheSh2YWx1ZSkgfHwgaXNTdHJpbmcodmFsdWUpIHx8IGlzRnVuY3Rpb24odmFsdWUuc3BsaWNlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKXtyZXR1cm4gIXZhbHVlLmxlbmd0aDt9Zm9yKHZhciBrZXkgaW4gdmFsdWUpIHtpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLGtleSkpe3JldHVybiBmYWxzZTt9fXJldHVybiB0cnVlO31mdW5jdGlvbiBpc0VxdWFsKHZhbHVlLG90aGVyKXtyZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsb3RoZXIpO31mdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSxvdGhlcixjdXN0b21pemVyKXtjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gXCJmdW5jdGlvblwiP2N1c3RvbWl6ZXI6dW5kZWZpbmVkO3ZhciByZXN1bHQ9Y3VzdG9taXplcj9jdXN0b21pemVyKHZhbHVlLG90aGVyKTp1bmRlZmluZWQ7cmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkP2Jhc2VJc0VxdWFsKHZhbHVlLG90aGVyLGN1c3RvbWl6ZXIpOiEhcmVzdWx0O31mdW5jdGlvbiBpc0Vycm9yKHZhbHVlKXtyZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSBcInN0cmluZ1wiICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGVycm9yVGFnO31mdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTt9ZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSl7dmFyIHRhZz1pc09iamVjdCh2YWx1ZSk/b2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk6XCJcIjtyZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZzt9ZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTt9ZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7fWZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKXt2YXIgdHlwZT10eXBlb2YgdmFsdWU7cmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gXCJvYmplY3RcIiB8fCB0eXBlID09IFwiZnVuY3Rpb25cIik7fWZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSl7cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCI7fWZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LHNvdXJjZSl7cmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCxzb3VyY2UsZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO31mdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3Qsc291cmNlLGN1c3RvbWl6ZXIpe2N1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSBcImZ1bmN0aW9uXCI/Y3VzdG9taXplcjp1bmRlZmluZWQ7cmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCxzb3VyY2UsZ2V0TWF0Y2hEYXRhKHNvdXJjZSksY3VzdG9taXplcik7fWZ1bmN0aW9uIGlzTmFOKHZhbHVlKXtyZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTt9ZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpe2lmKHZhbHVlID09IG51bGwpe3JldHVybiBmYWxzZTt9aWYoaXNGdW5jdGlvbih2YWx1ZSkpe3JldHVybiByZUlzTmF0aXZlLnRlc3QoZnVuY1RvU3RyaW5nLmNhbGwodmFsdWUpKTt9cmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgKGlzSG9zdE9iamVjdCh2YWx1ZSk/cmVJc05hdGl2ZTpyZUlzSG9zdEN0b3IpLnRlc3QodmFsdWUpO31mdW5jdGlvbiBpc051bGwodmFsdWUpe3JldHVybiB2YWx1ZSA9PT0gbnVsbDt9ZnVuY3Rpb24gaXNOaWwodmFsdWUpe3JldHVybiB2YWx1ZSA9PSBudWxsO31mdW5jdGlvbiBpc051bWJlcih2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiIHx8IGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gbnVtYmVyVGFnO31mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKXtpZighaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSAhPSBvYmplY3RUYWcgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSl7cmV0dXJuIGZhbHNlO312YXIgcHJvdG89b2JqZWN0UHJvdG87aWYodHlwZW9mIHZhbHVlLmNvbnN0cnVjdG9yID09IFwiZnVuY3Rpb25cIil7cHJvdG8gPSBnZXRQcm90b3R5cGVPZih2YWx1ZSk7fWlmKHByb3RvID09PSBudWxsKXtyZXR1cm4gdHJ1ZTt9dmFyIEN0b3I9cHJvdG8uY29uc3RydWN0b3I7cmV0dXJuIHR5cGVvZiBDdG9yID09IFwiZnVuY3Rpb25cIiAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJiBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO31mdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSl7cmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSByZWdleHBUYWc7fWZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpe3JldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7fWZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgfHwgIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3RyaW5nVGFnO31mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSBcInN5bWJvbFwiIHx8IGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gc3ltYm9sVGFnO31mdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsdWUpe3JldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKV07fWZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKXtyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDt9ZnVuY3Rpb24gbHQodmFsdWUsb3RoZXIpe3JldHVybiB2YWx1ZSA8IG90aGVyO31mdW5jdGlvbiBsdGUodmFsdWUsb3RoZXIpe3JldHVybiB2YWx1ZSA8PSBvdGhlcjt9ZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSl7aWYoIXZhbHVlKXtyZXR1cm4gW107fWlmKGlzQXJyYXlMaWtlKHZhbHVlKSl7cmV0dXJuIGlzU3RyaW5nKHZhbHVlKT9zdHJpbmdUb0FycmF5KHZhbHVlKTpjb3B5QXJyYXkodmFsdWUpO31pZihpdGVyYXRvclN5bWJvbCAmJiB2YWx1ZVtpdGVyYXRvclN5bWJvbF0pe3JldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbaXRlcmF0b3JTeW1ib2xdKCkpO312YXIgdGFnPWdldFRhZyh2YWx1ZSksZnVuYz10YWcgPT0gbWFwVGFnP21hcFRvQXJyYXk6dGFnID09IHNldFRhZz9zZXRUb0FycmF5OnZhbHVlcztyZXR1cm4gZnVuYyh2YWx1ZSk7fWZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSl7aWYoIXZhbHVlKXtyZXR1cm4gdmFsdWUgPT09IDA/dmFsdWU6MDt9dmFsdWUgPSB0b051bWJlcih2YWx1ZSk7aWYodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpe3ZhciBzaWduPXZhbHVlIDwgMD8tMToxO3JldHVybiBzaWduICogTUFYX0lOVEVHRVI7fXZhciByZW1haW5kZXI9dmFsdWUgJSAxO3JldHVybiB2YWx1ZSA9PT0gdmFsdWU/cmVtYWluZGVyP3ZhbHVlIC0gcmVtYWluZGVyOnZhbHVlOjA7fWZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKXtyZXR1cm4gdmFsdWU/YmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksMCxNQVhfQVJSQVlfTEVOR1RIKTowO31mdW5jdGlvbiB0b051bWJlcih2YWx1ZSl7aWYoaXNPYmplY3QodmFsdWUpKXt2YXIgb3RoZXI9aXNGdW5jdGlvbih2YWx1ZS52YWx1ZU9mKT92YWx1ZS52YWx1ZU9mKCk6dmFsdWU7dmFsdWUgPSBpc09iamVjdChvdGhlcik/b3RoZXIgKyBcIlwiOm90aGVyO31pZih0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIil7cmV0dXJuIHZhbHVlID09PSAwP3ZhbHVlOit2YWx1ZTt9dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSxcIlwiKTt2YXIgaXNCaW5hcnk9cmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtyZXR1cm4gaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpP2ZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSxpc0JpbmFyeT8yOjgpOnJlSXNCYWRIZXgudGVzdCh2YWx1ZSk/TkFOOit2YWx1ZTt9ZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSl7cmV0dXJuIGNvcHlPYmplY3QodmFsdWUsa2V5c0luKHZhbHVlKSk7fWZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpe3JldHVybiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwtTUFYX1NBRkVfSU5URUdFUixNQVhfU0FGRV9JTlRFR0VSKTt9ZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKXtyZXR1cm4gdmFsdWU7fWlmKHZhbHVlID09IG51bGwpe3JldHVybiBcIlwiO31pZihpc1N5bWJvbCh2YWx1ZSkpe3JldHVybiBTeW1ib2w/c3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSk6XCJcIjt9dmFyIHJlc3VsdD12YWx1ZSArIFwiXCI7cmV0dXJuIHJlc3VsdCA9PSBcIjBcIiAmJiAxIC8gdmFsdWUgPT0gLUlORklOSVRZP1wiLTBcIjpyZXN1bHQ7fXZhciBhc3NpZ249Y3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LHNvdXJjZSl7Y29weU9iamVjdChzb3VyY2Usa2V5cyhzb3VyY2UpLG9iamVjdCk7fSk7dmFyIGFzc2lnbkluPWNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCxzb3VyY2Upe2NvcHlPYmplY3Qoc291cmNlLGtleXNJbihzb3VyY2UpLG9iamVjdCk7fSk7dmFyIGFzc2lnbkluV2l0aD1jcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3Qsc291cmNlLHNyY0luZGV4LGN1c3RvbWl6ZXIpe2NvcHlPYmplY3RXaXRoKHNvdXJjZSxrZXlzSW4oc291cmNlKSxvYmplY3QsY3VzdG9taXplcik7fSk7dmFyIGFzc2lnbldpdGg9Y3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LHNvdXJjZSxzcmNJbmRleCxjdXN0b21pemVyKXtjb3B5T2JqZWN0V2l0aChzb3VyY2Usa2V5cyhzb3VyY2UpLG9iamVjdCxjdXN0b21pemVyKTt9KTt2YXIgYXQ9cmVzdChmdW5jdGlvbihvYmplY3QscGF0aHMpe3JldHVybiBiYXNlQXQob2JqZWN0LGJhc2VGbGF0dGVuKHBhdGhzKSk7fSk7ZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSxwcm9wZXJ0aWVzKXt2YXIgcmVzdWx0PWJhc2VDcmVhdGUocHJvdG90eXBlKTtyZXR1cm4gcHJvcGVydGllcz9iYXNlQXNzaWduKHJlc3VsdCxwcm9wZXJ0aWVzKTpyZXN1bHQ7fXZhciBkZWZhdWx0cz1yZXN0KGZ1bmN0aW9uKGFyZ3Mpe2FyZ3MucHVzaCh1bmRlZmluZWQsYXNzaWduSW5EZWZhdWx0cyk7cmV0dXJuIGFwcGx5KGFzc2lnbkluV2l0aCx1bmRlZmluZWQsYXJncyk7fSk7dmFyIGRlZmF1bHRzRGVlcD1yZXN0KGZ1bmN0aW9uKGFyZ3Mpe2FyZ3MucHVzaCh1bmRlZmluZWQsbWVyZ2VEZWZhdWx0cyk7cmV0dXJuIGFwcGx5KG1lcmdlV2l0aCx1bmRlZmluZWQsYXJncyk7fSk7ZnVuY3Rpb24gZmluZEtleShvYmplY3QscHJlZGljYXRlKXtyZXR1cm4gYmFzZUZpbmQob2JqZWN0LGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwzKSxiYXNlRm9yT3duLHRydWUpO31mdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QscHJlZGljYXRlKXtyZXR1cm4gYmFzZUZpbmQob2JqZWN0LGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwzKSxiYXNlRm9yT3duUmlnaHQsdHJ1ZSk7fWZ1bmN0aW9uIGZvckluKG9iamVjdCxpdGVyYXRlZSl7cmV0dXJuIG9iamVjdCA9PSBudWxsP29iamVjdDpiYXNlRm9yKG9iamVjdCx0b0Z1bmN0aW9uKGl0ZXJhdGVlKSxrZXlzSW4pO31mdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCxpdGVyYXRlZSl7cmV0dXJuIG9iamVjdCA9PSBudWxsP29iamVjdDpiYXNlRm9yUmlnaHQob2JqZWN0LHRvRnVuY3Rpb24oaXRlcmF0ZWUpLGtleXNJbik7fWZ1bmN0aW9uIGZvck93bihvYmplY3QsaXRlcmF0ZWUpe3JldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsdG9GdW5jdGlvbihpdGVyYXRlZSkpO31mdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsaXRlcmF0ZWUpe3JldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCx0b0Z1bmN0aW9uKGl0ZXJhdGVlKSk7fWZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3Qpe3JldHVybiBvYmplY3QgPT0gbnVsbD9bXTpiYXNlRnVuY3Rpb25zKG9iamVjdCxrZXlzKG9iamVjdCkpO31mdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3Qpe3JldHVybiBvYmplY3QgPT0gbnVsbD9bXTpiYXNlRnVuY3Rpb25zKG9iamVjdCxrZXlzSW4ob2JqZWN0KSk7fWZ1bmN0aW9uIGdldChvYmplY3QscGF0aCxkZWZhdWx0VmFsdWUpe3ZhciByZXN1bHQ9b2JqZWN0ID09IG51bGw/dW5kZWZpbmVkOmJhc2VHZXQob2JqZWN0LHBhdGgpO3JldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZD9kZWZhdWx0VmFsdWU6cmVzdWx0O31mdW5jdGlvbiBoYXMob2JqZWN0LHBhdGgpe3JldHVybiBoYXNQYXRoKG9iamVjdCxwYXRoLGJhc2VIYXMpO31mdW5jdGlvbiBoYXNJbihvYmplY3QscGF0aCl7cmV0dXJuIGhhc1BhdGgob2JqZWN0LHBhdGgsYmFzZUhhc0luKTt9dmFyIGludmVydD1jcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsdmFsdWUsa2V5KXtyZXN1bHRbdmFsdWVdID0ga2V5O30sY29uc3RhbnQoaWRlbnRpdHkpKTt2YXIgaW52ZXJ0Qnk9Y3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LHZhbHVlLGtleSl7aWYoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsdmFsdWUpKXtyZXN1bHRbdmFsdWVdLnB1c2goa2V5KTt9ZWxzZSB7cmVzdWx0W3ZhbHVlXSA9IFtrZXldO319LGdldEl0ZXJhdGVlKTt2YXIgaW52b2tlPXJlc3QoYmFzZUludm9rZSk7ZnVuY3Rpb24ga2V5cyhvYmplY3Qpe3ZhciBpc1Byb3RvPWlzUHJvdG90eXBlKG9iamVjdCk7aWYoIShpc1Byb3RvIHx8IGlzQXJyYXlMaWtlKG9iamVjdCkpKXtyZXR1cm4gYmFzZUtleXMob2JqZWN0KTt9dmFyIGluZGV4ZXM9aW5kZXhLZXlzKG9iamVjdCksc2tpcEluZGV4ZXM9ISFpbmRleGVzLHJlc3VsdD1pbmRleGVzIHx8IFtdLGxlbmd0aD1yZXN1bHQubGVuZ3RoO2Zvcih2YXIga2V5IGluIG9iamVjdCkge2lmKGJhc2VIYXMob2JqZWN0LGtleSkgJiYgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09IFwibGVuZ3RoXCIgfHwgaXNJbmRleChrZXksbGVuZ3RoKSkpICYmICEoaXNQcm90byAmJiBrZXkgPT0gXCJjb25zdHJ1Y3RvclwiKSl7cmVzdWx0LnB1c2goa2V5KTt9fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIGtleXNJbihvYmplY3Qpe3ZhciBpbmRleD0tMSxpc1Byb3RvPWlzUHJvdG90eXBlKG9iamVjdCkscHJvcHM9YmFzZUtleXNJbihvYmplY3QpLHByb3BzTGVuZ3RoPXByb3BzLmxlbmd0aCxpbmRleGVzPWluZGV4S2V5cyhvYmplY3QpLHNraXBJbmRleGVzPSEhaW5kZXhlcyxyZXN1bHQ9aW5kZXhlcyB8fCBbXSxsZW5ndGg9cmVzdWx0Lmxlbmd0aDt3aGlsZSgrK2luZGV4IDwgcHJvcHNMZW5ndGgpIHt2YXIga2V5PXByb3BzW2luZGV4XTtpZighKHNraXBJbmRleGVzICYmIChrZXkgPT0gXCJsZW5ndGhcIiB8fCBpc0luZGV4KGtleSxsZW5ndGgpKSkgJiYgIShrZXkgPT0gXCJjb25zdHJ1Y3RvclwiICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCxrZXkpKSkpe3Jlc3VsdC5wdXNoKGtleSk7fX1yZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBtYXBLZXlzKG9iamVjdCxpdGVyYXRlZSl7dmFyIHJlc3VsdD17fTtpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLDMpO2Jhc2VGb3JPd24ob2JqZWN0LGZ1bmN0aW9uKHZhbHVlLGtleSxvYmplY3Qpe3Jlc3VsdFtpdGVyYXRlZSh2YWx1ZSxrZXksb2JqZWN0KV0gPSB2YWx1ZTt9KTtyZXR1cm4gcmVzdWx0O31mdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LGl0ZXJhdGVlKXt2YXIgcmVzdWx0PXt9O2l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsMyk7YmFzZUZvck93bihvYmplY3QsZnVuY3Rpb24odmFsdWUsa2V5LG9iamVjdCl7cmVzdWx0W2tleV0gPSBpdGVyYXRlZSh2YWx1ZSxrZXksb2JqZWN0KTt9KTtyZXR1cm4gcmVzdWx0O312YXIgbWVyZ2U9Y3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LHNvdXJjZSxzcmNJbmRleCl7YmFzZU1lcmdlKG9iamVjdCxzb3VyY2Usc3JjSW5kZXgpO30pO3ZhciBtZXJnZVdpdGg9Y3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LHNvdXJjZSxzcmNJbmRleCxjdXN0b21pemVyKXtiYXNlTWVyZ2Uob2JqZWN0LHNvdXJjZSxzcmNJbmRleCxjdXN0b21pemVyKTt9KTt2YXIgb21pdD1yZXN0KGZ1bmN0aW9uKG9iamVjdCxwcm9wcyl7aWYob2JqZWN0ID09IG51bGwpe3JldHVybiB7fTt9cHJvcHMgPSBhcnJheU1hcChiYXNlRmxhdHRlbihwcm9wcyksU3RyaW5nKTtyZXR1cm4gYmFzZVBpY2sob2JqZWN0LGJhc2VEaWZmZXJlbmNlKGtleXNJbihvYmplY3QpLHByb3BzKSk7fSk7ZnVuY3Rpb24gb21pdEJ5KG9iamVjdCxwcmVkaWNhdGUpe3ByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwyKTtyZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsZnVuY3Rpb24odmFsdWUsa2V5KXtyZXR1cm4gIXByZWRpY2F0ZSh2YWx1ZSxrZXkpO30pO312YXIgcGljaz1yZXN0KGZ1bmN0aW9uKG9iamVjdCxwcm9wcyl7cmV0dXJuIG9iamVjdCA9PSBudWxsP3t9OmJhc2VQaWNrKG9iamVjdCxiYXNlRmxhdHRlbihwcm9wcykpO30pO2Z1bmN0aW9uIHBpY2tCeShvYmplY3QscHJlZGljYXRlKXtyZXR1cm4gb2JqZWN0ID09IG51bGw/e306YmFzZVBpY2tCeShvYmplY3QsZ2V0SXRlcmF0ZWUocHJlZGljYXRlLDIpKTt9ZnVuY3Rpb24gcmVzdWx0KG9iamVjdCxwYXRoLGRlZmF1bHRWYWx1ZSl7aWYoIWlzS2V5KHBhdGgsb2JqZWN0KSl7cGF0aCA9IGJhc2VUb1BhdGgocGF0aCk7dmFyIHJlc3VsdD1nZXQob2JqZWN0LHBhdGgpO29iamVjdCA9IHBhcmVudChvYmplY3QscGF0aCk7fWVsc2Uge3Jlc3VsdCA9IG9iamVjdCA9PSBudWxsP3VuZGVmaW5lZDpvYmplY3RbcGF0aF07fWlmKHJlc3VsdCA9PT0gdW5kZWZpbmVkKXtyZXN1bHQgPSBkZWZhdWx0VmFsdWU7fXJldHVybiBpc0Z1bmN0aW9uKHJlc3VsdCk/cmVzdWx0LmNhbGwob2JqZWN0KTpyZXN1bHQ7fWZ1bmN0aW9uIHNldChvYmplY3QscGF0aCx2YWx1ZSl7cmV0dXJuIG9iamVjdCA9PSBudWxsP29iamVjdDpiYXNlU2V0KG9iamVjdCxwYXRoLHZhbHVlKTt9ZnVuY3Rpb24gc2V0V2l0aChvYmplY3QscGF0aCx2YWx1ZSxjdXN0b21pemVyKXtjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gXCJmdW5jdGlvblwiP2N1c3RvbWl6ZXI6dW5kZWZpbmVkO3JldHVybiBvYmplY3QgPT0gbnVsbD9vYmplY3Q6YmFzZVNldChvYmplY3QscGF0aCx2YWx1ZSxjdXN0b21pemVyKTt9ZnVuY3Rpb24gdG9QYWlycyhvYmplY3Qpe3JldHVybiBiYXNlVG9QYWlycyhvYmplY3Qsa2V5cyhvYmplY3QpKTt9ZnVuY3Rpb24gdG9QYWlyc0luKG9iamVjdCl7cmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCxrZXlzSW4ob2JqZWN0KSk7fWZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsaXRlcmF0ZWUsYWNjdW11bGF0b3Ipe3ZhciBpc0Fycj1pc0FycmF5KG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7aXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSw0KTtpZihhY2N1bXVsYXRvciA9PSBudWxsKXtpZihpc0FyciB8fCBpc09iamVjdChvYmplY3QpKXt2YXIgQ3Rvcj1vYmplY3QuY29uc3RydWN0b3I7aWYoaXNBcnIpe2FjY3VtdWxhdG9yID0gaXNBcnJheShvYmplY3QpP25ldyBDdG9yKCk6W107fWVsc2Uge2FjY3VtdWxhdG9yID0gYmFzZUNyZWF0ZShpc0Z1bmN0aW9uKEN0b3IpP0N0b3IucHJvdG90eXBlOnVuZGVmaW5lZCk7fX1lbHNlIHthY2N1bXVsYXRvciA9IHt9O319KGlzQXJyP2FycmF5RWFjaDpiYXNlRm9yT3duKShvYmplY3QsZnVuY3Rpb24odmFsdWUsaW5kZXgsb2JqZWN0KXtyZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsdmFsdWUsaW5kZXgsb2JqZWN0KTt9KTtyZXR1cm4gYWNjdW11bGF0b3I7fWZ1bmN0aW9uIHVuc2V0KG9iamVjdCxwYXRoKXtyZXR1cm4gb2JqZWN0ID09IG51bGw/dHJ1ZTpiYXNlVW5zZXQob2JqZWN0LHBhdGgpO31mdW5jdGlvbiB2YWx1ZXMob2JqZWN0KXtyZXR1cm4gb2JqZWN0P2Jhc2VWYWx1ZXMob2JqZWN0LGtleXMob2JqZWN0KSk6W107fWZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCl7cmV0dXJuIG9iamVjdCA9PSBudWxsP2Jhc2VWYWx1ZXMob2JqZWN0LGtleXNJbihvYmplY3QpKTpbXTt9ZnVuY3Rpb24gY2xhbXAobnVtYmVyLGxvd2VyLHVwcGVyKXtpZih1cHBlciA9PT0gdW5kZWZpbmVkKXt1cHBlciA9IGxvd2VyO2xvd2VyID0gdW5kZWZpbmVkO31pZih1cHBlciAhPT0gdW5kZWZpbmVkKXt1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTt1cHBlciA9IHVwcGVyID09PSB1cHBlcj91cHBlcjowO31pZihsb3dlciAhPT0gdW5kZWZpbmVkKXtsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtsb3dlciA9IGxvd2VyID09PSBsb3dlcj9sb3dlcjowO31yZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksbG93ZXIsdXBwZXIpO31mdW5jdGlvbiBpblJhbmdlKG51bWJlcixzdGFydCxlbmQpe3N0YXJ0ID0gdG9OdW1iZXIoc3RhcnQpIHx8IDA7aWYoZW5kID09PSB1bmRlZmluZWQpe2VuZCA9IHN0YXJ0O3N0YXJ0ID0gMDt9ZWxzZSB7ZW5kID0gdG9OdW1iZXIoZW5kKSB8fCAwO31udW1iZXIgPSB0b051bWJlcihudW1iZXIpO3JldHVybiBiYXNlSW5SYW5nZShudW1iZXIsc3RhcnQsZW5kKTt9ZnVuY3Rpb24gcmFuZG9tKGxvd2VyLHVwcGVyLGZsb2F0aW5nKXtpZihmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gXCJib29sZWFuXCIgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsdXBwZXIsZmxvYXRpbmcpKXt1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO31pZihmbG9hdGluZyA9PT0gdW5kZWZpbmVkKXtpZih0eXBlb2YgdXBwZXIgPT0gXCJib29sZWFuXCIpe2Zsb2F0aW5nID0gdXBwZXI7dXBwZXIgPSB1bmRlZmluZWQ7fWVsc2UgaWYodHlwZW9mIGxvd2VyID09IFwiYm9vbGVhblwiKXtmbG9hdGluZyA9IGxvd2VyO2xvd2VyID0gdW5kZWZpbmVkO319aWYobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKXtsb3dlciA9IDA7dXBwZXIgPSAxO31lbHNlIHtsb3dlciA9IHRvTnVtYmVyKGxvd2VyKSB8fCAwO2lmKHVwcGVyID09PSB1bmRlZmluZWQpe3VwcGVyID0gbG93ZXI7bG93ZXIgPSAwO31lbHNlIHt1cHBlciA9IHRvTnVtYmVyKHVwcGVyKSB8fCAwO319aWYobG93ZXIgPiB1cHBlcil7dmFyIHRlbXA9bG93ZXI7bG93ZXIgPSB1cHBlcjt1cHBlciA9IHRlbXA7fWlmKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpe3ZhciByYW5kPW5hdGl2ZVJhbmRvbSgpO3JldHVybiBuYXRpdmVNaW4obG93ZXIgKyByYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdChcIjFlLVwiICsgKChyYW5kICsgXCJcIikubGVuZ3RoIC0gMSkpKSx1cHBlcik7fXJldHVybiBiYXNlUmFuZG9tKGxvd2VyLHVwcGVyKTt9dmFyIGNhbWVsQ2FzZT1jcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCx3b3JkLGluZGV4KXt3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO3JldHVybiByZXN1bHQgKyAoaW5kZXg/Y2FwaXRhbGl6ZSh3b3JkKTp3b3JkKTt9KTtmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZyl7cmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTt9ZnVuY3Rpb24gZGVidXJyKHN0cmluZyl7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtyZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4xLGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyayxcIlwiKTt9ZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLHRhcmdldCxwb3NpdGlvbil7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTt0YXJnZXQgPSB0eXBlb2YgdGFyZ2V0ID09IFwic3RyaW5nXCI/dGFyZ2V0OnRhcmdldCArIFwiXCI7dmFyIGxlbmd0aD1zdHJpbmcubGVuZ3RoO3Bvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZD9sZW5ndGg6YmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksMCxsZW5ndGgpO3Bvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7cmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLmluZGV4T2YodGFyZ2V0LHBvc2l0aW9uKSA9PSBwb3NpdGlvbjt9ZnVuY3Rpb24gZXNjYXBlKHN0cmluZyl7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtyZXR1cm4gc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZyk/c3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLGVzY2FwZUh0bWxDaGFyKTpzdHJpbmc7fWZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpe3N0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7cmV0dXJuIHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpP3N0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhcixcIlxcXFwkJlwiKTpzdHJpbmc7fXZhciBrZWJhYkNhc2U9Y3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsd29yZCxpbmRleCl7cmV0dXJuIHJlc3VsdCArIChpbmRleD9cIi1cIjpcIlwiKSArIHdvcmQudG9Mb3dlckNhc2UoKTt9KTt2YXIgbG93ZXJDYXNlPWNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LHdvcmQsaW5kZXgpe3JldHVybiByZXN1bHQgKyAoaW5kZXg/XCIgXCI6XCJcIikgKyB3b3JkLnRvTG93ZXJDYXNlKCk7fSk7dmFyIGxvd2VyRmlyc3Q9Y3JlYXRlQ2FzZUZpcnN0KFwidG9Mb3dlckNhc2VcIik7dmFyIHVwcGVyRmlyc3Q9Y3JlYXRlQ2FzZUZpcnN0KFwidG9VcHBlckNhc2VcIik7ZnVuY3Rpb24gcGFkKHN0cmluZyxsZW5ndGgsY2hhcnMpe3N0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7bGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7dmFyIHN0ckxlbmd0aD1zdHJpbmdTaXplKHN0cmluZyk7aWYoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKXtyZXR1cm4gc3RyaW5nO312YXIgbWlkPShsZW5ndGggLSBzdHJMZW5ndGgpIC8gMixsZWZ0TGVuZ3RoPW5hdGl2ZUZsb29yKG1pZCkscmlnaHRMZW5ndGg9bmF0aXZlQ2VpbChtaWQpO3JldHVybiBjcmVhdGVQYWRkaW5nKFwiXCIsbGVmdExlbmd0aCxjaGFycykgKyBzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKFwiXCIscmlnaHRMZW5ndGgsY2hhcnMpO31mdW5jdGlvbiBwYWRFbmQoc3RyaW5nLGxlbmd0aCxjaGFycyl7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtyZXR1cm4gc3RyaW5nICsgY3JlYXRlUGFkZGluZyhzdHJpbmcsbGVuZ3RoLGNoYXJzKTt9ZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLGxlbmd0aCxjaGFycyl7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtyZXR1cm4gY3JlYXRlUGFkZGluZyhzdHJpbmcsbGVuZ3RoLGNoYXJzKSArIHN0cmluZzt9ZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLHJhZGl4LGd1YXJkKXtpZihndWFyZCB8fCByYWRpeCA9PSBudWxsKXtyYWRpeCA9IDA7fWVsc2UgaWYocmFkaXgpe3JhZGl4ID0gK3JhZGl4O31zdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltLFwiXCIpO3JldHVybiBuYXRpdmVQYXJzZUludChzdHJpbmcscmFkaXggfHwgKHJlSGFzSGV4UHJlZml4LnRlc3Qoc3RyaW5nKT8xNjoxMCkpO31mdW5jdGlvbiByZXBlYXQoc3RyaW5nLG4pe3N0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7biA9IHRvSW50ZWdlcihuKTt2YXIgcmVzdWx0PVwiXCI7aWYoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUil7cmV0dXJuIHJlc3VsdDt9ZG8ge2lmKG4gJSAyKXtyZXN1bHQgKz0gc3RyaW5nO31uID0gbmF0aXZlRmxvb3IobiAvIDIpO3N0cmluZyArPSBzdHJpbmc7fXdoaWxlKG4pO3JldHVybiByZXN1bHQ7fWZ1bmN0aW9uIHJlcGxhY2UoKXt2YXIgYXJncz1hcmd1bWVudHMsc3RyaW5nPXRvU3RyaW5nKGFyZ3NbMF0pO3JldHVybiBhcmdzLmxlbmd0aCA8IDM/c3RyaW5nOnN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sYXJnc1syXSk7fXZhciBzbmFrZUNhc2U9Y3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsd29yZCxpbmRleCl7cmV0dXJuIHJlc3VsdCArIChpbmRleD9cIl9cIjpcIlwiKSArIHdvcmQudG9Mb3dlckNhc2UoKTt9KTtmdW5jdGlvbiBzcGxpdChzdHJpbmcsc2VwYXJhdG9yLGxpbWl0KXtyZXR1cm4gdG9TdHJpbmcoc3RyaW5nKS5zcGxpdChzZXBhcmF0b3IsbGltaXQpO312YXIgc3RhcnRDYXNlPWNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LHdvcmQsaW5kZXgpe3JldHVybiByZXN1bHQgKyAoaW5kZXg/XCIgXCI6XCJcIikgKyBjYXBpdGFsaXplKHdvcmQpO30pO2Z1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLHRhcmdldCxwb3NpdGlvbil7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtwb3NpdGlvbiA9IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLDAsc3RyaW5nLmxlbmd0aCk7cmV0dXJuIHN0cmluZy5sYXN0SW5kZXhPZih0YXJnZXQscG9zaXRpb24pID09IHBvc2l0aW9uO31mdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsb3B0aW9ucyxndWFyZCl7dmFyIHNldHRpbmdzPWxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO2lmKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZyxvcHRpb25zLGd1YXJkKSl7b3B0aW9ucyA9IHVuZGVmaW5lZDt9c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LG9wdGlvbnMsc2V0dGluZ3MsYXNzaWduSW5EZWZhdWx0cyk7dmFyIGltcG9ydHM9YXNzaWduSW5XaXRoKHt9LG9wdGlvbnMuaW1wb3J0cyxzZXR0aW5ncy5pbXBvcnRzLGFzc2lnbkluRGVmYXVsdHMpLGltcG9ydHNLZXlzPWtleXMoaW1wb3J0cyksaW1wb3J0c1ZhbHVlcz1iYXNlVmFsdWVzKGltcG9ydHMsaW1wb3J0c0tleXMpO3ZhciBpc0VzY2FwaW5nLGlzRXZhbHVhdGluZyxpbmRleD0wLGludGVycG9sYXRlPW9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLHNvdXJjZT1cIl9fcCArPSAnXCI7dmFyIHJlRGVsaW1pdGVycz1SZWdFeHAoKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgXCJ8XCIgKyBpbnRlcnBvbGF0ZS5zb3VyY2UgKyBcInxcIiArIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZT9yZUVzVGVtcGxhdGU6cmVOb01hdGNoKS5zb3VyY2UgKyBcInxcIiArIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgXCJ8JFwiLFwiZ1wiKTt2YXIgc291cmNlVVJMPVwiLy8jIHNvdXJjZVVSTD1cIiArIChcInNvdXJjZVVSTFwiIGluIG9wdGlvbnM/b3B0aW9ucy5zb3VyY2VVUkw6XCJsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW1wiICsgKyt0ZW1wbGF0ZUNvdW50ZXIgKyBcIl1cIikgKyBcIlxcblwiO3N0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycyxmdW5jdGlvbihtYXRjaCxlc2NhcGVWYWx1ZSxpbnRlcnBvbGF0ZVZhbHVlLGVzVGVtcGxhdGVWYWx1ZSxldmFsdWF0ZVZhbHVlLG9mZnNldCl7aW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7c291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCxvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsZXNjYXBlU3RyaW5nQ2hhcik7aWYoZXNjYXBlVmFsdWUpe2lzRXNjYXBpbmcgPSB0cnVlO3NvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7fWlmKGV2YWx1YXRlVmFsdWUpe2lzRXZhbHVhdGluZyA9IHRydWU7c291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO31pZihpbnRlcnBvbGF0ZVZhbHVlKXtzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjt9aW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7cmV0dXJuIG1hdGNoO30pO3NvdXJjZSArPSBcIic7XFxuXCI7dmFyIHZhcmlhYmxlPW9wdGlvbnMudmFyaWFibGU7aWYoIXZhcmlhYmxlKXtzb3VyY2UgPSBcIndpdGggKG9iaikge1xcblwiICsgc291cmNlICsgXCJcXG59XFxuXCI7fXNvdXJjZSA9IChpc0V2YWx1YXRpbmc/c291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsXCJcIik6c291cmNlKS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsXCIkMVwiKS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZyxcIiQxO1wiKTtzb3VyY2UgPSBcImZ1bmN0aW9uKFwiICsgKHZhcmlhYmxlIHx8IFwib2JqXCIpICsgXCIpIHtcXG5cIiArICh2YXJpYWJsZT9cIlwiOlwib2JqIHx8IChvYmogPSB7fSk7XFxuXCIpICsgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICsgKGlzRXNjYXBpbmc/XCIsIF9fZSA9IF8uZXNjYXBlXCI6XCJcIikgKyAoaXNFdmFsdWF0aW5nP1wiLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG5cIiArIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCI6XCI7XFxuXCIpICsgc291cmNlICsgXCJyZXR1cm4gX19wXFxufVwiO3ZhciByZXN1bHQ9YXR0ZW1wdChmdW5jdGlvbigpe3JldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cyxzb3VyY2VVUkwgKyBcInJldHVybiBcIiArIHNvdXJjZSkuYXBwbHkodW5kZWZpbmVkLGltcG9ydHNWYWx1ZXMpO30pO3Jlc3VsdC5zb3VyY2UgPSBzb3VyY2U7aWYoaXNFcnJvcihyZXN1bHQpKXt0aHJvdyByZXN1bHQ7fXJldHVybiByZXN1bHQ7fWZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpe3JldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTt9ZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSl7cmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO31mdW5jdGlvbiB0cmltKHN0cmluZyxjaGFycyxndWFyZCl7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtpZighc3RyaW5nKXtyZXR1cm4gc3RyaW5nO31pZihndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKXtyZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltLFwiXCIpO31jaGFycyA9IGNoYXJzICsgXCJcIjtpZighY2hhcnMpe3JldHVybiBzdHJpbmc7fXZhciBzdHJTeW1ib2xzPXN0cmluZ1RvQXJyYXkoc3RyaW5nKSxjaHJTeW1ib2xzPXN0cmluZ1RvQXJyYXkoY2hhcnMpO3JldHVybiBzdHJTeW1ib2xzLnNsaWNlKGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLGNoclN5bWJvbHMpLGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scyxjaHJTeW1ib2xzKSArIDEpLmpvaW4oXCJcIik7fWZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLGNoYXJzLGd1YXJkKXtzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO2lmKCFzdHJpbmcpe3JldHVybiBzdHJpbmc7fWlmKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpe3JldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1FbmQsXCJcIik7fWNoYXJzID0gY2hhcnMgKyBcIlwiO2lmKCFjaGFycyl7cmV0dXJuIHN0cmluZzt9dmFyIHN0clN5bWJvbHM9c3RyaW5nVG9BcnJheShzdHJpbmcpO3JldHVybiBzdHJTeW1ib2xzLnNsaWNlKDAsY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDEpLmpvaW4oXCJcIik7fWZ1bmN0aW9uIHRyaW1TdGFydChzdHJpbmcsY2hhcnMsZ3VhcmQpe3N0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7aWYoIXN0cmluZyl7cmV0dXJuIHN0cmluZzt9aWYoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCl7cmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LFwiXCIpO31jaGFycyA9IGNoYXJzICsgXCJcIjtpZighY2hhcnMpe3JldHVybiBzdHJpbmc7fXZhciBzdHJTeW1ib2xzPXN0cmluZ1RvQXJyYXkoc3RyaW5nKTtyZXR1cm4gc3RyU3ltYm9scy5zbGljZShjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scyxzdHJpbmdUb0FycmF5KGNoYXJzKSkpLmpvaW4oXCJcIik7fWZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZyxvcHRpb25zKXt2YXIgbGVuZ3RoPURFRkFVTFRfVFJVTkNfTEVOR1RILG9taXNzaW9uPURFRkFVTFRfVFJVTkNfT01JU1NJT047aWYoaXNPYmplY3Qob3B0aW9ucykpe3ZhciBzZXBhcmF0b3I9XCJzZXBhcmF0b3JcIiBpbiBvcHRpb25zP29wdGlvbnMuc2VwYXJhdG9yOnNlcGFyYXRvcjtsZW5ndGggPSBcImxlbmd0aFwiIGluIG9wdGlvbnM/dG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKTpsZW5ndGg7b21pc3Npb24gPSBcIm9taXNzaW9uXCIgaW4gb3B0aW9ucz90b1N0cmluZyhvcHRpb25zLm9taXNzaW9uKTpvbWlzc2lvbjt9c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTt2YXIgc3RyTGVuZ3RoPXN0cmluZy5sZW5ndGg7aWYocmVIYXNDb21wbGV4U3ltYm9sLnRlc3Qoc3RyaW5nKSl7dmFyIHN0clN5bWJvbHM9c3RyaW5nVG9BcnJheShzdHJpbmcpO3N0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO31pZihsZW5ndGggPj0gc3RyTGVuZ3RoKXtyZXR1cm4gc3RyaW5nO312YXIgZW5kPWxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO2lmKGVuZCA8IDEpe3JldHVybiBvbWlzc2lvbjt9dmFyIHJlc3VsdD1zdHJTeW1ib2xzP3N0clN5bWJvbHMuc2xpY2UoMCxlbmQpLmpvaW4oXCJcIik6c3RyaW5nLnNsaWNlKDAsZW5kKTtpZihzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCl7cmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO31pZihzdHJTeW1ib2xzKXtlbmQgKz0gcmVzdWx0Lmxlbmd0aCAtIGVuZDt9aWYoaXNSZWdFeHAoc2VwYXJhdG9yKSl7aWYoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpe3ZhciBtYXRjaCxzdWJzdHJpbmc9cmVzdWx0O2lmKCFzZXBhcmF0b3IuZ2xvYmFsKXtzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSx0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyBcImdcIik7fXNlcGFyYXRvci5sYXN0SW5kZXggPSAwO3doaWxlKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkge3ZhciBuZXdFbmQ9bWF0Y2guaW5kZXg7fXJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLG5ld0VuZCA9PT0gdW5kZWZpbmVkP2VuZDpuZXdFbmQpO319ZWxzZSBpZihzdHJpbmcuaW5kZXhPZihzZXBhcmF0b3IsZW5kKSAhPSBlbmQpe3ZhciBpbmRleD1yZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtpZihpbmRleCA+IC0xKXtyZXN1bHQgPSByZXN1bHQuc2xpY2UoMCxpbmRleCk7fX1yZXR1cm4gcmVzdWx0ICsgb21pc3Npb247fWZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZyl7c3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtyZXR1cm4gc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpP3N0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsdW5lc2NhcGVIdG1sQ2hhcik6c3RyaW5nO312YXIgdXBwZXJDYXNlPWNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LHdvcmQsaW5kZXgpe3JldHVybiByZXN1bHQgKyAoaW5kZXg/XCIgXCI6XCJcIikgKyB3b3JkLnRvVXBwZXJDYXNlKCk7fSk7ZnVuY3Rpb24gd29yZHMoc3RyaW5nLHBhdHRlcm4sZ3VhcmQpe3N0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7cGF0dGVybiA9IGd1YXJkP3VuZGVmaW5lZDpwYXR0ZXJuO2lmKHBhdHRlcm4gPT09IHVuZGVmaW5lZCl7cGF0dGVybiA9IHJlSGFzQ29tcGxleFdvcmQudGVzdChzdHJpbmcpP3JlQ29tcGxleFdvcmQ6cmVCYXNpY1dvcmQ7fXJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107fXZhciBhdHRlbXB0PXJlc3QoZnVuY3Rpb24oZnVuYyxhcmdzKXt0cnl7cmV0dXJuIGFwcGx5KGZ1bmMsdW5kZWZpbmVkLGFyZ3MpO31jYXRjaChlKSB7cmV0dXJuIGlzT2JqZWN0KGUpP2U6bmV3IEVycm9yKGUpO319KTt2YXIgYmluZEFsbD1yZXN0KGZ1bmN0aW9uKG9iamVjdCxtZXRob2ROYW1lcyl7YXJyYXlFYWNoKGJhc2VGbGF0dGVuKG1ldGhvZE5hbWVzKSxmdW5jdGlvbihrZXkpe29iamVjdFtrZXldID0gYmluZChvYmplY3Rba2V5XSxvYmplY3QpO30pO3JldHVybiBvYmplY3Q7fSk7ZnVuY3Rpb24gY29uZChwYWlycyl7dmFyIGxlbmd0aD1wYWlycz9wYWlycy5sZW5ndGg6MCx0b0l0ZXJhdGVlPWdldEl0ZXJhdGVlKCk7cGFpcnMgPSAhbGVuZ3RoP1tdOmFycmF5TWFwKHBhaXJzLGZ1bmN0aW9uKHBhaXIpe2lmKHR5cGVvZiBwYWlyWzFdICE9IFwiZnVuY3Rpb25cIil7dGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO31yZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSkscGFpclsxXV07fSk7cmV0dXJuIHJlc3QoZnVuY3Rpb24oYXJncyl7dmFyIGluZGV4PS0xO3doaWxlKCsraW5kZXggPCBsZW5ndGgpIHt2YXIgcGFpcj1wYWlyc1tpbmRleF07aWYoYXBwbHkocGFpclswXSx0aGlzLGFyZ3MpKXtyZXR1cm4gYXBwbHkocGFpclsxXSx0aGlzLGFyZ3MpO319fSk7fWZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSl7cmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLHRydWUpKTt9ZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB2YWx1ZTt9O312YXIgZmxvdz1jcmVhdGVGbG93KCk7dmFyIGZsb3dSaWdodD1jcmVhdGVGbG93KHRydWUpO2Z1bmN0aW9uIGlkZW50aXR5KHZhbHVlKXtyZXR1cm4gdmFsdWU7fWZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpe3JldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gXCJmdW5jdGlvblwiP2Z1bmM6YmFzZUNsb25lKGZ1bmMsdHJ1ZSkpO31mdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSl7cmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsdHJ1ZSkpO31mdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCxzcmNWYWx1ZSl7cmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCxiYXNlQ2xvbmUoc3JjVmFsdWUsdHJ1ZSkpO312YXIgbWV0aG9kPXJlc3QoZnVuY3Rpb24ocGF0aCxhcmdzKXtyZXR1cm4gZnVuY3Rpb24ob2JqZWN0KXtyZXR1cm4gYmFzZUludm9rZShvYmplY3QscGF0aCxhcmdzKTt9O30pO3ZhciBtZXRob2RPZj1yZXN0KGZ1bmN0aW9uKG9iamVjdCxhcmdzKXtyZXR1cm4gZnVuY3Rpb24ocGF0aCl7cmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LHBhdGgsYXJncyk7fTt9KTtmdW5jdGlvbiBtaXhpbihvYmplY3Qsc291cmNlLG9wdGlvbnMpe3ZhciBwcm9wcz1rZXlzKHNvdXJjZSksbWV0aG9kTmFtZXM9YmFzZUZ1bmN0aW9ucyhzb3VyY2UscHJvcHMpO2lmKG9wdGlvbnMgPT0gbnVsbCAmJiAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpe29wdGlvbnMgPSBzb3VyY2U7c291cmNlID0gb2JqZWN0O29iamVjdCA9IHRoaXM7bWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSxrZXlzKHNvdXJjZSkpO312YXIgY2hhaW49aXNPYmplY3Qob3B0aW9ucykgJiYgXCJjaGFpblwiIGluIG9wdGlvbnM/b3B0aW9ucy5jaGFpbjp0cnVlLGlzRnVuYz1pc0Z1bmN0aW9uKG9iamVjdCk7YXJyYXlFYWNoKG1ldGhvZE5hbWVzLGZ1bmN0aW9uKG1ldGhvZE5hbWUpe3ZhciBmdW5jPXNvdXJjZVttZXRob2ROYW1lXTtvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO2lmKGlzRnVuYyl7b2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCl7dmFyIGNoYWluQWxsPXRoaXMuX19jaGFpbl9fO2lmKGNoYWluIHx8IGNoYWluQWxsKXt2YXIgcmVzdWx0PW9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxhY3Rpb25zPXJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTthY3Rpb25zLnB1c2goe2Z1bmM6ZnVuYyxhcmdzOmFyZ3VtZW50cyx0aGlzQXJnOm9iamVjdH0pO3Jlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtyZXR1cm4gcmVzdWx0O31yZXR1cm4gZnVuYy5hcHBseShvYmplY3QsYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLGFyZ3VtZW50cykpO307fX0pO3JldHVybiBvYmplY3Q7fWZ1bmN0aW9uIG5vQ29uZmxpY3QoKXtpZihyb290Ll8gPT09IHRoaXMpe3Jvb3QuXyA9IG9sZERhc2g7fXJldHVybiB0aGlzO31mdW5jdGlvbiBub29wKCl7fWZ1bmN0aW9uIG50aEFyZyhuKXtuID0gdG9JbnRlZ2VyKG4pO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbbl07fTt9dmFyIG92ZXI9Y3JlYXRlT3ZlcihhcnJheU1hcCk7dmFyIG92ZXJFdmVyeT1jcmVhdGVPdmVyKGFycmF5RXZlcnkpO3ZhciBvdmVyU29tZT1jcmVhdGVPdmVyKGFycmF5U29tZSk7ZnVuY3Rpb24gcHJvcGVydHkocGF0aCl7cmV0dXJuIGlzS2V5KHBhdGgpP2Jhc2VQcm9wZXJ0eShwYXRoKTpiYXNlUHJvcGVydHlEZWVwKHBhdGgpO31mdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCl7cmV0dXJuIGZ1bmN0aW9uKHBhdGgpe3JldHVybiBvYmplY3QgPT0gbnVsbD91bmRlZmluZWQ6YmFzZUdldChvYmplY3QscGF0aCk7fTt9dmFyIHJhbmdlPWNyZWF0ZVJhbmdlKCk7dmFyIHJhbmdlUmlnaHQ9Y3JlYXRlUmFuZ2UodHJ1ZSk7ZnVuY3Rpb24gdGltZXMobixpdGVyYXRlZSl7biA9IHRvSW50ZWdlcihuKTtpZihuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUil7cmV0dXJuIFtdO312YXIgaW5kZXg9TUFYX0FSUkFZX0xFTkdUSCxsZW5ndGg9bmF0aXZlTWluKG4sTUFYX0FSUkFZX0xFTkdUSCk7aXRlcmF0ZWUgPSB0b0Z1bmN0aW9uKGl0ZXJhdGVlKTtuIC09IE1BWF9BUlJBWV9MRU5HVEg7dmFyIHJlc3VsdD1iYXNlVGltZXMobGVuZ3RoLGl0ZXJhdGVlKTt3aGlsZSgrK2luZGV4IDwgbikge2l0ZXJhdGVlKGluZGV4KTt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gdG9QYXRoKHZhbHVlKXtyZXR1cm4gaXNBcnJheSh2YWx1ZSk/YXJyYXlNYXAodmFsdWUsU3RyaW5nKTpzdHJpbmdUb1BhdGgodmFsdWUpO31mdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpe3ZhciBpZD0rK2lkQ291bnRlcjtyZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO31mdW5jdGlvbiBhZGQoYXVnZW5kLGFkZGVuZCl7dmFyIHJlc3VsdDtpZihhdWdlbmQgIT09IHVuZGVmaW5lZCl7cmVzdWx0ID0gYXVnZW5kO31pZihhZGRlbmQgIT09IHVuZGVmaW5lZCl7cmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQ/YWRkZW5kOnJlc3VsdCArIGFkZGVuZDt9cmV0dXJuIHJlc3VsdDt9dmFyIGNlaWw9Y3JlYXRlUm91bmQoXCJjZWlsXCIpO3ZhciBmbG9vcj1jcmVhdGVSb3VuZChcImZsb29yXCIpO2Z1bmN0aW9uIG1heChhcnJheSl7cmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aD9iYXNlRXh0cmVtdW0oYXJyYXksaWRlbnRpdHksZ3QpOnVuZGVmaW5lZDt9ZnVuY3Rpb24gbWF4QnkoYXJyYXksaXRlcmF0ZWUpe3JldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGg/YmFzZUV4dHJlbXVtKGFycmF5LGdldEl0ZXJhdGVlKGl0ZXJhdGVlKSxndCk6dW5kZWZpbmVkO31mdW5jdGlvbiBtZWFuKGFycmF5KXtyZXR1cm4gc3VtKGFycmF5KSAvIChhcnJheT9hcnJheS5sZW5ndGg6MCk7fWZ1bmN0aW9uIG1pbihhcnJheSl7cmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aD9iYXNlRXh0cmVtdW0oYXJyYXksaWRlbnRpdHksbHQpOnVuZGVmaW5lZDt9ZnVuY3Rpb24gbWluQnkoYXJyYXksaXRlcmF0ZWUpe3JldHVybiBhcnJheSAmJiBhcnJheS5sZW5ndGg/YmFzZUV4dHJlbXVtKGFycmF5LGdldEl0ZXJhdGVlKGl0ZXJhdGVlKSxsdCk6dW5kZWZpbmVkO312YXIgcm91bmQ9Y3JlYXRlUm91bmQoXCJyb3VuZFwiKTtmdW5jdGlvbiBzdWJ0cmFjdChtaW51ZW5kLHN1YnRyYWhlbmQpe3ZhciByZXN1bHQ7aWYobWludWVuZCAhPT0gdW5kZWZpbmVkKXtyZXN1bHQgPSBtaW51ZW5kO31pZihzdWJ0cmFoZW5kICE9PSB1bmRlZmluZWQpe3Jlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkP3N1YnRyYWhlbmQ6cmVzdWx0IC0gc3VidHJhaGVuZDt9cmV0dXJuIHJlc3VsdDt9ZnVuY3Rpb24gc3VtKGFycmF5KXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoP2Jhc2VTdW0oYXJyYXksaWRlbnRpdHkpOjA7fWZ1bmN0aW9uIHN1bUJ5KGFycmF5LGl0ZXJhdGVlKXtyZXR1cm4gYXJyYXkgJiYgYXJyYXkubGVuZ3RoP2Jhc2VTdW0oYXJyYXksZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpKTowO31sb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7TG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7TGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7TGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7SGFzaC5wcm90b3R5cGUgPSBuYXRpdmVDcmVhdGU/bmF0aXZlQ3JlYXRlKG51bGwpOm9iamVjdFByb3RvO01hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENsZWFyO01hcENhY2hlLnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IG1hcERlbGV0ZTtNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwR2V0O01hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBIYXM7TWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcFNldDtTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IGNhY2hlUHVzaDtTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1N0YWNrLnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IHN0YWNrRGVsZXRlO1N0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7U3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O21lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtsb2Rhc2guYXJ5ID0gYXJ5O2xvZGFzaC5hc3NpZ24gPSBhc3NpZ247bG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47bG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7bG9kYXNoLmF0ID0gYXQ7bG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtsb2Rhc2guYmluZCA9IGJpbmQ7bG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO2xvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtsb2Rhc2guY2hhaW4gPSBjaGFpbjtsb2Rhc2guY2h1bmsgPSBjaHVuaztsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7bG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtsb2Rhc2guY29uZCA9IGNvbmQ7bG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7bG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7bG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O2xvZGFzaC5jcmVhdGUgPSBjcmVhdGU7bG9kYXNoLmN1cnJ5ID0gY3Vycnk7bG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O2xvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO2xvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO2xvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7bG9kYXNoLmRlZmVyID0gZGVmZXI7bG9kYXNoLmRlbGF5ID0gZGVsYXk7bG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO2xvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7bG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7bG9kYXNoLmRyb3AgPSBkcm9wO2xvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7bG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7bG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtsb2Rhc2guZmlsbCA9IGZpbGw7bG9kYXNoLmZpbHRlciA9IGZpbHRlcjtsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7bG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO2xvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO2xvZGFzaC5mbGlwID0gZmxpcDtsb2Rhc2guZmxvdyA9IGZsb3c7bG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO2xvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7bG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47bG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O2xvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO2xvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O2xvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O2xvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O2xvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7bG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7bG9kYXNoLmtleUJ5ID0ga2V5Qnk7bG9kYXNoLmtleXMgPSBrZXlzO2xvZGFzaC5rZXlzSW4gPSBrZXlzSW47bG9kYXNoLm1hcCA9IG1hcDtsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7bG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7bG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7bG9kYXNoLm1lcmdlID0gbWVyZ2U7bG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtsb2Rhc2gubWV0aG9kID0gbWV0aG9kO2xvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO2xvZGFzaC5taXhpbiA9IG1peGluO2xvZGFzaC5uZWdhdGUgPSBuZWdhdGU7bG9kYXNoLm50aEFyZyA9IG50aEFyZztsb2Rhc2gub21pdCA9IG9taXQ7bG9kYXNoLm9taXRCeSA9IG9taXRCeTtsb2Rhc2gub25jZSA9IG9uY2U7bG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O2xvZGFzaC5vdmVyID0gb3Zlcjtsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O2xvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO2xvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O2xvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247bG9kYXNoLnBpY2sgPSBwaWNrO2xvZGFzaC5waWNrQnkgPSBwaWNrQnk7bG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7bG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO2xvZGFzaC5wdWxsID0gcHVsbDtsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7bG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O2xvZGFzaC5yYW5nZSA9IHJhbmdlO2xvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtsb2Rhc2gucmVhcmcgPSByZWFyZztsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O2xvZGFzaC5yZW1vdmUgPSByZW1vdmU7bG9kYXNoLnJlc3QgPSByZXN0O2xvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7bG9kYXNoLnNldCA9IHNldDtsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7bG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO2xvZGFzaC5zbGljZSA9IHNsaWNlO2xvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7bG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO2xvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7bG9kYXNoLnNwbGl0ID0gc3BsaXQ7bG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtsb2Rhc2gudGFpbCA9IHRhaWw7bG9kYXNoLnRha2UgPSB0YWtlO2xvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7bG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7bG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtsb2Rhc2gudGFwID0gdGFwO2xvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO2xvZGFzaC50aHJ1ID0gdGhydTtsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7bG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO2xvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47bG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7bG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtsb2Rhc2gudW5hcnkgPSB1bmFyeTtsb2Rhc2gudW5pb24gPSB1bmlvbjtsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7bG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtsb2Rhc2gudW5pcSA9IHVuaXE7bG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtsb2Rhc2gudW5zZXQgPSB1bnNldDtsb2Rhc2gudW56aXAgPSB1bnppcDtsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO2xvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7bG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47bG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O2xvZGFzaC53b3JkcyA9IHdvcmRzO2xvZGFzaC53cmFwID0gd3JhcDtsb2Rhc2gueG9yID0geG9yO2xvZGFzaC54b3JCeSA9IHhvckJ5O2xvZGFzaC54b3JXaXRoID0geG9yV2l0aDtsb2Rhc2guemlwID0gemlwO2xvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7bG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO2xvZGFzaC56aXBXaXRoID0gemlwV2l0aDtsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47bG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7bWl4aW4obG9kYXNoLGxvZGFzaCk7bG9kYXNoLmFkZCA9IGFkZDtsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7bG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7bG9kYXNoLmNlaWwgPSBjZWlsO2xvZGFzaC5jbGFtcCA9IGNsYW1wO2xvZGFzaC5jbG9uZSA9IGNsb25lO2xvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7bG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO2xvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7bG9kYXNoLmRlYnVyciA9IGRlYnVycjtsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtsb2Rhc2guZXEgPSBlcTtsb2Rhc2guZXNjYXBlID0gZXNjYXBlO2xvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7bG9kYXNoLmV2ZXJ5ID0gZXZlcnk7bG9kYXNoLmZpbmQgPSBmaW5kO2xvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7bG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O2xvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O2xvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtsb2Rhc2guZmxvb3IgPSBmbG9vcjtsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7bG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtsb2Rhc2guZm9ySW4gPSBmb3JJbjtsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7bG9kYXNoLmZvck93biA9IGZvck93bjtsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtsb2Rhc2guZ2V0ID0gZ2V0O2xvZGFzaC5ndCA9IGd0O2xvZGFzaC5ndGUgPSBndGU7bG9kYXNoLmhhcyA9IGhhcztsb2Rhc2guaGFzSW4gPSBoYXNJbjtsb2Rhc2guaGVhZCA9IGhlYWQ7bG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7bG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7bG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO2xvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtsb2Rhc2guaW52b2tlID0gaW52b2tlO2xvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO2xvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO2xvZGFzaC5pc0RhdGUgPSBpc0RhdGU7bG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7bG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO2xvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO2xvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247bG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7bG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7bG9kYXNoLmlzTmFOID0gaXNOYU47bG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7bG9kYXNoLmlzTmlsID0gaXNOaWw7bG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO2xvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7bG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7bG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7bG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtsb2Rhc2guam9pbiA9IGpvaW47bG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtsb2Rhc2gubGFzdCA9IGxhc3Q7bG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7bG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7bG9kYXNoLmx0ID0gbHQ7bG9kYXNoLmx0ZSA9IGx0ZTtsb2Rhc2gubWF4ID0gbWF4O2xvZGFzaC5tYXhCeSA9IG1heEJ5O2xvZGFzaC5tZWFuID0gbWVhbjtsb2Rhc2gubWluID0gbWluO2xvZGFzaC5taW5CeSA9IG1pbkJ5O2xvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtsb2Rhc2gubm9vcCA9IG5vb3A7bG9kYXNoLm5vdyA9IG5vdztsb2Rhc2gucGFkID0gcGFkO2xvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7bG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7bG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7bG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtsb2Rhc2gucmVkdWNlID0gcmVkdWNlO2xvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O2xvZGFzaC5yZXBlYXQgPSByZXBlYXQ7bG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO2xvZGFzaC5yZXN1bHQgPSByZXN1bHQ7bG9kYXNoLnJvdW5kID0gcm91bmQ7bG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtsb2Rhc2guc2FtcGxlID0gc2FtcGxlO2xvZGFzaC5zaXplID0gc2l6ZTtsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO2xvZGFzaC5zb21lID0gc29tZTtsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7bG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO2xvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7bG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7bG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7bG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7bG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7bG9kYXNoLnN1bSA9IHN1bTtsb2Rhc2guc3VtQnkgPSBzdW1CeTtsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtsb2Rhc2gudGltZXMgPSB0aW1lcztsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO2xvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO2xvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7bG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7bG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO2xvZGFzaC50cmltID0gdHJpbTtsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7bG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO2xvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtsb2Rhc2guZWFjaCA9IGZvckVhY2g7bG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtsb2Rhc2guZmlyc3QgPSBoZWFkO21peGluKGxvZGFzaCwoZnVuY3Rpb24oKXt2YXIgc291cmNlPXt9O2Jhc2VGb3JPd24obG9kYXNoLGZ1bmN0aW9uKGZ1bmMsbWV0aG9kTmFtZSl7aWYoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSxtZXRob2ROYW1lKSl7c291cmNlW21ldGhvZE5hbWVdID0gZnVuYzt9fSk7cmV0dXJuIHNvdXJjZTt9KSgpLHtjaGFpbjpmYWxzZX0pO2xvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjthcnJheUVhY2goW1wiYmluZFwiLFwiYmluZEtleVwiLFwiY3VycnlcIixcImN1cnJ5UmlnaHRcIixcInBhcnRpYWxcIixcInBhcnRpYWxSaWdodFwiXSxmdW5jdGlvbihtZXRob2ROYW1lKXtsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7fSk7YXJyYXlFYWNoKFtcImRyb3BcIixcInRha2VcIl0sZnVuY3Rpb24obWV0aG9kTmFtZSxpbmRleCl7TGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obil7dmFyIGZpbHRlcmVkPXRoaXMuX19maWx0ZXJlZF9fO2lmKGZpbHRlcmVkICYmICFpbmRleCl7cmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTt9biA9IG4gPT09IHVuZGVmaW5lZD8xOm5hdGl2ZU1heCh0b0ludGVnZXIobiksMCk7dmFyIHJlc3VsdD10aGlzLmNsb25lKCk7aWYoZmlsdGVyZWQpe3Jlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4scmVzdWx0Ll9fdGFrZUNvdW50X18pO31lbHNlIHtyZXN1bHQuX192aWV3c19fLnB1c2goe3NpemU6bmF0aXZlTWluKG4sTUFYX0FSUkFZX0xFTkdUSCksdHlwZTptZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMD9cIlJpZ2h0XCI6XCJcIil9KTt9cmV0dXJuIHJlc3VsdDt9O0xhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgXCJSaWdodFwiXSA9IGZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7fTt9KTthcnJheUVhY2goW1wiZmlsdGVyXCIsXCJtYXBcIixcInRha2VXaGlsZVwiXSxmdW5jdGlvbihtZXRob2ROYW1lLGluZGV4KXt2YXIgdHlwZT1pbmRleCArIDEsaXNGaWx0ZXI9dHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO0xhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKXt2YXIgcmVzdWx0PXRoaXMuY2xvbmUoKTtyZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtpdGVyYXRlZTpnZXRJdGVyYXRlZShpdGVyYXRlZSwzKSx0eXBlOnR5cGV9KTtyZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtyZXR1cm4gcmVzdWx0O307fSk7YXJyYXlFYWNoKFtcImhlYWRcIixcImxhc3RcIl0sZnVuY3Rpb24obWV0aG9kTmFtZSxpbmRleCl7dmFyIHRha2VOYW1lPVwidGFrZVwiICsgKGluZGV4P1wiUmlnaHRcIjpcIlwiKTtMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpe3JldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO307fSk7YXJyYXlFYWNoKFtcImluaXRpYWxcIixcInRhaWxcIl0sZnVuY3Rpb24obWV0aG9kTmFtZSxpbmRleCl7dmFyIGRyb3BOYW1lPVwiZHJvcFwiICsgKGluZGV4P1wiXCI6XCJSaWdodFwiKTtMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpe3JldHVybiB0aGlzLl9fZmlsdGVyZWRfXz9uZXcgTGF6eVdyYXBwZXIodGhpcyk6dGhpc1tkcm9wTmFtZV0oMSk7fTt9KTtMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTt9O0xhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKXtyZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7fTtMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpe3JldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7fTtMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gcmVzdChmdW5jdGlvbihwYXRoLGFyZ3Mpe2lmKHR5cGVvZiBwYXRoID09IFwiZnVuY3Rpb25cIil7cmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTt9cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gYmFzZUludm9rZSh2YWx1ZSxwYXRoLGFyZ3MpO30pO30pO0xhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpe3ByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwzKTtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24odmFsdWUpe3JldHVybiAhcHJlZGljYXRlKHZhbHVlKTt9KTt9O0xhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LGVuZCl7c3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO3ZhciByZXN1bHQ9dGhpcztpZihyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpe3JldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTt9aWYoc3RhcnQgPCAwKXtyZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7fWVsc2UgaWYoc3RhcnQpe3Jlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTt9aWYoZW5kICE9PSB1bmRlZmluZWQpe2VuZCA9IHRvSW50ZWdlcihlbmQpO3Jlc3VsdCA9IGVuZCA8IDA/cmVzdWx0LmRyb3BSaWdodCgtZW5kKTpyZXN1bHQudGFrZShlbmQgLSBzdGFydCk7fXJldHVybiByZXN1bHQ7fTtMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpe3JldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7fTtMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTt9O2Jhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLGZ1bmN0aW9uKGZ1bmMsbWV0aG9kTmFtZSl7dmFyIGNoZWNrSXRlcmF0ZWU9L14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksaXNUYWtlcj0vXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLGxvZGFzaEZ1bmM9bG9kYXNoW2lzVGFrZXI/XCJ0YWtlXCIgKyAobWV0aG9kTmFtZSA9PSBcImxhc3RcIj9cIlJpZ2h0XCI6XCJcIik6bWV0aG9kTmFtZV0scmV0VW53cmFwcGVkPWlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO2lmKCFsb2Rhc2hGdW5jKXtyZXR1cm47fWxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpe3ZhciB2YWx1ZT10aGlzLl9fd3JhcHBlZF9fLGFyZ3M9aXNUYWtlcj9bMV06YXJndW1lbnRzLGlzTGF6eT12YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLGl0ZXJhdGVlPWFyZ3NbMF0sdXNlTGF6eT1pc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7dmFyIGludGVyY2VwdG9yPWZ1bmN0aW9uIGludGVyY2VwdG9yKHZhbHVlKXt2YXIgcmVzdWx0PWxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLGFycmF5UHVzaChbdmFsdWVdLGFyZ3MpKTtyZXR1cm4gaXNUYWtlciAmJiBjaGFpbkFsbD9yZXN1bHRbMF06cmVzdWx0O307aWYodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSBcImZ1bmN0aW9uXCIgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpe2lzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTt9dmFyIGNoYWluQWxsPXRoaXMuX19jaGFpbl9fLGlzSHlicmlkPSEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsaXNVbndyYXBwZWQ9cmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxvbmx5TGF6eT1pc0xhenkgJiYgIWlzSHlicmlkO2lmKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSl7dmFsdWUgPSBvbmx5TGF6eT92YWx1ZTpuZXcgTGF6eVdyYXBwZXIodGhpcyk7dmFyIHJlc3VsdD1mdW5jLmFwcGx5KHZhbHVlLGFyZ3MpO3Jlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHtmdW5jOnRocnUsYXJnczpbaW50ZXJjZXB0b3JdLHRoaXNBcmc6dW5kZWZpbmVkfSk7cmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCxjaGFpbkFsbCk7fWlmKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KXtyZXR1cm4gZnVuYy5hcHBseSh0aGlzLGFyZ3MpO31yZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO3JldHVybiBpc1Vud3JhcHBlZD9pc1Rha2VyP3Jlc3VsdC52YWx1ZSgpWzBdOnJlc3VsdC52YWx1ZSgpOnJlc3VsdDt9O30pO2FycmF5RWFjaChbXCJwb3BcIixcInB1c2hcIixcInNoaWZ0XCIsXCJzb3J0XCIsXCJzcGxpY2VcIixcInVuc2hpZnRcIl0sZnVuY3Rpb24obWV0aG9kTmFtZSl7dmFyIGZ1bmM9YXJyYXlQcm90b1ttZXRob2ROYW1lXSxjaGFpbk5hbWU9L14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpP1widGFwXCI6XCJ0aHJ1XCIscmV0VW53cmFwcGVkPS9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7bG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCl7dmFyIGFyZ3M9YXJndW1lbnRzO2lmKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pe3JldHVybiBmdW5jLmFwcGx5KHRoaXMudmFsdWUoKSxhcmdzKTt9cmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGZ1bmMuYXBwbHkodmFsdWUsYXJncyk7fSk7fTt9KTtiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSxmdW5jdGlvbihmdW5jLG1ldGhvZE5hbWUpe3ZhciBsb2Rhc2hGdW5jPWxvZGFzaFttZXRob2ROYW1lXTtpZihsb2Rhc2hGdW5jKXt2YXIga2V5PWxvZGFzaEZ1bmMubmFtZSArIFwiXCIsbmFtZXM9cmVhbE5hbWVzW2tleV0gfHwgKHJlYWxOYW1lc1trZXldID0gW10pO25hbWVzLnB1c2goe25hbWU6bWV0aG9kTmFtZSxmdW5jOmxvZGFzaEZ1bmN9KTt9fSk7cmVhbE5hbWVzW2NyZWF0ZUh5YnJpZFdyYXBwZXIodW5kZWZpbmVkLEJJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tuYW1lOlwid3JhcHBlclwiLGZ1bmM6dW5kZWZpbmVkfV07TGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO0xhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7TGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO2xvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7bG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7bG9kYXNoLnByb3RvdHlwZS5mbGF0TWFwID0gd3JhcHBlckZsYXRNYXA7bG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7bG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7aWYoaXRlcmF0b3JTeW1ib2wpe2xvZGFzaC5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gd3JhcHBlclRvSXRlcmF0b3I7fXJldHVybiBsb2Rhc2g7fXZhciBfPXJ1bkluQ29udGV4dCgpOyhmcmVlV2luZG93IHx8IGZyZWVTZWxmIHx8IHt9KS5fID0gXztpZih0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSBcIm9iamVjdFwiICYmIGRlZmluZS5hbWQpe2RlZmluZShmdW5jdGlvbigpe3JldHVybiBfO30pO31lbHNlIGlmKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpe2lmKG1vZHVsZUV4cG9ydHMpeyhmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXzt9ZnJlZUV4cG9ydHMuXyA9IF87fWVsc2Uge3Jvb3QuXyA9IF87fX0pLmNhbGwodW5kZWZpbmVkKTtcblxuY2MuX1JGcG9wKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5jYy5fUkZwdXNoKG1vZHVsZSwgJzY3OWU0NDlScHhDeGFpUGhXY2ZYRUlmJywgJ2xvZ2luJyk7XG4vLyBiaXovbG9naW4vc2NyaXB0L2xvZ2luLmpzXG5cbnZhciBxd2VzdCA9IHJlcXVpcmUoJ3F3ZXN0Jyk7XG52YXIgdXNlciA9IHJlcXVpcmUoJ3VzZXInKTtcbnZhciBhcGkgPSByZXF1aXJlKCdhcGknKTtcblxudmFyIGJ0bkFjdGlvbiA9IHtcbiAgICBzaG93OiBjYy5tb3ZlVG8oMC41LCBjYy5wKDU0MCwgMjgwKSkuZWFzaW5nKGNjLmVhc2VJbigzLjApKSxcbiAgICBoaWRlOiBjYy5tb3ZlVG8oMC41LCBjYy5wKDU0MCwgNDI1KSkuZWFzaW5nKGNjLmVhc2VJbigzLjApKVxufTtcblxudmFyIGxvZ2luR3JvdXBBY3Rpb24gPSB7XG4gICAgc2hvdzogY2MubW92ZVRvKDAuNSwgY2MucCgwLCAtMTUwKSkuZWFzaW5nKGNjLmVhc2VJbigzLjApKSxcbiAgICBoaWRlOiBjYy5tb3ZlVG8oMC41LCBjYy5wKDAsIC01MDApKS5lYXNpbmcoY2MuZWFzZUluKDMuMCkpXG59O1xuXG52YXIgcmVnaXN0ZXJHcm91cEFjdGlvbiA9IHtcbiAgICBzaG93OiBjYy5tb3ZlVG8oMC41LCBjYy5wKDAsIDApKS5lYXNpbmcoY2MuZWFzZUluKDMuMCkpLFxuICAgIGhpZGU6IGNjLm1vdmVUbygwLjUsIGNjLnAoMCwgLTY2MCkpLmVhc2luZyhjYy5lYXNlSW4oMy4wKSlcbn07XG5cbmNjLkNsYXNzKHtcbiAgICAnZXh0ZW5kcyc6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdXNlcm5hbWU6IHtcbiAgICAgICAgICAgICdkZWZhdWx0JzogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IGNjLkVkaXRCb3hcbiAgICAgICAgfSxcblxuICAgICAgICBwYXNzd29yZDoge1xuICAgICAgICAgICAgJ2RlZmF1bHQnOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuRWRpdEJveFxuICAgICAgICB9LFxuXG4gICAgICAgIGxvZ2luQnRuOiB7XG4gICAgICAgICAgICAnZGVmYXVsdCc6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBjYy5CdXR0b25cbiAgICAgICAgfSxcblxuICAgICAgICByZWdpc3RlckJ0bkJveDoge1xuICAgICAgICAgICAgJ2RlZmF1bHQnOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbEJ0bkJveDoge1xuICAgICAgICAgICAgJ2RlZmF1bHQnOiBudWxsLFxuICAgICAgICAgICAgdHlwZTogY2MuTm9kZVxuICAgICAgICB9LFxuXG4gICAgICAgIGxvZ2luR3JvdXA6IHtcbiAgICAgICAgICAgICdkZWZhdWx0JzogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IGNjLk5vZGVcbiAgICAgICAgfSxcblxuICAgICAgICByZWdpc3Rlckdyb3VwOiB7XG4gICAgICAgICAgICAnZGVmYXVsdCc6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBjYy5Ob2RlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25Mb2dpbkJ0bkVudGVyOiBmdW5jdGlvbiBvbkxvZ2luQnRuRW50ZXIoKSB7XG4gICAgICAgIGFwaS5sb2dpbih7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnVzZXJuYW1lLnN0cmluZyxcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLnN0cmluZ1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB1c2VyLmluaXQoZGF0YS5kYXRhKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgYWxlcnQoZXJyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgb25DYW5jZWxCdG5Ub2dnbGU6IGZ1bmN0aW9uIG9uQ2FuY2VsQnRuVG9nZ2xlKCkge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQnRuQm94LnJ1bkFjdGlvbihidG5BY3Rpb24uc2hvdyk7XG4gICAgICAgIHRoaXMuY2FuY2VsQnRuQm94LnJ1bkFjdGlvbihidG5BY3Rpb24uaGlkZSk7XG4gICAgICAgIHRoaXMubG9naW5Hcm91cC5ydW5BY3Rpb24obG9naW5Hcm91cEFjdGlvbi5zaG93KTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlckdyb3VwLnJ1bkFjdGlvbihyZWdpc3Rlckdyb3VwQWN0aW9uLmhpZGUpO1xuICAgIH0sXG5cbiAgICBvblJlZ2lzdGVyQnRuVG9nZ2xlOiBmdW5jdGlvbiBvblJlZ2lzdGVyQnRuVG9nZ2xlKCkge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQnRuQm94LnJ1bkFjdGlvbihidG5BY3Rpb24uaGlkZSk7XG4gICAgICAgIHRoaXMuY2FuY2VsQnRuQm94LnJ1bkFjdGlvbihidG5BY3Rpb24uc2hvdyk7XG4gICAgICAgIHRoaXMubG9naW5Hcm91cC5ydW5BY3Rpb24obG9naW5Hcm91cEFjdGlvbi5oaWRlKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlckdyb3VwLnJ1bkFjdGlvbihyZWdpc3Rlckdyb3VwQWN0aW9uLnNob3cpO1xuICAgIH0sXG5cbiAgICBvbkxvYWQ6IGZ1bmN0aW9uIG9uTG9hZCgpIHt9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHt9XG59KTtcblxuY2MuX1JGcG9wKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5jYy5fUkZwdXNoKG1vZHVsZSwgJzhmNTEzZHRPbDVEUzRmSWxUcUlIT1J2JywgJ3F3ZXN0Jyk7XG4vLyBsaWIvcXdlc3QuanNcblxuIShmdW5jdGlvbiAoZSkge1xuICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBtb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gZSgpO2Vsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQpIGRlZmluZShbXSwgZSk7ZWxzZSB7XG4gICAgdmFyIHQ7dCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGdsb2JhbCA/IGdsb2JhbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDogdGhpcywgdC5xd2VzdCA9IGUoKTtcbiAgfVxufSkoZnVuY3Rpb24gKCkge1xuICB2YXIgZGVmaW5lLCBtb2R1bGUsIGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsIG4sIG8pIHtcbiAgICBmdW5jdGlvbiByKGksIGEpIHtcbiAgICAgIGlmICghbltpXSkge1xuICAgICAgICBpZiAoIXRbaV0pIHtcbiAgICAgICAgICB2YXIgcCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgcmVxdWlyZSAmJiByZXF1aXJlO2lmICghYSAmJiBwKSByZXR1cm4gcChpLCAhMCk7aWYgKHMpIHJldHVybiBzKGksICEwKTt2YXIgdSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyBpICsgXCInXCIpO3Rocm93ICh1LmNvZGUgPSBcIk1PRFVMRV9OT1RfRk9VTkRcIiwgdSk7XG4gICAgICAgIH12YXIgZiA9IG5baV0gPSB7IGV4cG9ydHM6IHt9IH07dFtpXVswXS5jYWxsKGYuZXhwb3J0cywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgbiA9IHRbaV1bMV1bZV07cmV0dXJuIHIobiA/IG4gOiBlKTtcbiAgICAgICAgfSwgZiwgZi5leHBvcnRzLCBlLCB0LCBuLCBvKTtcbiAgICAgIH1yZXR1cm4gbltpXS5leHBvcnRzO1xuICAgIH1mb3IgKHZhciBzID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiByZXF1aXJlICYmIHJlcXVpcmUsIGkgPSAwOyBpIDwgby5sZW5ndGg7IGkrKykgcihvW2ldKTtyZXR1cm4gcjtcbiAgfSkoeyAxOiBbZnVuY3Rpb24gKGUsIHQsIG4pIHtcbiAgICAgICEoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7dmFyIG4gPSBmdW5jdGlvbiBuKGUpIHtcbiAgICAgICAgICB2YXIgdCA9IGZ1bmN0aW9uIHQoZSwgX3QsIG4pIHtcbiAgICAgICAgICAgIG4gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG4gPyBuKCkgOiBudWxsID09PSBuID8gXCJcIiA6IHZvaWQgMCA9PT0gbiA/IFwiXCIgOiBuLCBlW2UubGVuZ3RoXSA9IGVuY29kZVVSSUNvbXBvbmVudChfdCkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChuKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgICBuID0gZnVuY3Rpb24gbihlLCBvLCByKSB7XG4gICAgICAgICAgICB2YXIgcywgaSwgYTtpZiAoXCJbb2JqZWN0IEFycmF5XVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykpIGZvciAocyA9IDAsIGkgPSBvLmxlbmd0aDsgaSA+IHM7IHMrKykgbihlICsgXCJbXCIgKyAoXCJvYmplY3RcIiA9PSB0eXBlb2Ygb1tzXSA/IHMgOiBcIlwiKSArIFwiXVwiLCBvW3NdLCByKTtlbHNlIGlmIChvICYmIFwiW29iamVjdCBPYmplY3RdXCIgPT09IG8udG9TdHJpbmcoKSkgZm9yIChhIGluIG8pIG8uaGFzT3duUHJvcGVydHkoYSkgJiYgKGUgPyBuKGUgKyBcIltcIiArIGEgKyBcIl1cIiwgb1thXSwgciwgdCkgOiBuKGEsIG9bYV0sIHIsIHQpKTtlbHNlIGlmIChlKSB0KHIsIGUsIG8pO2Vsc2UgZm9yIChhIGluIG8pIHQociwgYSwgb1thXSk7cmV0dXJuIHI7XG4gICAgICAgICAgfTtyZXR1cm4gbihcIlwiLCBlLCBbXSkuam9pbihcIiZcIikucmVwbGFjZSgvJTIwL2csIFwiK1wiKTtcbiAgICAgICAgfTtcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHQuZXhwb3J0cyA/IHQuZXhwb3J0cyA9IG4gOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0pIDogZS5wYXJhbSA9IG47XG4gICAgICB9KSh0aGlzKTtcbiAgICB9LCB7fV0sIDI6IFtmdW5jdGlvbiAoZSwgdCwgbikge1xuICAgICAgIShmdW5jdGlvbiAoZSkge1xuICAgICAgICBmdW5jdGlvbiB0KGUpIHtcbiAgICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlO1xuICAgICAgICB9ZnVuY3Rpb24gbihlKSB7XG4gICAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgPT0gdHlwZW9mIGU7XG4gICAgICAgIH1mdW5jdGlvbiBvKGUpIHtcbiAgICAgICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPyBzZXRJbW1lZGlhdGUoZSkgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBwcm9jZXNzICYmIHByb2Nlc3MubmV4dFRpY2sgPyBwcm9jZXNzLm5leHRUaWNrKGUpIDogc2V0VGltZW91dChlLCAwKTtcbiAgICAgICAgfXZhciByO2VbMF1bZVsxXV0gPSBmdW5jdGlvbiBzKGUpIHtcbiAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgYSA9IFtdLFxuICAgICAgICAgICAgICBwID0gW10sXG4gICAgICAgICAgICAgIHUgPSBmdW5jdGlvbiB1KGUsIHQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsID09IGkgJiYgbnVsbCAhPSBlICYmIChpID0gZSwgYSA9IHQsIHAubGVuZ3RoICYmIG8oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHAubGVuZ3RoOyBlKyspIHBbZV0oKTtcbiAgICAgICAgICAgIH0pKSwgaTtcbiAgICAgICAgICB9O3JldHVybiB1LnRoZW4gPSBmdW5jdGlvbiAodSwgZikge1xuICAgICAgICAgICAgdmFyIGQgPSBzKGUpLFxuICAgICAgICAgICAgICAgIGMgPSBmdW5jdGlvbiBjKCkge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBlKG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgcyxcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7dHJ5IHtcbiAgICAgICAgICAgICAgICAgIGlmIChvICYmIChuKG8pIHx8IHQobykpICYmIHQocyA9IG8udGhlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8gPT09IGQpIHRocm93IG5ldyBUeXBlRXJyb3IoKTtzLmNhbGwobywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIGkrKyB8fCBlLmFwcGx5KHIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaSsrIHx8IGQoITEsIFtlXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGQoITAsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoYSkge1xuICAgICAgICAgICAgICAgICAgaSsrIHx8IGQoITEsIFthXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9dHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGkgPyB1IDogZjt0KG8pID8gZShvLmFwcGx5KHIsIGEgfHwgW10pKSA6IGQoaSwgYSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgICAgICBkKCExLCBbc10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O3JldHVybiBudWxsICE9IGkgPyBvKGMpIDogcC5wdXNoKGMpLCBkO1xuICAgICAgICAgIH0sIGUgJiYgKHUgPSBlKHUpKSwgdTtcbiAgICAgICAgfTtcbiAgICAgIH0pKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHQgPyBbd2luZG93LCBcInBpbmt5U3dlYXJcIl0gOiBbdCwgXCJleHBvcnRzXCJdKTtcbiAgICB9LCB7fV0sIHF3ZXN0OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ2xvYmFsID0gd2luZG93IHx8IHRoaXMsXG4gICAgICAgICAgICBwaW5reXN3ZWFyID0gX2RlcmVxXyhcInBpbmt5c3dlYXJcIiksXG4gICAgICAgICAgICBqcGFyYW0gPSBfZGVyZXFfKFwianF1ZXJ5LXBhcmFtXCIpLFxuICAgICAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgIGRlZmF1bHRYZHJSZXNwb25zZVR5cGUgPSBcImpzb25cIixcbiAgICAgICAgICAgIGRlZmF1bHREYXRhVHlwZSA9IFwicG9zdFwiLFxuICAgICAgICAgICAgX2xpbWl0ID0gbnVsbCxcbiAgICAgICAgICAgIHJlcXVlc3RzID0gMCxcbiAgICAgICAgICAgIHJlcXVlc3Rfc3RhY2sgPSBbXSxcbiAgICAgICAgICAgIGdldFhIUiA9IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgICB9LFxuICAgICAgICAgICAgeGhyMiA9IFwiXCIgPT09IGdldFhIUigpLnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgIHF3ZXN0ID0gZnVuY3Rpb24gcXdlc3QobWV0aG9kLCB1cmwsIGRhdGEsIG9wdGlvbnMsIGJlZm9yZSkge1xuICAgICAgICAgIG1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpLCBkYXRhID0gZGF0YSB8fCBudWxsLCBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRPcHRpb25zKSBpZiAoIShuYW1lIGluIG9wdGlvbnMpKSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZGVmYXVsdE9wdGlvbnNbbmFtZV0gJiYgXCJvYmplY3RcIiA9PSB0eXBlb2Ygb3B0aW9uc1tuYW1lXSkgZm9yICh2YXIgbmFtZTIgaW4gZGVmYXVsdE9wdGlvbnNbbmFtZV0pIG9wdGlvbnNbbmFtZV1bbmFtZTJdID0gZGVmYXVsdE9wdGlvbnNbbmFtZV1bbmFtZTJdO2Vsc2Ugb3B0aW9uc1tuYW1lXSA9IGRlZmF1bHRPcHRpb25zW25hbWVdO3ZhciBuYXRpdmVSZXNwb25zZVBhcnNpbmcgPSAhMSxcbiAgICAgICAgICAgICAgY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICAgIHhocixcbiAgICAgICAgICAgICAgeGRyID0gITEsXG4gICAgICAgICAgICAgIHRpbWVvdXRJbnRlcnZhbCxcbiAgICAgICAgICAgICAgYWJvcnRlZCA9ICExLFxuICAgICAgICAgICAgICBhdHRlbXB0cyA9IDAsXG4gICAgICAgICAgICAgIGhlYWRlcnMgPSB7fSxcbiAgICAgICAgICAgICAgbWltZVR5cGVzID0geyB0ZXh0OiBcIiovKlwiLCB4bWw6IFwidGV4dC94bWxcIiwganNvbjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIHBvc3Q6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsIGRvY3VtZW50OiBcInRleHQvaHRtbFwiIH0sXG4gICAgICAgICAgICAgIGFjY2VwdCA9IHsgdGV4dDogXCIqLypcIiwgeG1sOiBcImFwcGxpY2F0aW9uL3htbDsgcT0xLjAsIHRleHQveG1sOyBxPTAuOCwgKi8qOyBxPTAuMVwiLCBqc29uOiBcImFwcGxpY2F0aW9uL2pzb247IHE9MS4wLCB0ZXh0Lyo7IHE9MC44LCAqLyo7IHE9MC4xXCIgfSxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgc2VyaWFsaXplZCxcbiAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgIHNlbmRpbmcgPSAhMSxcbiAgICAgICAgICAgICAgZGVsYXllZCA9ICExLFxuICAgICAgICAgICAgICB0aW1lb3V0X3N0YXJ0LFxuICAgICAgICAgICAgICBwcm9taXNlID0gcGlua3lzd2VhcihmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHhociAmJiAoeGhyLmFib3J0KCksIC0tcmVxdWVzdHMsIGFib3J0ZWQgPSAhMCk7XG4gICAgICAgICAgICB9LCBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghc2VuZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0cyA9PSBfbGltaXQpIHJldHVybiB2b2lkIHJlcXVlc3Rfc3RhY2sucHVzaChlKTtpZiAoYWJvcnRlZCkgcmV0dXJuIHZvaWQgKHJlcXVlc3Rfc3RhY2subGVuZ3RoICYmIHJlcXVlc3Rfc3RhY2suc2hpZnQoKS5zZW5kKCkpO2lmICgoKytyZXF1ZXN0cywgc2VuZGluZyA9ICEwLCB0aW1lb3V0X3N0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCksIHhociA9IGdldFhIUigpLCBjcm9zc09yaWdpbiAmJiAoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHIgfHwgIWdsb2JhbC5YRG9tYWluUmVxdWVzdCB8fCAoeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCksIHhkciA9ICEwLCBcIkdFVFwiICE9IG1ldGhvZCAmJiBcIlBPU1RcIiAhPSBtZXRob2QgJiYgKG1ldGhvZCA9IFwiUE9TVFwiKSkpLCB4ZHIgPyB4aHIub3BlbihtZXRob2QsIHVybCkgOiAoeGhyLm9wZW4obWV0aG9kLCB1cmwsIG9wdGlvbnMuYXN5bmMsIG9wdGlvbnMudXNlciwgb3B0aW9ucy5wYXNzd29yZCksIHhocjIgJiYgb3B0aW9ucy5hc3luYyAmJiAoeGhyLndpdGhDcmVkZW50aWFscyA9IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzKSksICF4ZHIpKSBmb3IgKHZhciB0IGluIGhlYWRlcnMpIGhlYWRlcnNbdF0gJiYgeGhyLnNldFJlcXVlc3RIZWFkZXIodCwgaGVhZGVyc1t0XSk7aWYgKHhocjIgJiYgXCJhdXRvXCIgIT0gb3B0aW9ucy5yZXNwb25zZVR5cGUpIHRyeSB7XG4gICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGUsIG5hdGl2ZVJlc3BvbnNlUGFyc2luZyA9IHhoci5yZXNwb25zZVR5cGUgPT0gb3B0aW9ucy5yZXNwb25zZVR5cGU7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAobikge314aHIyIHx8IHhkciA/ICh4aHIub25sb2FkID0gaGFuZGxlUmVzcG9uc2UsIHhoci5vbmVycm9yID0gaGFuZGxlRXJyb3IpIDogeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIDQgPT0geGhyLnJlYWR5U3RhdGUgJiYgaGFuZGxlUmVzcG9uc2UoKTtcbiAgICAgICAgICAgICAgICB9LCBcImF1dG9cIiAhPSBvcHRpb25zLnJlc3BvbnNlVHlwZSAmJiBcIm92ZXJyaWRlTWltZVR5cGVcIiBpbiB4aHIgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUobWltZVR5cGVzW29wdGlvbnMucmVzcG9uc2VUeXBlXSksIGJlZm9yZSAmJiBiZWZvcmUoeGhyKSwgeGRyID8gKHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKCkge30sIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7fSwgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7fSwgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICB4aHIuc2VuZChcIkdFVFwiICE9IG1ldGhvZCA/IGRhdGEgOiBudWxsKTtcbiAgICAgICAgICAgICAgICB9LCAwKSkgOiB4aHIuc2VuZChcIkdFVFwiICE9IG1ldGhvZCA/IGRhdGEgOiBudWxsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgaGFuZGxlUmVzcG9uc2UgPSBmdW5jdGlvbiBoYW5kbGVSZXNwb25zZSgpIHtcbiAgICAgICAgICAgIHZhciBpLCByZXNwb25zZVR5cGU7aWYgKCgtLXJlcXVlc3RzLCBzZW5kaW5nID0gITEsIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGltZW91dF9zdGFydCA+PSBvcHRpb25zLnRpbWVvdXQpKSByZXR1cm4gdm9pZCAob3B0aW9ucy5hdHRlbXB0cyAmJiArK2F0dGVtcHRzID09IG9wdGlvbnMuYXR0ZW1wdHMgPyBwcm9taXNlKCExLCBbbmV3IEVycm9yKFwiVGltZW91dCAoXCIgKyB1cmwgKyBcIilcIiksIHhociwgcmVzcG9uc2VdKSA6IHByb21pc2Uuc2VuZCgpKTtyZXF1ZXN0X3N0YWNrLmxlbmd0aCAmJiByZXF1ZXN0X3N0YWNrLnNoaWZ0KCkuc2VuZCgpO3RyeSB7XG4gICAgICAgICAgICAgIGlmIChuYXRpdmVSZXNwb25zZVBhcnNpbmcgJiYgXCJyZXNwb25zZVwiIGluIHhociAmJiBudWxsICE9PSB4aHIucmVzcG9uc2UpIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlO2Vsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgocmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGUsIFwiYXV0b1wiID09IHJlc3BvbnNlVHlwZSkpIGlmICh4ZHIpIHJlc3BvbnNlVHlwZSA9IGRlZmF1bHRYZHJSZXNwb25zZVR5cGU7ZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgY3QgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikgfHwgXCJcIjtyZXNwb25zZVR5cGUgPSBjdC5pbmRleE9mKG1pbWVUeXBlcy5qc29uKSA+IC0xID8gXCJqc29uXCIgOiBjdC5pbmRleE9mKG1pbWVUeXBlcy54bWwpID4gLTEgPyBcInhtbFwiIDogXCJ0ZXh0XCI7XG4gICAgICAgICAgICAgICAgfXN3aXRjaCAocmVzcG9uc2VUeXBlKSB7Y2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVRleHQubGVuZ3RoKSB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gXCJKU09OXCIgaW4gZ2xvYmFsID8gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSA6IGV2YWwoXCIoXCIgKyB4aHIucmVzcG9uc2VUZXh0ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJFcnJvciB3aGlsZSBwYXJzaW5nIEpTT04gYm9keSA6IFwiICsgZTtcbiAgICAgICAgICAgICAgICAgICAgfWJyZWFrO2Nhc2UgXCJ4bWxcIjpcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuRE9NUGFyc2VyID8gcmVzcG9uc2UgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHhoci5yZXNwb25zZVRleHQsIFwidGV4dC94bWxcIikgOiAocmVzcG9uc2UgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIiksIHJlc3BvbnNlLmFzeW5jID0gXCJmYWxzZVwiLCByZXNwb25zZS5sb2FkWE1MKHhoci5yZXNwb25zZVRleHQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICB9aWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UuZG9jdW1lbnRFbGVtZW50IHx8IHJlc3BvbnNlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RoKSB0aHJvdyBcIkludmFsaWQgWE1MXCI7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0O31cbiAgICAgICAgICAgICAgfWlmIChcInN0YXR1c1wiIGluIHhociAmJiAhL14yfDEyMjMvLnRlc3QoeGhyLnN0YXR1cykpIHRocm93IHhoci5zdGF0dXMgKyBcIiAoXCIgKyB4aHIuc3RhdHVzVGV4dCArIFwiKVwiO3Byb21pc2UoITAsIFt4aHIsIHJlc3BvbnNlXSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHByb21pc2UoITEsIFtlLCB4aHIsIHJlc3BvbnNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcihlKSB7XG4gICAgICAgICAgICAtLXJlcXVlc3RzLCBwcm9taXNlKCExLCBbbmV3IEVycm9yKFwiQ29ubmVjdGlvbiBhYm9ydGVkXCIpLCB4aHIsIG51bGxdKTtcbiAgICAgICAgICB9O2lmICgob3B0aW9ucy5hc3luYyA9IFwiYXN5bmNcIiBpbiBvcHRpb25zID8gISFvcHRpb25zLmFzeW5jIDogITAsIG9wdGlvbnMuY2FjaGUgPSBcImNhY2hlXCIgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5jYWNoZSA6ICExLCBvcHRpb25zLmRhdGFUeXBlID0gXCJkYXRhVHlwZVwiIGluIG9wdGlvbnMgPyBvcHRpb25zLmRhdGFUeXBlLnRvTG93ZXJDYXNlKCkgOiBkZWZhdWx0RGF0YVR5cGUsIG9wdGlvbnMucmVzcG9uc2VUeXBlID0gXCJyZXNwb25zZVR5cGVcIiBpbiBvcHRpb25zID8gb3B0aW9ucy5yZXNwb25zZVR5cGUudG9Mb3dlckNhc2UoKSA6IFwiYXV0b1wiLCBvcHRpb25zLnVzZXIgPSBvcHRpb25zLnVzZXIgfHwgXCJcIiwgb3B0aW9ucy5wYXNzd29yZCA9IG9wdGlvbnMucGFzc3dvcmQgfHwgXCJcIiwgb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSAhIW9wdGlvbnMud2l0aENyZWRlbnRpYWxzLCBvcHRpb25zLnRpbWVvdXQgPSBcInRpbWVvdXRcIiBpbiBvcHRpb25zID8gcGFyc2VJbnQob3B0aW9ucy50aW1lb3V0LCAxMCkgOiAzZTQsIG9wdGlvbnMuYXR0ZW1wdHMgPSBcImF0dGVtcHRzXCIgaW4gb3B0aW9ucyA/IHBhcnNlSW50KG9wdGlvbnMuYXR0ZW1wdHMsIDEwKSA6IDEsIGkgPSB1cmwubWF0Y2goL1xcL1xcLyguKz8pXFwvLyksIGNyb3NzT3JpZ2luID0gaSAmJiAoaVsxXSA/IGlbMV0gIT0gbG9jYXRpb24uaG9zdCA6ICExKSwgXCJBcnJheUJ1ZmZlclwiIGluIGdsb2JhbCAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBvcHRpb25zLmRhdGFUeXBlID0gXCJhcnJheWJ1ZmZlclwiIDogXCJCbG9iXCIgaW4gZ2xvYmFsICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iID8gb3B0aW9ucy5kYXRhVHlwZSA9IFwiYmxvYlwiIDogXCJEb2N1bWVudFwiIGluIGdsb2JhbCAmJiBkYXRhIGluc3RhbmNlb2YgRG9jdW1lbnQgPyBvcHRpb25zLmRhdGFUeXBlID0gXCJkb2N1bWVudFwiIDogXCJGb3JtRGF0YVwiIGluIGdsb2JhbCAmJiBkYXRhIGluc3RhbmNlb2YgRm9ybURhdGEgJiYgKG9wdGlvbnMuZGF0YVR5cGUgPSBcImZvcm1kYXRhXCIpLCBudWxsICE9PSBkYXRhKSkgc3dpdGNoIChvcHRpb25zLmRhdGFUeXBlKSB7Y2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO2JyZWFrO2Nhc2UgXCJwb3N0XCI6XG4gICAgICAgICAgICAgIGRhdGEgPSBqcGFyYW0oZGF0YSk7fWlmIChvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIHZhciBmb3JtYXQgPSBmdW5jdGlvbiBmb3JtYXQoZSwgdCwgbikge1xuICAgICAgICAgICAgICByZXR1cm4gdCArIG4udG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH07Zm9yIChpIGluIG9wdGlvbnMuaGVhZGVycykgaGVhZGVyc1tpLnJlcGxhY2UoLyhefC0pKFteLV0pL2csIGZvcm1hdCldID0gb3B0aW9ucy5oZWFkZXJzW2ldO1xuICAgICAgICAgIH1yZXR1cm4gXCJDb250ZW50LVR5cGVcIiBpbiBoZWFkZXJzIHx8IFwiR0VUXCIgPT0gbWV0aG9kIHx8IG9wdGlvbnMuZGF0YVR5cGUgaW4gbWltZVR5cGVzICYmIG1pbWVUeXBlc1tvcHRpb25zLmRhdGFUeXBlXSAmJiAoaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IG1pbWVUeXBlc1tvcHRpb25zLmRhdGFUeXBlXSksIGhlYWRlcnMuQWNjZXB0IHx8IChoZWFkZXJzLkFjY2VwdCA9IG9wdGlvbnMucmVzcG9uc2VUeXBlIGluIGFjY2VwdCA/IGFjY2VwdFtvcHRpb25zLnJlc3BvbnNlVHlwZV0gOiBcIiovKlwiKSwgY3Jvc3NPcmlnaW4gfHwgXCJYLVJlcXVlc3RlZC1XaXRoXCIgaW4gaGVhZGVycyB8fCAoaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCIpLCBvcHRpb25zLmNhY2hlIHx8IFwiQ2FjaGUtQ29udHJvbFwiIGluIGhlYWRlcnMgfHwgKGhlYWRlcnNbXCJDYWNoZS1Db250cm9sXCJdID0gXCJuby1jYWNoZVwiKSwgXCJHRVRcIiA9PSBtZXRob2QgJiYgZGF0YSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBkYXRhICYmICh1cmwgKz0gKC9cXD8vLnRlc3QodXJsKSA/IFwiJlwiIDogXCI/XCIpICsgZGF0YSksIG9wdGlvbnMuYXN5bmMgJiYgcHJvbWlzZS5zZW5kKCksIHByb21pc2U7XG4gICAgICAgIH0sXG4gICAgICAgICAgICBnZXROZXdQcm9taXNlID0gZnVuY3Rpb24gZ2V0TmV3UHJvbWlzZShlKSB7XG4gICAgICAgICAgdmFyIHQgPSBbXSxcbiAgICAgICAgICAgICAgbiA9IDAsXG4gICAgICAgICAgICAgIG8gPSBbXTtyZXR1cm4gcGlua3lzd2VhcihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgdmFyIHMgPSAtMSxcbiAgICAgICAgICAgICAgICBpID0gZnVuY3Rpb24gaShlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaSwgYSwgcCwgdSkge1xuICAgICAgICAgICAgICAgIHZhciBmID0gKytzO3JldHVybiArK24sIHQucHVzaChxd2VzdChlLCByLmJhc2UgKyBpLCBhLCBwLCB1KS50aGVuKGZ1bmN0aW9uIChlLCB0KSB7XG4gICAgICAgICAgICAgICAgICBvW2ZdID0gYXJndW1lbnRzLCAtLW4gfHwgcighMCwgMSA9PSBvLmxlbmd0aCA/IG9bMF0gOiBbb10pO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHIoITEsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSkpLCByO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtyLmdldCA9IGkoXCJHRVRcIiksIHIucG9zdCA9IGkoXCJQT1NUXCIpLCByLnB1dCA9IGkoXCJQVVRcIiksIHJbXCJkZWxldGVcIl0gPSBpKFwiREVMRVRFXCIpLCByW1wiY2F0Y2hcIl0gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gci50aGVuKG51bGwsIGUpO1xuICAgICAgICAgICAgfSwgci5jb21wbGV0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIHZhciB0ID0gZnVuY3Rpb24gdCgpIHtcbiAgICAgICAgICAgICAgICBlKCk7XG4gICAgICAgICAgICAgIH07cmV0dXJuIHIudGhlbih0LCB0KTtcbiAgICAgICAgICAgIH0sIHIubWFwID0gZnVuY3Rpb24gKGUsIHQsIG4sIG8sIHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGkoZS50b1VwcGVyQ2FzZSgpKS5jYWxsKHRoaXMsIHQsIG4sIG8sIHIpO1xuICAgICAgICAgICAgfTtmb3IgKHZhciBhIGluIGUpIGEgaW4gciB8fCAoclthXSA9IGVbYV0pO3JldHVybiByLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwLCBuID0gdC5sZW5ndGg7IG4gPiBlOyArK2UpIHRbZV0uc2VuZCgpO3JldHVybiByO1xuICAgICAgICAgICAgfSwgci5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDAsIG4gPSB0Lmxlbmd0aDsgbiA+IGU7ICsrZSkgdFtlXS5hYm9ydCgpO3JldHVybiByO1xuICAgICAgICAgICAgfSwgcjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIHEgPSB7IGJhc2U6IFwiXCIsIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE5ld1Byb21pc2UocSkuZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfSwgcG9zdDogZnVuY3Rpb24gcG9zdCgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXROZXdQcm9taXNlKHEpLnBvc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9LCBwdXQ6IGZ1bmN0aW9uIHB1dCgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXROZXdQcm9taXNlKHEpLnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH0sIFwiZGVsZXRlXCI6IGZ1bmN0aW9uIF9kZWxldGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV3UHJvbWlzZShxKVtcImRlbGV0ZVwiXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH0sIG1hcDogZnVuY3Rpb24gbWFwKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldE5ld1Byb21pc2UocSkubWFwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfSwgeGhyMjogeGhyMiwgbGltaXQ6IGZ1bmN0aW9uIGxpbWl0KGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfbGltaXQgPSBlLCBxO1xuICAgICAgICAgIH0sIHNldERlZmF1bHRPcHRpb25zOiBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhlKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdE9wdGlvbnMgPSBlLCBxO1xuICAgICAgICAgIH0sIHNldERlZmF1bHRYZHJSZXNwb25zZVR5cGU6IGZ1bmN0aW9uIHNldERlZmF1bHRYZHJSZXNwb25zZVR5cGUoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRYZHJSZXNwb25zZVR5cGUgPSBlLnRvTG93ZXJDYXNlKCksIHE7XG4gICAgICAgICAgfSwgc2V0RGVmYXVsdERhdGFUeXBlOiBmdW5jdGlvbiBzZXREZWZhdWx0RGF0YVR5cGUoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhVHlwZSA9IGUudG9Mb3dlckNhc2UoKSwgcTtcbiAgICAgICAgICB9LCBnZXRPcGVuUmVxdWVzdHM6IGZ1bmN0aW9uIGdldE9wZW5SZXF1ZXN0cygpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0cztcbiAgICAgICAgICB9IH07cmV0dXJuIHE7XG4gICAgICB9KSgpO1xuICAgIH0sIHsgXCJqcXVlcnktcGFyYW1cIjogMSwgcGlua3lzd2VhcjogMiB9XSB9LCB7fSwgWzEsIDJdKShcInF3ZXN0XCIpO1xufSk7XG5cbmNjLl9SRnBvcCgpOyIsIlwidXNlIHN0cmljdFwiO1xuY2MuX1JGcHVzaChtb2R1bGUsICczNDI3NTZwUGx0UHZJdGlLdWQ3enVjRCcsICdzb2NrZXQuaW8nKTtcbi8vIGxpYi9zb2NrZXQuaW8uanNcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoZikge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZigpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZztpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZyA9IHdpbmRvdztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGcgPSBnbG9iYWw7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZyA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGcgPSB0aGlzO1xuICAgIH1nLmlvID0gZigpO1xuICB9XG59KShmdW5jdGlvbiAoKSB7XG4gIHZhciBkZWZpbmUsIG1vZHVsZSwgZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCwgbiwgcikge1xuICAgIGZ1bmN0aW9uIHMobywgdSkge1xuICAgICAgaWYgKCFuW29dKSB7XG4gICAgICAgIGlmICghdFtvXSkge1xuICAgICAgICAgIHZhciBhID0gdHlwZW9mIHJlcXVpcmUgPT0gXCJmdW5jdGlvblwiICYmIHJlcXVpcmU7aWYgKCF1ICYmIGEpIHJldHVybiBhKG8sICEwKTtpZiAoaSkgcmV0dXJuIGkobywgITApO3ZhciBmID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIG8gKyBcIidcIik7dGhyb3cgKGYuY29kZSA9IFwiTU9EVUxFX05PVF9GT1VORFwiLCBmKTtcbiAgICAgICAgfXZhciBsID0gbltvXSA9IHsgZXhwb3J0czoge30gfTt0W29dWzBdLmNhbGwobC5leHBvcnRzLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciBuID0gdFtvXVsxXVtlXTtyZXR1cm4gcyhuID8gbiA6IGUpO1xuICAgICAgICB9LCBsLCBsLmV4cG9ydHMsIGUsIHQsIG4sIHIpO1xuICAgICAgfXJldHVybiBuW29dLmV4cG9ydHM7XG4gICAgfXZhciBpID0gdHlwZW9mIHJlcXVpcmUgPT0gXCJmdW5jdGlvblwiICYmIHJlcXVpcmU7Zm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKSBzKHJbb10pO3JldHVybiBzO1xuICB9KSh7IDE6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oXCIuL2xpYi9cIik7XG4gICAgfSwgeyBcIi4vbGliL1wiOiAyIH1dLCAyOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKFwiLi9zb2NrZXRcIik7bW9kdWxlLmV4cG9ydHMucGFyc2VyID0gX2RlcmVxXyhcImVuZ2luZS5pby1wYXJzZXJcIik7XG4gICAgfSwgeyBcIi4vc29ja2V0XCI6IDMsIFwiZW5naW5lLmlvLXBhcnNlclwiOiAxOSB9XSwgMzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIChmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciB0cmFuc3BvcnRzID0gX2RlcmVxXyhcIi4vdHJhbnNwb3J0c1wiKTt2YXIgRW1pdHRlciA9IF9kZXJlcV8oXCJjb21wb25lbnQtZW1pdHRlclwiKTt2YXIgZGVidWcgPSBfZGVyZXFfKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OnNvY2tldFwiKTt2YXIgaW5kZXggPSBfZGVyZXFfKFwiaW5kZXhvZlwiKTt2YXIgcGFyc2VyID0gX2RlcmVxXyhcImVuZ2luZS5pby1wYXJzZXJcIik7dmFyIHBhcnNldXJpID0gX2RlcmVxXyhcInBhcnNldXJpXCIpO3ZhciBwYXJzZWpzb24gPSBfZGVyZXFfKFwicGFyc2Vqc29uXCIpO3ZhciBwYXJzZXFzID0gX2RlcmVxXyhcInBhcnNlcXNcIik7bW9kdWxlLmV4cG9ydHMgPSBTb2NrZXQ7ZnVuY3Rpb24gbm9vcCgpIHt9ZnVuY3Rpb24gU29ja2V0KHVyaSwgb3B0cykge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTb2NrZXQpKSByZXR1cm4gbmV3IFNvY2tldCh1cmksIG9wdHMpO29wdHMgPSBvcHRzIHx8IHt9O2lmICh1cmkgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgdXJpKSB7XG4gICAgICAgICAgICBvcHRzID0gdXJpO3VyaSA9IG51bGw7XG4gICAgICAgICAgfWlmICh1cmkpIHtcbiAgICAgICAgICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7b3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O29wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09IFwiaHR0cHNcIiB8fCB1cmkucHJvdG9jb2wgPT0gXCJ3c3NcIjtvcHRzLnBvcnQgPSB1cmkucG9ydDtpZiAodXJpLnF1ZXJ5KSBvcHRzLnF1ZXJ5ID0gdXJpLnF1ZXJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgICAgICAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICAgICAgICAgIH10aGlzLnNlY3VyZSA9IG51bGwgIT0gb3B0cy5zZWN1cmUgPyBvcHRzLnNlY3VyZSA6IGdsb2JhbC5sb2NhdGlvbiAmJiBcImh0dHBzOlwiID09IGxvY2F0aW9uLnByb3RvY29sO2lmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAgICAgICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gXCI0NDNcIiA6IFwiODBcIjtcbiAgICAgICAgICB9dGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7dGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHwgKGdsb2JhbC5sb2NhdGlvbiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogXCJsb2NhbGhvc3RcIik7dGhpcy5wb3J0ID0gb3B0cy5wb3J0IHx8IChnbG9iYWwubG9jYXRpb24gJiYgbG9jYXRpb24ucG9ydCA/IGxvY2F0aW9uLnBvcnQgOiB0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKTt0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeSB8fCB7fTtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgdGhpcy5xdWVyeSkgdGhpcy5xdWVyeSA9IHBhcnNlcXMuZGVjb2RlKHRoaXMucXVlcnkpO3RoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7dGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCBcIi9lbmdpbmUuaW9cIikucmVwbGFjZSgvXFwvJC8sIFwiXCIpICsgXCIvXCI7dGhpcy5mb3JjZUpTT05QID0gISFvcHRzLmZvcmNlSlNPTlA7dGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO3RoaXMuZm9yY2VCYXNlNjQgPSAhIW9wdHMuZm9yY2VCYXNlNjQ7dGhpcy5lbmFibGVzWERSID0gISFvcHRzLmVuYWJsZXNYRFI7dGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW0gfHwgXCJ0XCI7dGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7dGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFtcInBvbGxpbmdcIiwgXCJ3ZWJzb2NrZXRcIl07dGhpcy5yZWFkeVN0YXRlID0gXCJcIjt0aGlzLndyaXRlQnVmZmVyID0gW107dGhpcy5wb2xpY3lQb3J0ID0gb3B0cy5wb2xpY3lQb3J0IHx8IDg0Mzt0aGlzLnJlbWVtYmVyVXBncmFkZSA9IG9wdHMucmVtZW1iZXJVcGdyYWRlIHx8IGZhbHNlO3RoaXMuYmluYXJ5VHlwZSA9IG51bGw7dGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBvcHRzLm9ubHlCaW5hcnlVcGdyYWRlczt0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gZmFsc2UgIT09IG9wdHMucGVyTWVzc2FnZURlZmxhdGUgPyBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHt9IDogZmFsc2U7aWYgKHRydWUgPT09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUpIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtpZiAodGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSAmJiBudWxsID09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCA9IDEwMjQ7XG4gICAgICAgICAgfXRoaXMucGZ4ID0gb3B0cy5wZnggfHwgbnVsbDt0aGlzLmtleSA9IG9wdHMua2V5IHx8IG51bGw7dGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlIHx8IG51bGw7dGhpcy5jZXJ0ID0gb3B0cy5jZXJ0IHx8IG51bGw7dGhpcy5jYSA9IG9wdHMuY2EgfHwgbnVsbDt0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnMgfHwgbnVsbDt0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkID09PSB1bmRlZmluZWQgPyBudWxsIDogb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09IFwib2JqZWN0XCIgJiYgZ2xvYmFsO2lmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCkge1xuICAgICAgICAgICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfXRoaXMub3BlbigpO1xuICAgICAgICB9U29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO0VtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7U29ja2V0LnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1NvY2tldC5Tb2NrZXQgPSBTb2NrZXQ7U29ja2V0LlRyYW5zcG9ydCA9IF9kZXJlcV8oXCIuL3RyYW5zcG9ydFwiKTtTb2NrZXQudHJhbnNwb3J0cyA9IF9kZXJlcV8oXCIuL3RyYW5zcG9ydHNcIik7U29ja2V0LnBhcnNlciA9IF9kZXJlcV8oXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1NvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO3ZhciBxdWVyeSA9IGNsb25lKHRoaXMucXVlcnkpO3F1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtxdWVyeS50cmFuc3BvcnQgPSBuYW1lO2lmICh0aGlzLmlkKSBxdWVyeS5zaWQgPSB0aGlzLmlkO3ZhciB0cmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0c1tuYW1lXSh7IGFnZW50OiB0aGlzLmFnZW50LCBob3N0bmFtZTogdGhpcy5ob3N0bmFtZSwgcG9ydDogdGhpcy5wb3J0LCBzZWN1cmU6IHRoaXMuc2VjdXJlLCBwYXRoOiB0aGlzLnBhdGgsIHF1ZXJ5OiBxdWVyeSwgZm9yY2VKU09OUDogdGhpcy5mb3JjZUpTT05QLCBqc29ucDogdGhpcy5qc29ucCwgZm9yY2VCYXNlNjQ6IHRoaXMuZm9yY2VCYXNlNjQsIGVuYWJsZXNYRFI6IHRoaXMuZW5hYmxlc1hEUiwgdGltZXN0YW1wUmVxdWVzdHM6IHRoaXMudGltZXN0YW1wUmVxdWVzdHMsIHRpbWVzdGFtcFBhcmFtOiB0aGlzLnRpbWVzdGFtcFBhcmFtLCBwb2xpY3lQb3J0OiB0aGlzLnBvbGljeVBvcnQsIHNvY2tldDogdGhpcywgcGZ4OiB0aGlzLnBmeCwga2V5OiB0aGlzLmtleSwgcGFzc3BocmFzZTogdGhpcy5wYXNzcGhyYXNlLCBjZXJ0OiB0aGlzLmNlcnQsIGNhOiB0aGlzLmNhLCBjaXBoZXJzOiB0aGlzLmNpcGhlcnMsIHJlamVjdFVuYXV0aG9yaXplZDogdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQsIHBlck1lc3NhZ2VEZWZsYXRlOiB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLCBleHRyYUhlYWRlcnM6IHRoaXMuZXh0cmFIZWFkZXJzIH0pO3JldHVybiB0cmFuc3BvcnQ7XG4gICAgICAgIH07ZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gICAgICAgICAgdmFyIG8gPSB7fTtmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICBvW2ldID0gb2JqW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1yZXR1cm4gbztcbiAgICAgICAgfVNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdHJhbnNwb3J0O2lmICh0aGlzLnJlbWVtYmVyVXBncmFkZSAmJiBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmIHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKFwid2Vic29ja2V0XCIpICE9IC0xKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBcIndlYnNvY2tldFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpO1xuICAgICAgICAgICAgfSwgMCk7cmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydHNbMF07XG4gICAgICAgICAgfXRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO3RyeSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO3RoaXMub3BlbigpO3JldHVybjtcbiAgICAgICAgICB9dHJhbnNwb3J0Lm9wZW4oKTt0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICB9O1NvY2tldC5wcm90b3R5cGUuc2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICAgICAgICAgIGRlYnVnKFwic2V0dGluZyB0cmFuc3BvcnQgJXNcIiwgdHJhbnNwb3J0Lm5hbWUpO3ZhciBzZWxmID0gdGhpcztpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzXCIsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO3RoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgIH10aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDt0cmFuc3BvcnQub24oXCJkcmFpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9uRHJhaW4oKTtcbiAgICAgICAgICB9KS5vbihcInBhY2tldFwiLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgICAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gICAgICAgICAgfSkub24oXCJlcnJvclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKGUpO1xuICAgICAgICAgIH0pLm9uKFwiY2xvc2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1NvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTt2YXIgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQobmFtZSwgeyBwcm9iZTogMSB9KSxcbiAgICAgICAgICAgICAgZmFpbGVkID0gZmFsc2UsXG4gICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1NvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4oKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgICAgICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O2ZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgICAgICAgICB9aWYgKGZhaWxlZCkgcmV0dXJuO2RlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO3RyYW5zcG9ydC5zZW5kKFt7IHR5cGU6IFwicGluZ1wiLCBkYXRhOiBcInByb2JlXCIgfV0pO3RyYW5zcG9ydC5vbmNlKFwicGFja2V0XCIsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO2lmIChcInBvbmdcIiA9PSBtc2cudHlwZSAmJiBcInByb2JlXCIgPT0gbXNnLmRhdGEpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBwb25nJywgbmFtZSk7c2VsZi51cGdyYWRpbmcgPSB0cnVlO3NlbGYuZW1pdChcInVwZ3JhZGluZ1wiLCB0cmFuc3BvcnQpO2lmICghdHJhbnNwb3J0KSByZXR1cm47U29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IFwid2Vic29ja2V0XCIgPT0gdHJhbnNwb3J0Lm5hbWU7ZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7c2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO2lmIChcImNsb3NlZFwiID09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO2RlYnVnKFwiY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0XCIpO2NsZWFudXAoKTtzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO3RyYW5zcG9ydC5zZW5kKFt7IHR5cGU6IFwidXBncmFkZVwiIH1dKTtzZWxmLmVtaXQoXCJ1cGdyYWRlXCIsIHRyYW5zcG9ydCk7dHJhbnNwb3J0ID0gbnVsbDtzZWxmLnVwZ3JhZGluZyA9IGZhbHNlO3NlbGYuZmx1c2goKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQnLCBuYW1lKTt2YXIgZXJyID0gbmV3IEVycm9yKFwicHJvYmUgZXJyb3JcIik7ZXJyLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO3NlbGYuZW1pdChcInVwZ3JhZGVFcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9ZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0KCkge1xuICAgICAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO2ZhaWxlZCA9IHRydWU7Y2xlYW51cCgpO3RyYW5zcG9ydC5jbG9zZSgpO3RyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgfWZ1bmN0aW9uIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvcjogXCIgKyBlcnIpO2Vycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO2ZyZWV6ZVRyYW5zcG9ydCgpO2RlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7c2VsZi5lbWl0KFwidXBncmFkZUVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICB9ZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSgpIHtcbiAgICAgICAgICAgIG9uZXJyb3IoXCJ0cmFuc3BvcnQgY2xvc2VkXCIpO1xuICAgICAgICAgIH1mdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgICAgICAgICAgb25lcnJvcihcInNvY2tldCBjbG9zZWRcIik7XG4gICAgICAgICAgfWZ1bmN0aW9uIG9udXBncmFkZSh0bykge1xuICAgICAgICAgICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9IHRyYW5zcG9ydC5uYW1lKSB7XG4gICAgICAgICAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7ZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfWZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7dHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgb25lcnJvcik7dHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25UcmFuc3BvcnRDbG9zZSk7c2VsZi5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO3NlbGYucmVtb3ZlTGlzdGVuZXIoXCJ1cGdyYWRpbmdcIiwgb251cGdyYWRlKTtcbiAgICAgICAgICB9dHJhbnNwb3J0Lm9uY2UoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7dHJhbnNwb3J0Lm9uY2UoXCJlcnJvclwiLCBvbmVycm9yKTt0cmFuc3BvcnQub25jZShcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO3RoaXMub25jZShcImNsb3NlXCIsIG9uY2xvc2UpO3RoaXMub25jZShcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO3RyYW5zcG9ydC5vcGVuKCk7XG4gICAgICAgIH07U29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoXCJzb2NrZXQgb3BlblwiKTt0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5cIjtTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PSB0aGlzLnRyYW5zcG9ydC5uYW1lO3RoaXMuZW1pdChcIm9wZW5cIik7dGhpcy5mbHVzaCgpO2lmIChcIm9wZW5cIiA9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcInN0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzXCIpO2ZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07U29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO3RoaXMuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO3RoaXMuZW1pdChcImhlYXJ0YmVhdFwiKTtzd2l0Y2ggKHBhY2tldC50eXBlKSB7Y2FzZSBcIm9wZW5cIjpcbiAgICAgICAgICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKHBhcnNlanNvbihwYWNrZXQuZGF0YSkpO2JyZWFrO2Nhc2UgXCJwb25nXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQaW5nKCk7dGhpcy5lbWl0KFwicG9uZ1wiKTticmVhaztjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO2Vyci5jb2RlID0gcGFja2V0LmRhdGE7dGhpcy5vbkVycm9yKGVycik7YnJlYWs7Y2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHBhY2tldC5kYXRhKTt0aGlzLmVtaXQoXCJtZXNzYWdlXCIsIHBhY2tldC5kYXRhKTticmVhazt9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnKCdwYWNrZXQgcmVjZWl2ZWQgd2l0aCBzb2NrZXQgcmVhZHlTdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtTb2NrZXQucHJvdG90eXBlLm9uSGFuZHNoYWtlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJoYW5kc2hha2VcIiwgZGF0YSk7dGhpcy5pZCA9IGRhdGEuc2lkO3RoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO3RoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO3RoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7dGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7dGhpcy5vbk9wZW4oKTtpZiAoXCJjbG9zZWRcIiA9PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjt0aGlzLnNldFBpbmcoKTt0aGlzLnJlbW92ZUxpc3RlbmVyKFwiaGVhcnRiZWF0XCIsIHRoaXMub25IZWFydGJlYXQpO3RoaXMub24oXCJoZWFydGJlYXRcIiwgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gICAgICAgIH07U29ja2V0LnByb3RvdHlwZS5vbkhlYXJ0YmVhdCA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7dmFyIHNlbGYgPSB0aGlzO3NlbGYucGluZ1RpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT0gc2VsZi5yZWFkeVN0YXRlKSByZXR1cm47c2VsZi5vbkNsb3NlKFwicGluZyB0aW1lb3V0XCIpO1xuICAgICAgICAgIH0sIHRpbWVvdXQgfHwgc2VsZi5waW5nSW50ZXJ2YWwgKyBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICAgICAgfTtTb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO2NsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIndyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtc1wiLCBzZWxmLnBpbmdUaW1lb3V0KTtzZWxmLnBpbmcoKTtzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICAgICAgICAgIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbiAgICAgICAgfTtTb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO3RoaXMuc2VuZFBhY2tldChcInBpbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5lbWl0KFwicGluZ1wiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtTb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTt0aGlzLnByZXZCdWZmZXJMZW4gPSAwO2lmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZHJhaW5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07U29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoXCJjbG9zZWRcIiAhPSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiYgIXRoaXMudXBncmFkaW5nICYmIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcImZsdXNoaW5nICVkIHBhY2tldHMgaW4gc29ja2V0XCIsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTt0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO3RoaXMucHJldkJ1ZmZlckxlbiA9IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoO3RoaXMuZW1pdChcImZsdXNoXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtTb2NrZXQucHJvdG90eXBlLndyaXRlID0gU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICAgICAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO3JldHVybiB0aGlzO1xuICAgICAgICB9O1NvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRhdGEpIHtcbiAgICAgICAgICAgIGZuID0gZGF0YTtkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1pZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBmbiA9IG9wdGlvbnM7b3B0aW9ucyA9IG51bGw7XG4gICAgICAgICAgfWlmIChcImNsb3NpbmdcIiA9PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJjbG9zZWRcIiA9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9b3B0aW9ucyA9IG9wdGlvbnMgfHwge307b3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO3ZhciBwYWNrZXQgPSB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEsIG9wdGlvbnM6IG9wdGlvbnMgfTt0aGlzLmVtaXQoXCJwYWNrZXRDcmVhdGVcIiwgcGFja2V0KTt0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtpZiAoZm4pIHRoaXMub25jZShcImZsdXNoXCIsIGZuKTt0aGlzLmZsdXNoKCk7XG4gICAgICAgIH07U29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zaW5nXCI7dmFyIHNlbGYgPSB0aGlzO2lmICh0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXBncmFkaW5nKSB7XG4gICAgICAgICAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudXBncmFkaW5nKSB7XG4gICAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1mdW5jdGlvbiBjbG9zZSgpIHtcbiAgICAgICAgICAgIHNlbGYub25DbG9zZShcImZvcmNlZCBjbG9zZVwiKTtkZWJ1ZyhcInNvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2VcIik7c2VsZi50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICB9ZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlKCkge1xuICAgICAgICAgICAgc2VsZi5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtzZWxmLnJlbW92ZUxpc3RlbmVyKFwidXBncmFkZUVycm9yXCIsIGNsZWFudXBBbmRDbG9zZSk7Y2xvc2UoKTtcbiAgICAgICAgICB9ZnVuY3Rpb24gd2FpdEZvclVwZ3JhZGUoKSB7XG4gICAgICAgICAgICBzZWxmLm9uY2UoXCJ1cGdyYWRlXCIsIGNsZWFudXBBbmRDbG9zZSk7c2VsZi5vbmNlKFwidXBncmFkZUVycm9yXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgICB9O1NvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBkZWJ1ZyhcInNvY2tldCBlcnJvciAlalwiLCBlcnIpO1NvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTt0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO3RoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLCBlcnIpO1xuICAgICAgICB9O1NvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09IHRoaXMucmVhZHlTdGF0ZSB8fCBcImNsb3NpbmdcIiA9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7dmFyIHNlbGYgPSB0aGlzO2NsZWFyVGltZW91dCh0aGlzLnBpbmdJbnRlcnZhbFRpbWVyKTtjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTt0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJjbG9zZVwiKTt0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO3RoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO3RoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7dGhpcy5pZCA9IG51bGw7dGhpcy5lbWl0KFwiY2xvc2VcIiwgcmVhc29uLCBkZXNjKTtzZWxmLndyaXRlQnVmZmVyID0gW107c2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH07U29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICAgICAgICAgIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107Zm9yICh2YXIgaSA9IDAsIGogPSB1cGdyYWRlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gICAgICAgICAgfXJldHVybiBmaWx0ZXJlZFVwZ3JhZGVzO1xuICAgICAgICB9O1xuICAgICAgfSkuY2FsbCh0aGlzLCB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHt9KTtcbiAgICB9LCB7IFwiLi90cmFuc3BvcnRcIjogNCwgXCIuL3RyYW5zcG9ydHNcIjogNSwgXCJjb21wb25lbnQtZW1pdHRlclwiOiAxNSwgZGVidWc6IDE3LCBcImVuZ2luZS5pby1wYXJzZXJcIjogMTksIGluZGV4b2Y6IDIzLCBwYXJzZWpzb246IDI2LCBwYXJzZXFzOiAyNywgcGFyc2V1cmk6IDI4IH1dLCA0OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgdmFyIHBhcnNlciA9IF9kZXJlcV8oXCJlbmdpbmUuaW8tcGFyc2VyXCIpO3ZhciBFbWl0dGVyID0gX2RlcmVxXyhcImNvbXBvbmVudC1lbWl0dGVyXCIpO21vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O2Z1bmN0aW9uIFRyYW5zcG9ydChvcHRzKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IG9wdHMucGF0aDt0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZTt0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7dGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTt0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTt0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTt0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0czt0aGlzLnJlYWR5U3RhdGUgPSBcIlwiO3RoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO3RoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7dGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO3RoaXMucGZ4ID0gb3B0cy5wZng7dGhpcy5rZXkgPSBvcHRzLmtleTt0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7dGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O3RoaXMuY2EgPSBvcHRzLmNhO3RoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVyczt0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO3RoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgICB9RW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtUcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtlcnIudHlwZSA9IFwiVHJhbnNwb3J0RXJyb3JcIjtlcnIuZGVzY3JpcHRpb24gPSBkZXNjO3RoaXMuZW1pdChcImVycm9yXCIsIGVycik7cmV0dXJuIHRoaXM7XG4gICAgICB9O1RyYW5zcG9ydC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwiXCIgPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7dGhpcy5kb09wZW4oKTtcbiAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgfTtUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgIHRoaXMuZG9DbG9zZSgpO3RoaXMub25DbG9zZSgpO1xuICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICB9O1RyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gICAgICAgIGlmIChcIm9wZW5cIiA9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyYW5zcG9ydCBub3Qgb3BlblwiKTtcbiAgICAgICAgfVxuICAgICAgfTtUcmFuc3BvcnQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuXCI7dGhpcy53cml0YWJsZSA9IHRydWU7dGhpcy5lbWl0KFwib3BlblwiKTtcbiAgICAgIH07VHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTt0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gICAgICB9O1RyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIHRoaXMuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgICAgfTtUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7dGhpcy5lbWl0KFwiY2xvc2VcIik7XG4gICAgICB9O1xuICAgIH0sIHsgXCJjb21wb25lbnQtZW1pdHRlclwiOiAxNSwgXCJlbmdpbmUuaW8tcGFyc2VyXCI6IDE5IH1dLCA1OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gX2RlcmVxXyhcInhtbGh0dHByZXF1ZXN0LXNzbFwiKTt2YXIgWEhSID0gX2RlcmVxXyhcIi4vcG9sbGluZy14aHJcIik7dmFyIEpTT05QID0gX2RlcmVxXyhcIi4vcG9sbGluZy1qc29ucFwiKTt2YXIgd2Vic29ja2V0ID0gX2RlcmVxXyhcIi4vd2Vic29ja2V0XCIpO2V4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7ZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7ZnVuY3Rpb24gcG9sbGluZyhvcHRzKSB7XG4gICAgICAgICAgdmFyIHhocjt2YXIgeGQgPSBmYWxzZTt2YXIgeHMgPSBmYWxzZTt2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICB2YXIgaXNTU0wgPSBcImh0dHBzOlwiID09IGxvY2F0aW9uLnByb3RvY29sO3ZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtpZiAoIXBvcnQpIHtcbiAgICAgICAgICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgICAgICAgICB9eGQgPSBvcHRzLmhvc3RuYW1lICE9IGxvY2F0aW9uLmhvc3RuYW1lIHx8IHBvcnQgIT0gb3B0cy5wb3J0O3hzID0gb3B0cy5zZWN1cmUgIT0gaXNTU0w7XG4gICAgICAgICAgfW9wdHMueGRvbWFpbiA9IHhkO29wdHMueHNjaGVtZSA9IHhzO3hociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtpZiAoXCJvcGVuXCIgaW4geGhyICYmICFvcHRzLmZvcmNlSlNPTlApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWpzb25wKSB0aHJvdyBuZXcgRXJyb3IoXCJKU09OUCBkaXNhYmxlZFwiKTtyZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuY2FsbCh0aGlzLCB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHt9KTtcbiAgICB9LCB7IFwiLi9wb2xsaW5nLWpzb25wXCI6IDYsIFwiLi9wb2xsaW5nLXhoclwiOiA3LCBcIi4vd2Vic29ja2V0XCI6IDksIFwieG1saHR0cHJlcXVlc3Qtc3NsXCI6IDEwIH1dLCA2OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIFBvbGxpbmcgPSBfZGVyZXFfKFwiLi9wb2xsaW5nXCIpO3ZhciBpbmhlcml0ID0gX2RlcmVxXyhcImNvbXBvbmVudC1pbmhlcml0XCIpO21vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO3ZhciByTmV3bGluZSA9IC9cXG4vZzt2YXIgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7dmFyIGNhbGxiYWNrczt2YXIgaW5kZXggPSAwO2Z1bmN0aW9uIGVtcHR5KCkge31mdW5jdGlvbiBKU09OUFBvbGxpbmcob3B0cykge1xuICAgICAgICAgIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTt0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtpZiAoIWNhbGxiYWNrcykge1xuICAgICAgICAgICAgaWYgKCFnbG9iYWwuX19fZWlvKSBnbG9iYWwuX19fZWlvID0gW107Y2FsbGJhY2tzID0gZ2xvYmFsLl9fX2VpbztcbiAgICAgICAgICB9dGhpcy5pbmRleCA9IGNhbGxiYWNrcy5sZW5ndGg7dmFyIHNlbGYgPSB0aGlzO2NhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgIHNlbGYub25EYXRhKG1zZyk7XG4gICAgICAgICAgfSk7dGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfWluaGVyaXQoSlNPTlBQb2xsaW5nLCBQb2xsaW5nKTtKU09OUFBvbGxpbmcucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7SlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aGlzLnNjcmlwdCkge1xuICAgICAgICAgICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7dGhpcy5zY3JpcHQgPSBudWxsO1xuICAgICAgICAgIH1pZiAodGhpcy5mb3JtKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO3RoaXMuZm9ybSA9IG51bGw7dGhpcy5pZnJhbWUgPSBudWxsO1xuICAgICAgICAgIH1Qb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIH07SlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO3ZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2lmICh0aGlzLnNjcmlwdCkge1xuICAgICAgICAgICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7dGhpcy5zY3JpcHQgPSBudWxsO1xuICAgICAgICAgIH1zY3JpcHQuYXN5bmMgPSB0cnVlO3NjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO3NjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNlbGYub25FcnJvcihcImpzb25wIHBvbGwgZXJyb3JcIiwgZSk7XG4gICAgICAgICAgfTt2YXIgaW5zZXJ0QXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXTtpZiAoaW5zZXJ0QXQpIHtcbiAgICAgICAgICAgIGluc2VydEF0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaW5zZXJ0QXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICAgIH10aGlzLnNjcmlwdCA9IHNjcmlwdDt2YXIgaXNVQWdlY2tvID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbmF2aWdhdG9yICYmIC9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYgKGlzVUFnZWNrbykge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtKU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7aWYgKCF0aGlzLmZvcm0pIHtcbiAgICAgICAgICAgIHZhciBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7dmFyIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7dmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9IFwiZWlvX2lmcmFtZV9cIiArIHRoaXMuaW5kZXg7dmFyIGlmcmFtZTtmb3JtLmNsYXNzTmFtZSA9IFwic29ja2V0aW9cIjtmb3JtLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO2Zvcm0uc3R5bGUudG9wID0gXCItMTAwMHB4XCI7Zm9ybS5zdHlsZS5sZWZ0ID0gXCItMTAwMHB4XCI7Zm9ybS50YXJnZXQgPSBpZDtmb3JtLm1ldGhvZCA9IFwiUE9TVFwiO2Zvcm0uc2V0QXR0cmlidXRlKFwiYWNjZXB0LWNoYXJzZXRcIiwgXCJ1dGYtOFwiKTthcmVhLm5hbWUgPSBcImRcIjtmb3JtLmFwcGVuZENoaWxkKGFyZWEpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7dGhpcy5mb3JtID0gZm9ybTt0aGlzLmFyZWEgPSBhcmVhO1xuICAgICAgICAgIH10aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgIGluaXRJZnJhbWUoKTtmbigpO1xuICAgICAgICAgIH1mdW5jdGlvbiBpbml0SWZyYW1lKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaWZyYW1lKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHNlbGYub25FcnJvcihcImpzb25wIHBvbGxpbmcgaWZyYW1lIHJlbW92YWwgZXJyb3JcIiwgZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH10cnkge1xuICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIG5hbWU9XCInICsgc2VsZi5pZnJhbWVJZCArICdcIj4nO2lmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7aWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO2lmcmFtZS5zcmMgPSBcImphdmFzY3JpcHQ6MFwiO1xuICAgICAgICAgICAgfWlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7c2VsZi5mb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7c2VsZi5pZnJhbWUgPSBpZnJhbWU7XG4gICAgICAgICAgfWluaXRJZnJhbWUoKTtkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgXCJcXFxcXFxuXCIpO3RoaXMuYXJlYS52YWx1ZSA9IGRhdGEucmVwbGFjZShyTmV3bGluZSwgXCJcXFxcblwiKTt0cnkge1xuICAgICAgICAgICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9aWYgKHRoaXMuaWZyYW1lLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaWZyYW1lLm9ubG9hZCA9IGNvbXBsZXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pLmNhbGwodGhpcywgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fSk7XG4gICAgfSwgeyBcIi4vcG9sbGluZ1wiOiA4LCBcImNvbXBvbmVudC1pbmhlcml0XCI6IDE2IH1dLCA3OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gX2RlcmVxXyhcInhtbGh0dHByZXF1ZXN0LXNzbFwiKTt2YXIgUG9sbGluZyA9IF9kZXJlcV8oXCIuL3BvbGxpbmdcIik7dmFyIEVtaXR0ZXIgPSBfZGVyZXFfKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7dmFyIGluaGVyaXQgPSBfZGVyZXFfKFwiY29tcG9uZW50LWluaGVyaXRcIik7dmFyIGRlYnVnID0gX2RlcmVxXyhcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhoclwiKTttb2R1bGUuZXhwb3J0cyA9IFhIUjttb2R1bGUuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtmdW5jdGlvbiBlbXB0eSgpIHt9ZnVuY3Rpb24gWEhSKG9wdHMpIHtcbiAgICAgICAgICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7aWYgKGdsb2JhbC5sb2NhdGlvbikge1xuICAgICAgICAgICAgdmFyIGlzU1NMID0gXCJodHRwczpcIiA9PSBsb2NhdGlvbi5wcm90b2NvbDt2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7aWYgKCFwb3J0KSB7XG4gICAgICAgICAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgICAgICAgICAgfXRoaXMueGQgPSBvcHRzLmhvc3RuYW1lICE9IGdsb2JhbC5sb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9IG9wdHMucG9ydDt0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT0gaXNTU0w7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgICAgICAgfVxuICAgICAgICB9aW5oZXJpdChYSFIsIFBvbGxpbmcpO1hIUi5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1hIUi5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgICAgICAgb3B0cyA9IG9wdHMgfHwge307b3B0cy51cmkgPSB0aGlzLnVyaSgpO29wdHMueGQgPSB0aGlzLnhkO29wdHMueHMgPSB0aGlzLnhzO29wdHMuYWdlbnQgPSB0aGlzLmFnZW50IHx8IGZhbHNlO29wdHMuc3VwcG9ydHNCaW5hcnkgPSB0aGlzLnN1cHBvcnRzQmluYXJ5O29wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtvcHRzLnBmeCA9IHRoaXMucGZ4O29wdHMua2V5ID0gdGhpcy5rZXk7b3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO29wdHMuY2VydCA9IHRoaXMuY2VydDtvcHRzLmNhID0gdGhpcy5jYTtvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7b3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtvcHRzLmV4dHJhSGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO3JldHVybiBuZXcgUmVxdWVzdChvcHRzKTtcbiAgICAgICAgfTtYSFIucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgICAgICAgICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiAmJiBkYXRhICE9PSB1bmRlZmluZWQ7dmFyIHJlcSA9IHRoaXMucmVxdWVzdCh7IG1ldGhvZDogXCJQT1NUXCIsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTt2YXIgc2VsZiA9IHRoaXM7cmVxLm9uKFwic3VjY2Vzc1wiLCBmbik7cmVxLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKFwieGhyIHBvc3QgZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICB9KTt0aGlzLnNlbmRYaHIgPSByZXE7XG4gICAgICAgIH07WEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZGVidWcoXCJ4aHIgcG9sbFwiKTt2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7dmFyIHNlbGYgPSB0aGlzO3JlcS5vbihcImRhdGFcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHNlbGYub25EYXRhKGRhdGEpO1xuICAgICAgICAgIH0pO3JlcS5vbihcImVycm9yXCIsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHNlbGYub25FcnJvcihcInhociBwb2xsIGVycm9yXCIsIGVycik7XG4gICAgICAgICAgfSk7dGhpcy5wb2xsWGhyID0gcmVxO1xuICAgICAgICB9O2Z1bmN0aW9uIFJlcXVlc3Qob3B0cykge1xuICAgICAgICAgIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgXCJHRVRcIjt0aGlzLnVyaSA9IG9wdHMudXJpO3RoaXMueGQgPSAhIW9wdHMueGQ7dGhpcy54cyA9ICEhb3B0cy54czt0aGlzLmFzeW5jID0gZmFsc2UgIT09IG9wdHMuYXN5bmM7dGhpcy5kYXRhID0gdW5kZWZpbmVkICE9IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7dGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQ7dGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7dGhpcy5zdXBwb3J0c0JpbmFyeSA9IG9wdHMuc3VwcG9ydHNCaW5hcnk7dGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO3RoaXMucGZ4ID0gb3B0cy5wZng7dGhpcy5rZXkgPSBvcHRzLmtleTt0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7dGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O3RoaXMuY2EgPSBvcHRzLmNhO3RoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVyczt0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO3RoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7dGhpcy5jcmVhdGUoKTtcbiAgICAgICAgfUVtaXR0ZXIoUmVxdWVzdC5wcm90b3R5cGUpO1JlcXVlc3QucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IHsgYWdlbnQ6IHRoaXMuYWdlbnQsIHhkb21haW46IHRoaXMueGQsIHhzY2hlbWU6IHRoaXMueHMsIGVuYWJsZXNYRFI6IHRoaXMuZW5hYmxlc1hEUiB9O29wdHMucGZ4ID0gdGhpcy5wZng7b3B0cy5rZXkgPSB0aGlzLmtleTtvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7b3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O29wdHMuY2EgPSB0aGlzLmNhO29wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO3ZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTt2YXIgc2VsZiA9IHRoaXM7dHJ5IHtcbiAgICAgICAgICAgIGRlYnVnKFwieGhyIG9wZW4gJXM6ICVzXCIsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7eGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTt0cnkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO2ZvciAodmFyIGkgaW4gdGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fWlmICh0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICB9aWYgKFwiUE9TVFwiID09IHRoaXMubWV0aG9kKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9aWYgKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKSB7XG4gICAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICAgICAgfWlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgICAgICAgICAgfTt4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICg0ICE9IHhoci5yZWFkeVN0YXRlKSByZXR1cm47aWYgKDIwMCA9PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT0geGhyLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYub25FcnJvcih4aHIuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1kZWJ1ZyhcInhociBkYXRhICVzXCIsIHRoaXMuZGF0YSk7eGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2VsZi5vbkVycm9yKGUpO1xuICAgICAgICAgICAgfSwgMCk7cmV0dXJuO1xuICAgICAgICAgIH1pZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gUmVxdWVzdC5yZXF1ZXN0c0NvdW50Kys7UmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XSA9IHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICB9O1JlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJzdWNjZXNzXCIpO3RoaXMuY2xlYW51cCgpO1xuICAgICAgICB9O1JlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBkYXRhKTt0aGlzLm9uU3VjY2VzcygpO1xuICAgICAgICB9O1JlcXVlc3QucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTt0aGlzLmNsZWFudXAodHJ1ZSk7XG4gICAgICAgIH07UmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9aWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgICAgICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gICAgICAgICAgfWlmIChmcm9tRXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgIH1pZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICAgICAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgICAgICAgICB9dGhpcy54aHIgPSBudWxsO1xuICAgICAgICB9O1JlcXVlc3QucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YTt0cnkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlO3RyeSB7XG4gICAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikuc3BsaXQoXCI7XCIpWzBdO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31pZiAoY29udGVudFR5cGUgPT09IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpIHtcbiAgICAgICAgICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkodGhpcy54aHIucmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdWk4QXJyID0gbmV3IFVpbnQ4QXJyYXkodGhpcy54aHIucmVzcG9uc2UpO3ZhciBkYXRhQXJyYXkgPSBbXTtmb3IgKHZhciBpZHggPSAwLCBsZW5ndGggPSB1aThBcnIubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFBcnJheS5wdXNoKHVpOEFycltpZHhdKTtcbiAgICAgICAgICAgICAgICAgIH1kYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBkYXRhQXJyYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihlKTtcbiAgICAgICAgICB9aWYgKG51bGwgIT0gZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1JlcXVlc3QucHJvdG90eXBlLmhhc1hEUiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGdsb2JhbC5YRG9tYWluUmVxdWVzdCAmJiAhdGhpcy54cyAmJiB0aGlzLmVuYWJsZXNYRFI7XG4gICAgICAgIH07UmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIH07aWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgICAgICAgIFJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7UmVxdWVzdC5yZXF1ZXN0cyA9IHt9O2lmIChnbG9iYWwuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiB1bmxvYWRIYW5kbGVyKCkge1xuICAgICAgICAgIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgICAgICAgICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuY2FsbCh0aGlzLCB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHt9KTtcbiAgICB9LCB7IFwiLi9wb2xsaW5nXCI6IDgsIFwiY29tcG9uZW50LWVtaXR0ZXJcIjogMTUsIFwiY29tcG9uZW50LWluaGVyaXRcIjogMTYsIGRlYnVnOiAxNywgXCJ4bWxodHRwcmVxdWVzdC1zc2xcIjogMTAgfV0sIDg6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICB2YXIgVHJhbnNwb3J0ID0gX2RlcmVxXyhcIi4uL3RyYW5zcG9ydFwiKTt2YXIgcGFyc2VxcyA9IF9kZXJlcV8oXCJwYXJzZXFzXCIpO3ZhciBwYXJzZXIgPSBfZGVyZXFfKFwiZW5naW5lLmlvLXBhcnNlclwiKTt2YXIgaW5oZXJpdCA9IF9kZXJlcV8oXCJjb21wb25lbnQtaW5oZXJpdFwiKTt2YXIgeWVhc3QgPSBfZGVyZXFfKFwieWVhc3RcIik7dmFyIGRlYnVnID0gX2RlcmVxXyhcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nXCIpO21vZHVsZS5leHBvcnRzID0gUG9sbGluZzt2YXIgaGFzWEhSMiA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBYTUxIdHRwUmVxdWVzdCA9IF9kZXJlcV8oXCJ4bWxodHRwcmVxdWVzdC1zc2xcIik7dmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh7IHhkb21haW46IGZhbHNlIH0pO3JldHVybiBudWxsICE9IHhoci5yZXNwb25zZVR5cGU7XG4gICAgICB9KSgpO2Z1bmN0aW9uIFBvbGxpbmcob3B0cykge1xuICAgICAgICB2YXIgZm9yY2VCYXNlNjQgPSBvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQ7aWYgKCFoYXNYSFIyIHx8IGZvcmNlQmFzZTY0KSB7XG4gICAgICAgICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICAgICAgICB9VHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG4gICAgICB9aW5oZXJpdChQb2xsaW5nLCBUcmFuc3BvcnQpO1BvbGxpbmcucHJvdG90eXBlLm5hbWUgPSBcInBvbGxpbmdcIjtQb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucG9sbCgpO1xuICAgICAgfTtQb2xsaW5nLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChvblBhdXNlKSB7XG4gICAgICAgIHZhciBwZW5kaW5nID0gMDt2YXIgc2VsZiA9IHRoaXM7dGhpcy5yZWFkeVN0YXRlID0gXCJwYXVzaW5nXCI7ZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICAgICAgZGVidWcoXCJwYXVzZWRcIik7c2VsZi5yZWFkeVN0YXRlID0gXCJwYXVzZWRcIjtvblBhdXNlKCk7XG4gICAgICAgIH1pZiAodGhpcy5wb2xsaW5nIHx8ICF0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgICAgdmFyIHRvdGFsID0gMDtpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIndlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2VcIik7dG90YWwrKzt0aGlzLm9uY2UoXCJwb2xsQ29tcGxldGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBkZWJ1ZyhcInByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlXCIpOy0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1pZiAoIXRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgICAgIGRlYnVnKFwid2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZVwiKTt0b3RhbCsrO3RoaXMub25jZShcImRyYWluXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZGVidWcoXCJwcmUtcGF1c2Ugd3JpdGluZyBjb21wbGV0ZVwiKTstLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfTtQb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZyhcInBvbGxpbmdcIik7dGhpcy5wb2xsaW5nID0gdHJ1ZTt0aGlzLmRvUG9sbCgpO3RoaXMuZW1pdChcInBvbGxcIik7XG4gICAgICB9O1BvbGxpbmcucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztkZWJ1ZyhcInBvbGxpbmcgZ290IGRhdGEgJXNcIiwgZGF0YSk7dmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2socGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICBzZWxmLm9uT3BlbigpO1xuICAgICAgICAgIH1pZiAoXCJjbG9zZVwiID09IHBhY2tldC50eXBlKSB7XG4gICAgICAgICAgICBzZWxmLm9uQ2xvc2UoKTtyZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfXNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgICAgICAgfTtwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlLCBjYWxsYmFjayk7aWYgKFwiY2xvc2VkXCIgIT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7dGhpcy5lbWl0KFwicG9sbENvbXBsZXRlXCIpO2lmIChcIm9wZW5cIiA9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucG9sbCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7ZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgICAgZGVidWcoXCJ3cml0aW5nIGNsb3NlIHBhY2tldFwiKTtzZWxmLndyaXRlKFt7IHR5cGU6IFwiY2xvc2VcIiB9XSk7XG4gICAgICAgIH1pZiAoXCJvcGVuXCIgPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgZGVidWcoXCJ0cmFuc3BvcnQgb3BlbiAtIGNsb3NpbmdcIik7Y2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZVwiKTt0aGlzLm9uY2UoXCJvcGVuXCIsIGNsb3NlKTtcbiAgICAgICAgfVxuICAgICAgfTtQb2xsaW5nLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpczt0aGlzLndyaXRhYmxlID0gZmFsc2U7dmFyIGNhbGxiYWNrZm4gPSBmdW5jdGlvbiBjYWxsYmFja2ZuKCkge1xuICAgICAgICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO3NlbGYuZW1pdChcImRyYWluXCIpO1xuICAgICAgICB9O3ZhciBzZWxmID0gdGhpcztwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1BvbGxpbmcucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTt2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyBcImh0dHBzXCIgOiBcImh0dHBcIjt2YXIgcG9ydCA9IFwiXCI7aWYgKGZhbHNlICE9PSB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgICAgICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgICAgICB9aWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICAgICAgICBxdWVyeS5iNjQgPSAxO1xuICAgICAgICB9cXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7aWYgKHRoaXMucG9ydCAmJiAoXCJodHRwc1wiID09IHNjaGVtYSAmJiB0aGlzLnBvcnQgIT0gNDQzIHx8IFwiaHR0cFwiID09IHNjaGVtYSAmJiB0aGlzLnBvcnQgIT0gODApKSB7XG4gICAgICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5wb3J0O1xuICAgICAgICB9aWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICAgIHF1ZXJ5ID0gXCI/XCIgKyBxdWVyeTtcbiAgICAgICAgfXZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSAhPT0gLTE7cmV0dXJuIHNjaGVtYSArIFwiOi8vXCIgKyAoaXB2NiA/IFwiW1wiICsgdGhpcy5ob3N0bmFtZSArIFwiXVwiIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuLi90cmFuc3BvcnRcIjogNCwgXCJjb21wb25lbnQtaW5oZXJpdFwiOiAxNiwgZGVidWc6IDE3LCBcImVuZ2luZS5pby1wYXJzZXJcIjogMTksIHBhcnNlcXM6IDI3LCBcInhtbGh0dHByZXF1ZXN0LXNzbFwiOiAxMCwgeWVhc3Q6IDMwIH1dLCA5OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIFRyYW5zcG9ydCA9IF9kZXJlcV8oXCIuLi90cmFuc3BvcnRcIik7dmFyIHBhcnNlciA9IF9kZXJlcV8oXCJlbmdpbmUuaW8tcGFyc2VyXCIpO3ZhciBwYXJzZXFzID0gX2RlcmVxXyhcInBhcnNlcXNcIik7dmFyIGluaGVyaXQgPSBfZGVyZXFfKFwiY29tcG9uZW50LWluaGVyaXRcIik7dmFyIHllYXN0ID0gX2RlcmVxXyhcInllYXN0XCIpO3ZhciBkZWJ1ZyA9IF9kZXJlcV8oXCJkZWJ1Z1wiKShcImVuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0XCIpO3ZhciBCcm93c2VyV2ViU29ja2V0ID0gZ2xvYmFsLldlYlNvY2tldCB8fCBnbG9iYWwuTW96V2ViU29ja2V0O3ZhciBXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0O2lmICghV2ViU29ja2V0ICYmIHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgV2ViU29ja2V0ID0gX2RlcmVxXyhcIndzXCIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1tb2R1bGUuZXhwb3J0cyA9IFdTO2Z1bmN0aW9uIFdTKG9wdHMpIHtcbiAgICAgICAgICB2YXIgZm9yY2VCYXNlNjQgPSBvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQ7aWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgICAgICAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gICAgICAgICAgfXRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1RyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xuICAgICAgICB9aW5oZXJpdChXUywgVHJhbnNwb3J0KTtXUy5wcm90b3R5cGUubmFtZSA9IFwid2Vic29ja2V0XCI7V1MucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtXUy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfXZhciBzZWxmID0gdGhpczt2YXIgdXJpID0gdGhpcy51cmkoKTt2YXIgcHJvdG9jb2xzID0gdm9pZCAwO3ZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGUgfTtvcHRzLnBmeCA9IHRoaXMucGZ4O29wdHMua2V5ID0gdGhpcy5rZXk7b3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO29wdHMuY2VydCA9IHRoaXMuY2VydDtvcHRzLmNhID0gdGhpcy5jYTtvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7b3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgIG9wdHMuaGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuICAgICAgICAgIH10aGlzLndzID0gQnJvd3NlcldlYlNvY2tldCA/IG5ldyBXZWJTb2NrZXQodXJpKSA6IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMsIG9wdHMpO2lmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICAgICAgICAgIH1pZiAodGhpcy53cy5zdXBwb3J0cyAmJiB0aGlzLndzLnN1cHBvcnRzLmJpbmFyeSkge1xuICAgICAgICAgICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7dGhpcy53cy5iaW5hcnlUeXBlID0gXCJidWZmZXJcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53cy5iaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgIH10aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIH07V1MucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBzZWxmID0gdGhpczt0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25PcGVuKCk7XG4gICAgICAgICAgfTt0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgICAgICAgICB9O3RoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgICAgICAgICB9O3RoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBzZWxmLm9uRXJyb3IoXCJ3ZWJzb2NrZXQgZXJyb3JcIiwgZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbmF2aWdhdG9yICYmIC9pUGFkfGlQaG9uZXxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgIFdTLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBUcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YS5jYWxsKHNlbGYsIGRhdGEpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVdTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO3RoaXMud3JpdGFibGUgPSBmYWxzZTt2YXIgdG90YWwgPSBwYWNrZXRzLmxlbmd0aDtmb3IgKHZhciBpID0gMCwgbCA9IHRvdGFsOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgICAgICAgICBwYXJzZXIuZW5jb2RlUGFja2V0KHBhY2tldCwgc2VsZi5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUJyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBvcHRzID0ge307aWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICAgICAgICAgIH1pZiAoc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZGF0YSA/IGdsb2JhbC5CdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO2lmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH10cnkge1xuICAgICAgICAgICAgICAgICAgaWYgKEJyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIGRlYnVnKFwid2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudFwiKTtcbiAgICAgICAgICAgICAgICB9LS10b3RhbCB8fCBkb25lKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkocGFja2V0c1tpXSk7XG4gICAgICAgICAgfWZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICAgICAgICBzZWxmLmVtaXQoXCJmbHVzaFwiKTtzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgc2VsZi53cml0YWJsZSA9IHRydWU7c2VsZi5lbWl0KFwiZHJhaW5cIik7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07V1MucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIH07V1MucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1dTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTt2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyBcIndzc1wiIDogXCJ3c1wiO3ZhciBwb3J0ID0gXCJcIjtpZiAodGhpcy5wb3J0ICYmIChcIndzc1wiID09IHNjaGVtYSAmJiB0aGlzLnBvcnQgIT0gNDQzIHx8IFwid3NcIiA9PSBzY2hlbWEgJiYgdGhpcy5wb3J0ICE9IDgwKSkge1xuICAgICAgICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5wb3J0O1xuICAgICAgICAgIH1pZiAodGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgICAgICAgICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgICAgICAgIH1pZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgICAgICAgfXF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO2lmIChxdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gXCI/XCIgKyBxdWVyeTtcbiAgICAgICAgICB9dmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtyZXR1cm4gc2NoZW1hICsgXCI6Ly9cIiArIChpcHY2ID8gXCJbXCIgKyB0aGlzLmhvc3RuYW1lICsgXCJdXCIgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbiAgICAgICAgfTtXUy5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICEhV2ViU29ja2V0ICYmICEoXCJfX2luaXRpYWxpemVcIiBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG4gICAgICAgIH07XG4gICAgICB9KS5jYWxsKHRoaXMsIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDoge30pO1xuICAgIH0sIHsgXCIuLi90cmFuc3BvcnRcIjogNCwgXCJjb21wb25lbnQtaW5oZXJpdFwiOiAxNiwgZGVidWc6IDE3LCBcImVuZ2luZS5pby1wYXJzZXJcIjogMTksIHBhcnNlcXM6IDI3LCB3czogdW5kZWZpbmVkLCB5ZWFzdDogMzAgfV0sIDEwOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgdmFyIGhhc0NPUlMgPSBfZGVyZXFfKFwiaGFzLWNvcnNcIik7bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuICAgICAgICB2YXIgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjt2YXIgeHNjaGVtZSA9IG9wdHMueHNjaGVtZTt2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjt0cnkge1xuICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9dHJ5IHtcbiAgICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge31pZiAoIXhkb21haW4pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTEhUVFBcIik7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LCB7IFwiaGFzLWNvcnNcIjogMjIgfV0sIDExOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBhZnRlcjtmdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xuICAgICAgICB2YXIgYmFpbCA9IGZhbHNlO2Vycl9jYiA9IGVycl9jYiB8fCBub29wO3Byb3h5LmNvdW50ID0gY291bnQ7cmV0dXJuIGNvdW50ID09PSAwID8gY2FsbGJhY2soKSA6IHByb3h5O2Z1bmN0aW9uIHByb3h5KGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFmdGVyIGNhbGxlZCB0b28gbWFueSB0aW1lc1wiKTtcbiAgICAgICAgICB9LS1wcm94eS5jb3VudDtpZiAoZXJyKSB7XG4gICAgICAgICAgICBiYWlsID0gdHJ1ZTtjYWxsYmFjayhlcnIpO2NhbGxiYWNrID0gZXJyX2NiO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJveHkuY291bnQgPT09IDAgJiYgIWJhaWwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9ZnVuY3Rpb24gbm9vcCgpIHt9XG4gICAgfSwge31dLCAxMjogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7c3RhcnQgPSBzdGFydCB8fCAwO2VuZCA9IGVuZCB8fCBieXRlcztpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgIH1pZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgc3RhcnQgKz0gYnl0ZXM7XG4gICAgICAgIH1pZiAoZW5kIDwgMCkge1xuICAgICAgICAgIGVuZCArPSBieXRlcztcbiAgICAgICAgfWlmIChlbmQgPiBieXRlcykge1xuICAgICAgICAgIGVuZCA9IGJ5dGVzO1xuICAgICAgICB9aWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgIH12YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO3ZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7Zm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xuICAgICAgICAgIHJlc3VsdFtpaV0gPSBhYnZbaV07XG4gICAgICAgIH1yZXR1cm4gcmVzdWx0LmJ1ZmZlcjtcbiAgICAgIH07XG4gICAgfSwge31dLCAxMzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIChmdW5jdGlvbiAoY2hhcnMpIHtcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7ZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAoYXJyYXlidWZmZXIpIHtcbiAgICAgICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksXG4gICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgIGxlbiA9IGJ5dGVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgYmFzZTY0ID0gXCJcIjtmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgICAgICAgIGJhc2U2NCArPSBjaGFyc1soYnl0ZXNbaV0gJiAzKSA8PCA0IHwgYnl0ZXNbaSArIDFdID4+IDRdO2Jhc2U2NCArPSBjaGFyc1soYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIgfCBieXRlc1tpICsgMl0gPj4gNl07YmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICAgICAgICB9aWYgKGxlbiAlIDMgPT09IDIpIHtcbiAgICAgICAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgXCI9XCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7XG4gICAgICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArIFwiPT1cIjtcbiAgICAgICAgICB9cmV0dXJuIGJhc2U2NDtcbiAgICAgICAgfTtleHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChiYXNlNjQpIHtcbiAgICAgICAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIC43NSxcbiAgICAgICAgICAgICAgbGVuID0gYmFzZTY0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgcCA9IDAsXG4gICAgICAgICAgICAgIGVuY29kZWQxLFxuICAgICAgICAgICAgICBlbmNvZGVkMixcbiAgICAgICAgICAgICAgZW5jb2RlZDMsXG4gICAgICAgICAgICAgIGVuY29kZWQ0O2lmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDFdID09PSBcIj1cIikge1xuICAgICAgICAgICAgYnVmZmVyTGVuZ3RoLS07aWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH12YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICAgICAgICAgICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7Zm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgICAgICBlbmNvZGVkMSA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2ldKTtlbmNvZGVkMiA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2kgKyAxXSk7ZW5jb2RlZDMgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpICsgMl0pO2VuY29kZWQ0ID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSArIDNdKTtieXRlc1twKytdID0gZW5jb2RlZDEgPDwgMiB8IGVuY29kZWQyID4+IDQ7Ynl0ZXNbcCsrXSA9IChlbmNvZGVkMiAmIDE1KSA8PCA0IHwgZW5jb2RlZDMgPj4gMjtieXRlc1twKytdID0gKGVuY29kZWQzICYgMykgPDwgNiB8IGVuY29kZWQ0ICYgNjM7XG4gICAgICAgICAgfXJldHVybiBhcnJheWJ1ZmZlcjtcbiAgICAgICAgfTtcbiAgICAgIH0pKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiKTtcbiAgICB9LCB7fV0sIDE0OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsLkJsb2JCdWlsZGVyIHx8IGdsb2JhbC5XZWJLaXRCbG9iQnVpbGRlciB8fCBnbG9iYWwuTVNCbG9iQnVpbGRlciB8fCBnbG9iYWwuTW96QmxvYkJ1aWxkZXI7dmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgYSA9IG5ldyBCbG9iKFtcImhpXCJdKTtyZXR1cm4gYS5zaXplID09PSAyO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7dmFyIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA9IGJsb2JTdXBwb3J0ZWQgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsIDJdKV0pO3JldHVybiBiLnNpemUgPT09IDI7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkoKTt2YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlciAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuYXBwZW5kICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5nZXRCbG9iO2Z1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaHVuayA9IGFyeVtpXTtpZiAoY2h1bmsuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO2NvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO2J1ZiA9IGNvcHkuYnVmZmVyO1xuICAgICAgICAgICAgICB9YXJ5W2ldID0gYnVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfWZ1bmN0aW9uIEJsb2JCdWlsZGVyQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307dmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7bWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpO2ZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBiYi5hcHBlbmQoYXJ5W2ldKTtcbiAgICAgICAgICB9cmV0dXJuIG9wdGlvbnMudHlwZSA/IGJiLmdldEJsb2Iob3B0aW9ucy50eXBlKSA6IGJiLmdldEJsb2IoKTtcbiAgICAgICAgfWZ1bmN0aW9uIEJsb2JDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcbiAgICAgICAgICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7cmV0dXJuIG5ldyBCbG9iKGFyeSwgb3B0aW9ucyB8fCB7fSk7XG4gICAgICAgIH1tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGJsb2JTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPyBnbG9iYWwuQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICB9KS5jYWxsKHRoaXMsIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDoge30pO1xuICAgIH0sIHt9XSwgMTU6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7ZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcbiAgICAgICAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XG4gICAgICB9ZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xuICAgICAgICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcbiAgICAgICAgfXJldHVybiBvYmo7XG4gICAgICB9RW1pdHRlci5wcm90b3R5cGUub24gPSBFbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307KHRoaXMuX2NhbGxiYWNrc1tldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdIHx8IFtdKS5wdXNoKGZuKTtyZXR1cm4gdGhpcztcbiAgICAgIH07RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO3RoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtmdW5jdGlvbiBvbigpIHtcbiAgICAgICAgICBzZWxmLm9mZihldmVudCwgb24pO2ZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1vbi5mbiA9IGZuO3RoaXMub24oZXZlbnQsIG9uKTtyZXR1cm4gdGhpcztcbiAgICAgIH07RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307aWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O3JldHVybiB0aGlzO1xuICAgICAgICB9dmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF07aWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO2lmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzW2V2ZW50XTtyZXR1cm4gdGhpcztcbiAgICAgICAgfXZhciBjYjtmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNiID0gY2FsbGJhY2tzW2ldO2lmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO2JyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfXJldHVybiB0aGlzO1xuICAgICAgfTtFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTt2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF07aWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICB9O0VtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307cmV0dXJuIHRoaXMuX2NhbGxiYWNrc1tldmVudF0gfHwgW107XG4gICAgICB9O0VtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xuICAgICAgfTtcbiAgICB9LCB7fV0sIDE2OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiBmbigpIHt9O2ZuLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO2EucHJvdG90eXBlID0gbmV3IGZuKCk7YS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBhO1xuICAgICAgfTtcbiAgICB9LCB7fV0sIDE3OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX2RlcmVxXyhcIi4vZGVidWdcIik7ZXhwb3J0cy5sb2cgPSBsb2c7ZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztleHBvcnRzLnNhdmUgPSBzYXZlO2V4cG9ydHMubG9hZCA9IGxvYWQ7ZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7ZXhwb3J0cy5zdG9yYWdlID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgY2hyb21lICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlID8gY2hyb21lLnN0b3JhZ2UubG9jYWwgOiBsb2NhbHN0b3JhZ2UoKTtleHBvcnRzLmNvbG9ycyA9IFtcImxpZ2h0c2VhZ3JlZW5cIiwgXCJmb3Jlc3RncmVlblwiLCBcImdvbGRlbnJvZFwiLCBcImRvZGdlcmJsdWVcIiwgXCJkYXJrb3JjaGlkXCIsIFwiY3JpbXNvblwiXTtmdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gICAgICAgIHJldHVybiBcIldlYmtpdEFwcGVhcmFuY2VcIiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgfHwgd2luZG93LmNvbnNvbGUgJiYgKGNvbnNvbGUuZmlyZWJ1ZyB8fCBjb25zb2xlLmV4Y2VwdGlvbiAmJiBjb25zb2xlLnRhYmxlKSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMTtcbiAgICAgIH1leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgIH07ZnVuY3Rpb24gZm9ybWF0QXJncygpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7dmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO2FyZ3NbMF0gPSAodXNlQ29sb3JzID8gXCIlY1wiIDogXCJcIikgKyB0aGlzLm5hbWVzcGFjZSArICh1c2VDb2xvcnMgPyBcIiAlY1wiIDogXCIgXCIpICsgYXJnc1swXSArICh1c2VDb2xvcnMgPyBcIiVjIFwiIDogXCIgXCIpICsgXCIrXCIgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7aWYgKCF1c2VDb2xvcnMpIHJldHVybiBhcmdzO3ZhciBjID0gXCJjb2xvcjogXCIgKyB0aGlzLmNvbG9yO2FyZ3MgPSBbYXJnc1swXSwgYywgXCJjb2xvcjogaW5oZXJpdFwiXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSkpO3ZhciBpbmRleCA9IDA7dmFyIGxhc3RDID0gMDthcmdzWzBdLnJlcGxhY2UoLyVbYS16JV0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgaWYgKFwiJSVcIiA9PT0gbWF0Y2gpIHJldHVybjtpbmRleCsrO2lmIChcIiVjXCIgPT09IG1hdGNoKSB7XG4gICAgICAgICAgICBsYXN0QyA9IGluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO3JldHVybiBhcmdzO1xuICAgICAgfWZ1bmN0aW9uIGxvZygpIHtcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjb25zb2xlICYmIGNvbnNvbGUubG9nICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgfWZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKFwiZGVidWdcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfWZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICAgIHZhciByO3RyeSB7XG4gICAgICAgICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgICAgICAgfSBjYXRjaCAoZSkge31yZXR1cm4gcjtcbiAgICAgIH1leHBvcnRzLmVuYWJsZShsb2FkKCkpO2Z1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9LCB7IFwiLi9kZWJ1Z1wiOiAxOCB9XSwgMTg6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBkZWJ1ZztleHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtleHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO2V4cG9ydHMuZW5hYmxlID0gZW5hYmxlO2V4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7ZXhwb3J0cy5odW1hbml6ZSA9IF9kZXJlcV8oXCJtc1wiKTtleHBvcnRzLm5hbWVzID0gW107ZXhwb3J0cy5za2lwcyA9IFtdO2V4cG9ydHMuZm9ybWF0dGVycyA9IHt9O3ZhciBwcmV2Q29sb3IgPSAwO3ZhciBwcmV2VGltZTtmdW5jdGlvbiBzZWxlY3RDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW3ByZXZDb2xvcisrICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbiAgICAgIH1mdW5jdGlvbiBkZWJ1ZyhuYW1lc3BhY2UpIHtcbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZWQoKSB7fWRpc2FibGVkLmVuYWJsZWQgPSBmYWxzZTtmdW5jdGlvbiBlbmFibGVkKCkge1xuICAgICAgICAgIHZhciBzZWxmID0gZW5hYmxlZDt2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO3ZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7c2VsZi5kaWZmID0gbXM7c2VsZi5wcmV2ID0gcHJldlRpbWU7c2VsZi5jdXJyID0gY3VycjtwcmV2VGltZSA9IGN1cnI7aWYgKG51bGwgPT0gc2VsZi51c2VDb2xvcnMpIHNlbGYudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtpZiAobnVsbCA9PSBzZWxmLmNvbG9yICYmIHNlbGYudXNlQ29sb3JzKSBzZWxmLmNvbG9yID0gc2VsZWN0Q29sb3IoKTt2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7YXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO2lmIChcInN0cmluZ1wiICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgICAgICAgYXJncyA9IFtcIiVvXCJdLmNvbmNhdChhcmdzKTtcbiAgICAgICAgICB9dmFyIGluZGV4ID0gMDthcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXolXSkvZywgZnVuY3Rpb24gKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaCA9PT0gXCIlJVwiKSByZXR1cm4gbWF0Y2g7aW5kZXgrKzt2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07aWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO2FyZ3Muc3BsaWNlKGluZGV4LCAxKTtpbmRleC0tO1xuICAgICAgICAgICAgfXJldHVybiBtYXRjaDtcbiAgICAgICAgICB9KTtpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZXhwb3J0cy5mb3JtYXRBcmdzKSB7XG4gICAgICAgICAgICBhcmdzID0gZXhwb3J0cy5mb3JtYXRBcmdzLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICAgIH12YXIgbG9nRm4gPSBlbmFibGVkLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO2xvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICB9ZW5hYmxlZC5lbmFibGVkID0gdHJ1ZTt2YXIgZm4gPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKSA/IGVuYWJsZWQgOiBkaXNhYmxlZDtmbi5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7cmV0dXJuIGZuO1xuICAgICAgfWZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gICAgICAgIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTt2YXIgc3BsaXQgPSAobmFtZXNwYWNlcyB8fCBcIlwiKS5zcGxpdCgvW1xccyxdKy8pO3ZhciBsZW4gPSBzcGxpdC5sZW5ndGg7Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlO25hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgXCIuKj9cIik7aWYgKG5hbWVzcGFjZXNbMF0gPT09IFwiLVwiKSB7XG4gICAgICAgICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cChcIl5cIiArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgXCIkXCIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoXCJeXCIgKyBuYW1lc3BhY2VzICsgXCIkXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1mdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgICBleHBvcnRzLmVuYWJsZShcIlwiKTtcbiAgICAgIH1mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgICAgICAgdmFyIGksIGxlbjtmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfWZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gZmFsc2U7XG4gICAgICB9ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7cmV0dXJuIHZhbDtcbiAgICAgIH1cbiAgICB9LCB7IG1zOiAyNSB9XSwgMTk6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICAoZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgICAgICB2YXIga2V5cyA9IF9kZXJlcV8oXCIuL2tleXNcIik7dmFyIGhhc0JpbmFyeSA9IF9kZXJlcV8oXCJoYXMtYmluYXJ5XCIpO3ZhciBzbGljZUJ1ZmZlciA9IF9kZXJlcV8oXCJhcnJheWJ1ZmZlci5zbGljZVwiKTt2YXIgYmFzZTY0ZW5jb2RlciA9IF9kZXJlcV8oXCJiYXNlNjQtYXJyYXlidWZmZXJcIik7dmFyIGFmdGVyID0gX2RlcmVxXyhcImFmdGVyXCIpO3ZhciB1dGY4ID0gX2RlcmVxXyhcInV0ZjhcIik7dmFyIGlzQW5kcm9pZCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSk7dmFyIGlzUGhhbnRvbUpTID0gL1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7dmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7ZXhwb3J0cy5wcm90b2NvbCA9IDM7dmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7IG9wZW46IDAsIGNsb3NlOiAxLCBwaW5nOiAyLCBwb25nOiAzLCBtZXNzYWdlOiA0LCB1cGdyYWRlOiA1LCBub29wOiA2IH07dmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTt2YXIgZXJyID0geyB0eXBlOiBcImVycm9yXCIsIGRhdGE6IFwicGFyc2VyIGVycm9yXCIgfTt2YXIgQmxvYiA9IF9kZXJlcV8oXCJibG9iXCIpO2V4cG9ydHMuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHV0ZjhlbmNvZGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7c3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgICAgICAgICB9aWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdXRmOGVuY29kZSkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1dGY4ZW5jb2RlO3V0ZjhlbmNvZGUgPSBudWxsO1xuICAgICAgICAgIH12YXIgZGF0YSA9IHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7aWYgKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gICAgICAgICAgfSBlbHNlIGlmIChCbG9iICYmIGRhdGEgaW5zdGFuY2VvZiBnbG9iYWwuQmxvYikge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICAgICAgICAgIH1pZiAoZGF0YSAmJiBkYXRhLmJhc2U2NCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9dmFyIGVuY29kZWQgPSBwYWNrZXRzW3BhY2tldC50eXBlXTtpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgICAgICAgICAgZW5jb2RlZCArPSB1dGY4ZW5jb2RlID8gdXRmOC5lbmNvZGUoU3RyaW5nKHBhY2tldC5kYXRhKSkgOiBTdHJpbmcocGFja2V0LmRhdGEpO1xuICAgICAgICAgIH1yZXR1cm4gY2FsbGJhY2soXCJcIiArIGVuY29kZWQpO1xuICAgICAgICB9O2Z1bmN0aW9uIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcImJcIiArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO3JldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbiAgICAgICAgfWZ1bmN0aW9uIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICAgICAgICAgIH12YXIgZGF0YSA9IHBhY2tldC5kYXRhO3ZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTt2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7cmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07Zm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdEJ1ZmZlcltpICsgMV0gPSBjb250ZW50QXJyYXlbaV07XG4gICAgICAgICAgfXJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKTtcbiAgICAgICAgfWZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICAgICAgICAgIH12YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO2ZyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHBhY2tldC5kYXRhID0gZnIucmVzdWx0O2V4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHRydWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9O3JldHVybiBmci5yZWFkQXNBcnJheUJ1ZmZlcihwYWNrZXQuZGF0YSk7XG4gICAgICAgIH1mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICAgICAgICAgIH1pZiAoZG9udFNlbmRCbG9icykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgICAgICAgICB9dmFyIGxlbmd0aCA9IG5ldyBVaW50OEFycmF5KDEpO2xlbmd0aFswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO3ZhciBibG9iID0gbmV3IEJsb2IoW2xlbmd0aC5idWZmZXIsIHBhY2tldC5kYXRhXSk7cmV0dXJuIGNhbGxiYWNrKGJsb2IpO1xuICAgICAgICB9ZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJiXCIgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO2lmIChCbG9iICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHtcbiAgICAgICAgICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7ZnIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgYjY0ID0gZnIucmVzdWx0LnNwbGl0KFwiLFwiKVsxXTtjYWxsYmFjayhtZXNzYWdlICsgYjY0KTtcbiAgICAgICAgICAgIH07cmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xuICAgICAgICAgIH12YXIgYjY0ZGF0YTt0cnkge1xuICAgICAgICAgICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7dmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7Zm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBiYXNpY1tpXSA9IHR5cGVkW2ldO1xuICAgICAgICAgICAgfWI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJhc2ljKTtcbiAgICAgICAgICB9bWVzc2FnZSArPSBnbG9iYWwuYnRvYShiNjRkYXRhKTtyZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG4gICAgICAgIH07ZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiIHx8IGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGRhdGEuY2hhckF0KDApID09IFwiYlwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7XG4gICAgICAgICAgICB9aWYgKHV0ZjhkZWNvZGUpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9dmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTtpZiAoTnVtYmVyKHR5cGUpICE9IHR5cGUgfHwgIXBhY2tldHNsaXN0W3R5cGVdKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlcnI7XG4gICAgICAgICAgICB9aWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogZGF0YS5zdWJzdHJpbmcoMSkgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfXZhciBhc0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7dmFyIHR5cGUgPSBhc0FycmF5WzBdO3ZhciByZXN0ID0gc2xpY2VCdWZmZXIoZGF0YSwgMSk7aWYgKEJsb2IgJiYgYmluYXJ5VHlwZSA9PT0gXCJibG9iXCIpIHtcbiAgICAgICAgICAgIHJlc3QgPSBuZXcgQmxvYihbcmVzdF0pO1xuICAgICAgICAgIH1yZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9O1xuICAgICAgICB9O2V4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24gKG1zZywgYmluYXJ5VHlwZSkge1xuICAgICAgICAgIHZhciB0eXBlID0gcGFja2V0c2xpc3RbbXNnLmNoYXJBdCgwKV07aWYgKCFnbG9iYWwuQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBtc2cuc3Vic3RyKDEpIH0gfTtcbiAgICAgICAgICB9dmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtpZiAoYmluYXJ5VHlwZSA9PT0gXCJibG9iXCIgJiYgQmxvYikge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBCbG9iKFtkYXRhXSk7XG4gICAgICAgICAgfXJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcbiAgICAgICAgfTtleHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7c3VwcG9ydHNCaW5hcnkgPSBudWxsO1xuICAgICAgICAgIH12YXIgaXNCaW5hcnkgPSBoYXNCaW5hcnkocGFja2V0cyk7aWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XG4gICAgICAgICAgICBpZiAoQmxvYiAmJiAhZG9udFNlbmRCbG9icykge1xuICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1yZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcihwYWNrZXRzLCBjYWxsYmFjayk7XG4gICAgICAgICAgfWlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhcIjA6XCIpO1xuICAgICAgICAgIH1mdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UubGVuZ3RoICsgXCI6XCIgKyBtZXNzYWdlO1xuICAgICAgICAgIH1mdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgIWlzQmluYXJ5ID8gZmFsc2UgOiBzdXBwb3J0c0JpbmFyeSwgdHJ1ZSwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9bWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdHMuam9pbihcIlwiKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07ZnVuY3Rpb24gbWFwKGFyeSwgZWFjaCwgZG9uZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoYXJ5Lmxlbmd0aCk7dmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTt2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uIGVhY2hXaXRoSW5kZXgoaSwgZWwsIGNiKSB7XG4gICAgICAgICAgICBlYWNoKGVsLCBmdW5jdGlvbiAoZXJyb3IsIG1zZykge1xuICAgICAgICAgICAgICByZXN1bHRbaV0gPSBtc2c7Y2IoZXJyb3IsIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O2ZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBlYWNoV2l0aEluZGV4KGksIGFyeVtpXSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9ZXhwb3J0cy5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeShkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgfWlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7YmluYXJ5VHlwZSA9IG51bGw7XG4gICAgICAgICAgfXZhciBwYWNrZXQ7aWYgKGRhdGEgPT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICAgICAgfXZhciBsZW5ndGggPSBcIlwiLFxuICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICBtc2c7Zm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpO2lmIChcIjpcIiAhPSBjaHIpIHtcbiAgICAgICAgICAgICAgbGVuZ3RoICs9IGNocjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChcIlwiID09IGxlbmd0aCB8fCBsZW5ndGggIT0gKG4gPSBOdW1iZXIobGVuZ3RoKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgICAgICAgICAgfW1zZyA9IGRhdGEuc3Vic3RyKGkgKyAxLCBuKTtpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgICAgICAgICAgfWlmIChtc2cubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCB0cnVlKTtpZiAoZXJyLnR5cGUgPT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT0gcGFja2V0LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgICAgICAgICAgIH12YXIgcmV0ID0gY2FsbGJhY2socGFja2V0LCBpICsgbiwgbCk7aWYgKGZhbHNlID09PSByZXQpIHJldHVybjtcbiAgICAgICAgICAgICAgfWkgKz0gbjtsZW5ndGggPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1pZiAobGVuZ3RoICE9IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKCFwYWNrZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBBcnJheUJ1ZmZlcigwKSk7XG4gICAgICAgICAgfWZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgICAgICAgICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfW1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uIChlcnIsIGVuY29kZWRQYWNrZXRzKSB7XG4gICAgICAgICAgICB2YXIgdG90YWxMZW5ndGggPSBlbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcCkge1xuICAgICAgICAgICAgICB2YXIgbGVuO2lmICh0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGxlbiA9IHAubGVuZ3RoO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxlbiA9IHAuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgfXJldHVybiBhY2MgKyBsZW4udG9TdHJpbmcoKS5sZW5ndGggKyBsZW4gKyAyO1xuICAgICAgICAgICAgfSwgMCk7dmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO3ZhciBidWZmZXJJbmRleCA9IDA7ZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIjt2YXIgYWIgPSBwO2lmIChpc1N0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO2ZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgdmlld1tpXSA9IHAuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgICAgICB9YWIgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgICAgICAgICAgfWlmIChpc1N0cmluZykge1xuICAgICAgICAgICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7XG4gICAgICAgICAgICAgIH12YXIgbGVuU3RyID0gYWIuYnl0ZUxlbmd0aC50b1N0cmluZygpO2ZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgICAgICAgICB9cmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7dmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7Zm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtyZXR1cm4gY2FsbGJhY2socmVzdWx0QXJyYXkuYnVmZmVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtleHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IgPSBmdW5jdGlvbiAocGFja2V0cywgY2FsbGJhY2spIHtcbiAgICAgICAgICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24gKGVuY29kZWQpIHtcbiAgICAgICAgICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTtiaW5hcnlJZGVudGlmaWVyWzBdID0gMTtpZiAodHlwZW9mIGVuY29kZWQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTtmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgfWVuY29kZWQgPSB2aWV3LmJ1ZmZlcjtiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcbiAgICAgICAgICAgICAgfXZhciBsZW4gPSBlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBlbmNvZGVkLmJ5dGVMZW5ndGggOiBlbmNvZGVkLnNpemU7dmFyIGxlblN0ciA9IGxlbi50b1N0cmluZygpO3ZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgICAgICAgICB9bGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1O2lmIChCbG9iKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1tYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O2V4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtiaW5hcnlUeXBlID0gbnVsbDtcbiAgICAgICAgICB9dmFyIGJ1ZmZlclRhaWwgPSBkYXRhO3ZhciBidWZmZXJzID0gW107dmFyIG51bWJlclRvb0xvbmcgPSBmYWxzZTt3aGlsZSAoYnVmZmVyVGFpbC5ieXRlTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO3ZhciBpc1N0cmluZyA9IHRhaWxBcnJheVswXSA9PT0gMDt2YXIgbXNnTGVuZ3RoID0gXCJcIjtmb3IgKHZhciBpID0gMTs7IGkrKykge1xuICAgICAgICAgICAgICBpZiAodGFpbEFycmF5W2ldID09IDI1NSkgYnJlYWs7aWYgKG1zZ0xlbmd0aC5sZW5ndGggPiAzMTApIHtcbiAgICAgICAgICAgICAgICBudW1iZXJUb29Mb25nID0gdHJ1ZTticmVhaztcbiAgICAgICAgICAgICAgfW1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07XG4gICAgICAgICAgICB9aWYgKG51bWJlclRvb0xvbmcpIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO2J1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7bXNnTGVuZ3RoID0gcGFyc2VJbnQobXNnTGVuZ3RoKTt2YXIgbXNnID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMCwgbXNnTGVuZ3RoKTtpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBtc2cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KG1zZykpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkobXNnKTttc2cgPSBcIlwiO2ZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIG1zZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHR5cGVkW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1idWZmZXJzLnB1c2gobXNnKTtidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgbXNnTGVuZ3RoKTtcbiAgICAgICAgICB9dmFyIHRvdGFsID0gYnVmZmVycy5sZW5ndGg7YnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChidWZmZXIsIGkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGV4cG9ydHMuZGVjb2RlUGFja2V0KGJ1ZmZlciwgYmluYXJ5VHlwZSwgdHJ1ZSksIGksIHRvdGFsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pLmNhbGwodGhpcywgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fSk7XG4gICAgfSwgeyBcIi4va2V5c1wiOiAyMCwgYWZ0ZXI6IDExLCBcImFycmF5YnVmZmVyLnNsaWNlXCI6IDEyLCBcImJhc2U2NC1hcnJheWJ1ZmZlclwiOiAxMywgYmxvYjogMTQsIFwiaGFzLWJpbmFyeVwiOiAyMSwgdXRmODogMjkgfV0sIDIwOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKG9iaikge1xuICAgICAgICB2YXIgYXJyID0gW107dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7Zm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICAgICAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgICAgICAgYXJyLnB1c2goaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIGFycjtcbiAgICAgIH07XG4gICAgfSwge31dLCAyMTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIChmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBpc0FycmF5ID0gX2RlcmVxXyhcImlzYXJyYXlcIik7bW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7ZnVuY3Rpb24gaGFzQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICBmdW5jdGlvbiBfaGFzQmluYXJ5KG9iaikge1xuICAgICAgICAgICAgaWYgKCFvYmopIHJldHVybiBmYWxzZTtpZiAoZ2xvYmFsLkJ1ZmZlciAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgZ2xvYmFsLkFycmF5QnVmZmVyICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGdsb2JhbC5CbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IgfHwgZ2xvYmFsLkZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1pZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9oYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iaiAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBvYmopIHtcbiAgICAgICAgICAgICAgaWYgKG9iai50b0pTT04pIHtcbiAgICAgICAgICAgICAgICBvYmogPSBvYmoudG9KU09OKCk7XG4gICAgICAgICAgICAgIH1mb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgX2hhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJldHVybiBmYWxzZTtcbiAgICAgICAgICB9cmV0dXJuIF9oYXNCaW5hcnkoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhbGwodGhpcywgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fSk7XG4gICAgfSwgeyBpc2FycmF5OiAyNCB9XSwgMjI6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcIndpdGhDcmVkZW50aWFsc1wiIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge31dLCAyMzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIHZhciBpbmRleE9mID0gW10uaW5kZXhPZjttb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcnIsIG9iaikge1xuICAgICAgICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICAgICAgICB9cmV0dXJuIC0xO1xuICAgICAgfTtcbiAgICB9LCB7fV0sIDI0OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgICAgIH07XG4gICAgfSwge31dLCAyNTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIHZhciBzID0gMWUzO3ZhciBtID0gcyAqIDYwO3ZhciBoID0gbSAqIDYwO3ZhciBkID0gaCAqIDI0O3ZhciB5ID0gZCAqIDM2NS4yNTttb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWwsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307aWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHBhcnNlKHZhbCk7cmV0dXJuIG9wdGlvbnMubG9uZyA/IGxvbmcodmFsKSA6IHNob3J0KHZhbCk7XG4gICAgICB9O2Z1bmN0aW9uIHBhcnNlKHN0cikge1xuICAgICAgICBzdHIgPSBcIlwiICsgc3RyO2lmIChzdHIubGVuZ3RoID4gMWU0KSByZXR1cm47dmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhzdHIpO2lmICghbWF0Y2gpIHJldHVybjt2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO3ZhciB0eXBlID0gKG1hdGNoWzJdIHx8IFwibXNcIikudG9Mb3dlckNhc2UoKTtzd2l0Y2ggKHR5cGUpIHtjYXNlIFwieWVhcnNcIjpjYXNlIFwieWVhclwiOmNhc2UgXCJ5cnNcIjpjYXNlIFwieXJcIjpjYXNlIFwieVwiOlxuICAgICAgICAgICAgcmV0dXJuIG4gKiB5O2Nhc2UgXCJkYXlzXCI6Y2FzZSBcImRheVwiOmNhc2UgXCJkXCI6XG4gICAgICAgICAgICByZXR1cm4gbiAqIGQ7Y2FzZSBcImhvdXJzXCI6Y2FzZSBcImhvdXJcIjpjYXNlIFwiaHJzXCI6Y2FzZSBcImhyXCI6Y2FzZSBcImhcIjpcbiAgICAgICAgICAgIHJldHVybiBuICogaDtjYXNlIFwibWludXRlc1wiOmNhc2UgXCJtaW51dGVcIjpjYXNlIFwibWluc1wiOmNhc2UgXCJtaW5cIjpjYXNlIFwibVwiOlxuICAgICAgICAgICAgcmV0dXJuIG4gKiBtO2Nhc2UgXCJzZWNvbmRzXCI6Y2FzZSBcInNlY29uZFwiOmNhc2UgXCJzZWNzXCI6Y2FzZSBcInNlY1wiOmNhc2UgXCJzXCI6XG4gICAgICAgICAgICByZXR1cm4gbiAqIHM7Y2FzZSBcIm1pbGxpc2Vjb25kc1wiOmNhc2UgXCJtaWxsaXNlY29uZFwiOmNhc2UgXCJtc2Vjc1wiOmNhc2UgXCJtc2VjXCI6Y2FzZSBcIm1zXCI6XG4gICAgICAgICAgICByZXR1cm4gbjt9XG4gICAgICB9ZnVuY3Rpb24gc2hvcnQobXMpIHtcbiAgICAgICAgaWYgKG1zID49IGQpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyBcImRcIjtpZiAobXMgPj0gaCkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArIFwiaFwiO2lmIChtcyA+PSBtKSByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgXCJtXCI7aWYgKG1zID49IHMpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyBcInNcIjtyZXR1cm4gbXMgKyBcIm1zXCI7XG4gICAgICB9ZnVuY3Rpb24gbG9uZyhtcykge1xuICAgICAgICByZXR1cm4gcGx1cmFsKG1zLCBkLCBcImRheVwiKSB8fCBwbHVyYWwobXMsIGgsIFwiaG91clwiKSB8fCBwbHVyYWwobXMsIG0sIFwibWludXRlXCIpIHx8IHBsdXJhbChtcywgcywgXCJzZWNvbmRcIikgfHwgbXMgKyBcIiBtc1wiO1xuICAgICAgfWZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICAgICAgICBpZiAobXMgPCBuKSByZXR1cm47aWYgKG1zIDwgbiAqIDEuNSkgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArIFwiIFwiICsgbmFtZTtyZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyBcIiBcIiArIG5hbWUgKyBcInNcIjtcbiAgICAgIH1cbiAgICB9LCB7fV0sIDI2OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgKGZ1bmN0aW9uIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIHJ2YWxpZGNoYXJzID0gL15bXFxdLDp7fVxcc10qJC87dmFyIHJ2YWxpZGVzY2FwZSA9IC9cXFxcKD86W1wiXFxcXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2c7dmFyIHJ2YWxpZHRva2VucyA9IC9cIlteXCJcXFxcXFxuXFxyXSpcInx0cnVlfGZhbHNlfG51bGx8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZzt2YXIgcnZhbGlkYnJhY2VzID0gLyg/Ol58OnwsKSg/OlxccypcXFspKy9nO3ZhciBydHJpbUxlZnQgPSAvXlxccysvO3ZhciBydHJpbVJpZ2h0ID0gL1xccyskLzttb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlanNvbihkYXRhKSB7XG4gICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGRhdGEgfHwgIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1kYXRhID0gZGF0YS5yZXBsYWNlKHJ0cmltTGVmdCwgXCJcIikucmVwbGFjZShydHJpbVJpZ2h0LCBcIlwiKTtpZiAoZ2xvYmFsLkpTT04gJiYgSlNPTi5wYXJzZSkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgfWlmIChydmFsaWRjaGFycy50ZXN0KGRhdGEucmVwbGFjZShydmFsaWRlc2NhcGUsIFwiQFwiKS5yZXBsYWNlKHJ2YWxpZHRva2VucywgXCJdXCIpLnJlcGxhY2UocnZhbGlkYnJhY2VzLCBcIlwiKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyBkYXRhKSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pLmNhbGwodGhpcywgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fSk7XG4gICAgfSwge31dLCAyNzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgc3RyID0gXCJcIjtmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gXCImXCI7c3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIHN0cjtcbiAgICAgIH07ZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiAocXMpIHtcbiAgICAgICAgdmFyIHFyeSA9IHt9O3ZhciBwYWlycyA9IHFzLnNwbGl0KFwiJlwiKTtmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoXCI9XCIpO3FyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgICB9cmV0dXJuIHFyeTtcbiAgICAgIH07XG4gICAgfSwge31dLCAyODogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIHZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO3ZhciBwYXJ0cyA9IFtcInNvdXJjZVwiLCBcInByb3RvY29sXCIsIFwiYXV0aG9yaXR5XCIsIFwidXNlckluZm9cIiwgXCJ1c2VyXCIsIFwicGFzc3dvcmRcIiwgXCJob3N0XCIsIFwicG9ydFwiLCBcInJlbGF0aXZlXCIsIFwicGF0aFwiLCBcImRpcmVjdG9yeVwiLCBcImZpbGVcIiwgXCJxdWVyeVwiLCBcImFuY2hvclwiXTttb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xuICAgICAgICB2YXIgc3JjID0gc3RyLFxuICAgICAgICAgICAgYiA9IHN0ci5pbmRleE9mKFwiW1wiKSxcbiAgICAgICAgICAgIGUgPSBzdHIuaW5kZXhPZihcIl1cIik7aWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgXCI7XCIpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcbiAgICAgICAgfXZhciBtID0gcmUuZXhlYyhzdHIgfHwgXCJcIiksXG4gICAgICAgICAgICB1cmkgPSB7fSxcbiAgICAgICAgICAgIGkgPSAxNDt3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgXCJcIjtcbiAgICAgICAgfWlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgICB1cmkuc291cmNlID0gc3JjO3VyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgXCI6XCIpO3VyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoXCJbXCIsIFwiXCIpLnJlcGxhY2UoXCJdXCIsIFwiXCIpLnJlcGxhY2UoLzsvZywgXCI6XCIpO3VyaS5pcHY2dXJpID0gdHJ1ZTtcbiAgICAgICAgfXJldHVybiB1cmk7XG4gICAgICB9O1xuICAgIH0sIHt9XSwgMjk6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICAoZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgICAgICAoZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIGV4cG9ydHM7dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIgJiYgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTt2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gXCJvYmplY3RcIiAmJiBnbG9iYWw7aWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSB7XG4gICAgICAgICAgICByb290ID0gZnJlZUdsb2JhbDtcbiAgICAgICAgICB9dmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBbXTt2YXIgY291bnRlciA9IDA7dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7dmFyIHZhbHVlO3ZhciBleHRyYTt3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7aWYgKHZhbHVlID49IDU1Mjk2ICYmIHZhbHVlIDw9IDU2MzE5ICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7aWYgKChleHRyYSAmIDY0NTEyKSA9PSA1NjMyMCkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDEwMjMpIDw8IDEwKSArIChleHRyYSAmIDEwMjMpICsgNjU1MzYpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7Y291bnRlci0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1yZXR1cm4gb3V0cHV0O1xuICAgICAgICAgIH1mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO3ZhciBpbmRleCA9IC0xO3ZhciB2YWx1ZTt2YXIgb3V0cHV0ID0gXCJcIjt3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtpZiAodmFsdWUgPiA2NTUzNSkge1xuICAgICAgICAgICAgICAgIHZhbHVlIC09IDY1NTM2O291dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMTAyMyB8IDU1Mjk2KTt2YWx1ZSA9IDU2MzIwIHwgdmFsdWUgJiAxMDIzO1xuICAgICAgICAgICAgICB9b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG4gICAgICAgICAgICB9cmV0dXJuIG91dHB1dDtcbiAgICAgICAgICB9ZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpIHtcbiAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPj0gNTUyOTYgJiYgY29kZVBvaW50IDw9IDU3MzQzKSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTG9uZSBzdXJyb2dhdGUgVStcIiArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArIFwiIGlzIG5vdCBhIHNjYWxhciB2YWx1ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9ZnVuY3Rpb24gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIHNoaWZ0KSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCA+PiBzaGlmdCAmIDYzIHwgMTI4KTtcbiAgICAgICAgICB9ZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgICAgICAgICAgaWYgKChjb2RlUG9pbnQgJiA0Mjk0OTY3MTY4KSA9PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgICAgIH12YXIgc3ltYm9sID0gXCJcIjtpZiAoKGNvZGVQb2ludCAmIDQyOTQ5NjUyNDgpID09IDApIHtcbiAgICAgICAgICAgICAgc3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCA+PiA2ICYgMzEgfCAxOTIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoY29kZVBvaW50ICYgNDI5NDkwMTc2MCkgPT0gMCkge1xuICAgICAgICAgICAgICBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCk7c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCA+PiAxMiAmIDE1IHwgMjI0KTtzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoY29kZVBvaW50ICYgNDI5Mjg3MDE0NCkgPT0gMCkge1xuICAgICAgICAgICAgICBzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50ID4+IDE4ICYgNyB8IDI0MCk7c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcbiAgICAgICAgICAgIH1zeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCAmIDYzIHwgMTI4KTtyZXR1cm4gc3ltYm9sO1xuICAgICAgICAgIH1mdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZykge1xuICAgICAgICAgICAgdmFyIGNvZGVQb2ludHMgPSB1Y3MyZGVjb2RlKHN0cmluZyk7dmFyIGxlbmd0aCA9IGNvZGVQb2ludHMubGVuZ3RoO3ZhciBpbmRleCA9IC0xO3ZhciBjb2RlUG9pbnQ7dmFyIGJ5dGVTdHJpbmcgPSBcIlwiO3doaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO2J5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCk7XG4gICAgICAgICAgICB9cmV0dXJuIGJ5dGVTdHJpbmc7XG4gICAgICAgICAgfWZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuICAgICAgICAgICAgaWYgKGJ5dGVJbmRleCA+PSBieXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGJ5dGUgaW5kZXhcIik7XG4gICAgICAgICAgICB9dmFyIGNvbnRpbnVhdGlvbkJ5dGUgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDI1NTtieXRlSW5kZXgrKztpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAxOTIpID09IDEyOCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29udGludWF0aW9uQnl0ZSAmIDYzO1xuICAgICAgICAgICAgfXRocm93IEVycm9yKFwiSW52YWxpZCBjb250aW51YXRpb24gYnl0ZVwiKTtcbiAgICAgICAgICB9ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKCkge1xuICAgICAgICAgICAgdmFyIGJ5dGUxO3ZhciBieXRlMjt2YXIgYnl0ZTM7dmFyIGJ5dGU0O3ZhciBjb2RlUG9pbnQ7aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgYnl0ZSBpbmRleFwiKTtcbiAgICAgICAgICAgIH1pZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDI1NTtieXRlSW5kZXgrKztpZiAoKGJ5dGUxICYgMTI4KSA9PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBieXRlMTtcbiAgICAgICAgICAgIH1pZiAoKGJ5dGUxICYgMjI0KSA9PSAxOTIpIHtcbiAgICAgICAgICAgICAgdmFyIGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtjb2RlUG9pbnQgPSAoYnl0ZTEgJiAzMSkgPDwgNiB8IGJ5dGUyO2lmIChjb2RlUG9pbnQgPj0gMTI4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZGVQb2ludDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgY29udGludWF0aW9uIGJ5dGVcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1pZiAoKGJ5dGUxICYgMjQwKSA9PSAyMjQpIHtcbiAgICAgICAgICAgICAgYnl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO2J5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtjb2RlUG9pbnQgPSAoYnl0ZTEgJiAxNSkgPDwgMTIgfCBieXRlMiA8PCA2IHwgYnl0ZTM7aWYgKGNvZGVQb2ludCA+PSAyMDQ4KSB7XG4gICAgICAgICAgICAgICAgY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpO3JldHVybiBjb2RlUG9pbnQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9aWYgKChieXRlMSAmIDI0OCkgPT0gMjQwKSB7XG4gICAgICAgICAgICAgIGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7Ynl0ZTQgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO2NvZGVQb2ludCA9IChieXRlMSAmIDE1KSA8PCAxOCB8IGJ5dGUyIDw8IDEyIHwgYnl0ZTMgPDwgNiB8IGJ5dGU0O2lmIChjb2RlUG9pbnQgPj0gNjU1MzYgJiYgY29kZVBvaW50IDw9IDExMTQxMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZVBvaW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9dGhyb3cgRXJyb3IoXCJJbnZhbGlkIFVURi04IGRldGVjdGVkXCIpO1xuICAgICAgICAgIH12YXIgYnl0ZUFycmF5O3ZhciBieXRlQ291bnQ7dmFyIGJ5dGVJbmRleDtmdW5jdGlvbiB1dGY4ZGVjb2RlKGJ5dGVTdHJpbmcpIHtcbiAgICAgICAgICAgIGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtieXRlSW5kZXggPSAwO3ZhciBjb2RlUG9pbnRzID0gW107dmFyIHRtcDt3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbCgpKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50cy5wdXNoKHRtcCk7XG4gICAgICAgICAgICB9cmV0dXJuIHVjczJlbmNvZGUoY29kZVBvaW50cyk7XG4gICAgICAgICAgfXZhciB1dGY4ID0geyB2ZXJzaW9uOiBcIjIuMC4wXCIsIGVuY29kZTogdXRmOGVuY29kZSwgZGVjb2RlOiB1dGY4ZGVjb2RlIH07aWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZpbmUuYW1kID09IFwib2JqZWN0XCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAgICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHV0Zjg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuICAgICAgICAgICAgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAgICAgICAgICAgZnJlZU1vZHVsZS5leHBvcnRzID0gdXRmODtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTt2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7Zm9yICh2YXIga2V5IGluIHV0ZjgpIHtcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3QudXRmOCA9IHV0Zjg7XG4gICAgICAgICAgfVxuICAgICAgICB9KSh0aGlzKTtcbiAgICAgIH0pLmNhbGwodGhpcywgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fSk7XG4gICAgfSwge31dLCAzMDogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO3ZhciBhbHBoYWJldCA9IFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotX1wiLnNwbGl0KFwiXCIpLFxuICAgICAgICAgIGxlbmd0aCA9IDY0LFxuICAgICAgICAgIG1hcCA9IHt9LFxuICAgICAgICAgIHNlZWQgPSAwLFxuICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgIHByZXY7ZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICAgICAgICB2YXIgZW5jb2RlZCA9IFwiXCI7ZG8ge1xuICAgICAgICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gICAgICAgIH0gd2hpbGUgKG51bSA+IDApO3JldHVybiBlbmNvZGVkO1xuICAgICAgfWZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgICAgICAgdmFyIGRlY29kZWQgPSAwO2ZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgICAgICAgfXJldHVybiBkZWNvZGVkO1xuICAgICAgfWZ1bmN0aW9uIHllYXN0KCkge1xuICAgICAgICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7cmV0dXJuIG5vdyArIFwiLlwiICsgZW5jb2RlKHNlZWQrKyk7XG4gICAgICB9Zm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7eWVhc3QuZW5jb2RlID0gZW5jb2RlO3llYXN0LmRlY29kZSA9IGRlY29kZTttb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuICAgIH0sIHt9XSwgMzE6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICB2YXIgdXJsID0gX2RlcmVxXyhcIi4vdXJsXCIpO3ZhciBwYXJzZXIgPSBfZGVyZXFfKFwic29ja2V0LmlvLXBhcnNlclwiKTt2YXIgTWFuYWdlciA9IF9kZXJlcV8oXCIuL21hbmFnZXJcIik7dmFyIGRlYnVnID0gX2RlcmVxXyhcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudFwiKTttb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBsb29rdXA7dmFyIGNhY2hlID0gZXhwb3J0cy5tYW5hZ2VycyA9IHt9O2Z1bmN0aW9uIGxvb2t1cCh1cmksIG9wdHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmkgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIG9wdHMgPSB1cmk7dXJpID0gdW5kZWZpbmVkO1xuICAgICAgICB9b3B0cyA9IG9wdHMgfHwge307dmFyIHBhcnNlZCA9IHVybCh1cmkpO3ZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO3ZhciBpZCA9IHBhcnNlZC5pZDt2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO3ZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7dmFyIG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8IG9wdHNbXCJmb3JjZSBuZXcgY29ubmVjdGlvblwiXSB8fCBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHwgc2FtZU5hbWVzcGFjZTt2YXIgaW87aWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICBkZWJ1ZyhcImlnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXNcIiwgc291cmNlKTtpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgICAgICAgZGVidWcoXCJuZXcgaW8gaW5zdGFuY2UgZm9yICVzXCIsIHNvdXJjZSk7Y2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgICAgICAgIH1pbyA9IGNhY2hlW2lkXTtcbiAgICAgICAgfXJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgpO1xuICAgICAgfWV4cG9ydHMucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7ZXhwb3J0cy5jb25uZWN0ID0gbG9va3VwO2V4cG9ydHMuTWFuYWdlciA9IF9kZXJlcV8oXCIuL21hbmFnZXJcIik7ZXhwb3J0cy5Tb2NrZXQgPSBfZGVyZXFfKFwiLi9zb2NrZXRcIik7XG4gICAgfSwgeyBcIi4vbWFuYWdlclwiOiAzMiwgXCIuL3NvY2tldFwiOiAzNCwgXCIuL3VybFwiOiAzNSwgZGVidWc6IDM5LCBcInNvY2tldC5pby1wYXJzZXJcIjogNDcgfV0sIDMyOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgdmFyIGVpbyA9IF9kZXJlcV8oXCJlbmdpbmUuaW8tY2xpZW50XCIpO3ZhciBTb2NrZXQgPSBfZGVyZXFfKFwiLi9zb2NrZXRcIik7dmFyIEVtaXR0ZXIgPSBfZGVyZXFfKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7dmFyIHBhcnNlciA9IF9kZXJlcV8oXCJzb2NrZXQuaW8tcGFyc2VyXCIpO3ZhciBvbiA9IF9kZXJlcV8oXCIuL29uXCIpO3ZhciBiaW5kID0gX2RlcmVxXyhcImNvbXBvbmVudC1iaW5kXCIpO3ZhciBkZWJ1ZyA9IF9kZXJlcV8oXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6bWFuYWdlclwiKTt2YXIgaW5kZXhPZiA9IF9kZXJlcV8oXCJpbmRleG9mXCIpO3ZhciBCYWNrb2ZmID0gX2RlcmVxXyhcImJhY2tvMlwiKTt2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTttb2R1bGUuZXhwb3J0cyA9IE1hbmFnZXI7ZnVuY3Rpb24gTWFuYWdlcih1cmksIG9wdHMpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hbmFnZXIpKSByZXR1cm4gbmV3IE1hbmFnZXIodXJpLCBvcHRzKTtpZiAodXJpICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgIG9wdHMgPSB1cmk7dXJpID0gdW5kZWZpbmVkO1xuICAgICAgICB9b3B0cyA9IG9wdHMgfHwge307b3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8IFwiL3NvY2tldC5pb1wiO3RoaXMubnNwcyA9IHt9O3RoaXMuc3VicyA9IFtdO3RoaXMub3B0cyA9IG9wdHM7dGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTt0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO3RoaXMucmVjb25uZWN0aW9uRGVsYXkob3B0cy5yZWNvbm5lY3Rpb25EZWxheSB8fCAxZTMpO3RoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1ZTMpO3RoaXMucmFuZG9taXphdGlvbkZhY3RvcihvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IgfHwgLjUpO3RoaXMuYmFja29mZiA9IG5ldyBCYWNrb2ZmKHsgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLCBqaXR0ZXI6IHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigpIH0pO3RoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDJlNCA6IG9wdHMudGltZW91dCk7dGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjt0aGlzLnVyaSA9IHVyaTt0aGlzLmNvbm5lY3RpbmcgPSBbXTt0aGlzLmxhc3RQaW5nID0gbnVsbDt0aGlzLmVuY29kaW5nID0gZmFsc2U7dGhpcy5wYWNrZXRCdWZmZXIgPSBbXTt0aGlzLmVuY29kZXIgPSBuZXcgcGFyc2VyLkVuY29kZXIoKTt0aGlzLmRlY29kZXIgPSBuZXcgcGFyc2VyLkRlY29kZXIoKTt0aGlzLmF1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7aWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xuICAgICAgfU1hbmFnZXIucHJvdG90eXBlLmVtaXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO2ZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHtcbiAgICAgICAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7XG4gICAgICAgICAgICB0aGlzLm5zcHNbbnNwXS5lbWl0LmFwcGx5KHRoaXMubnNwc1tuc3BdLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVTb2NrZXRJZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHtcbiAgICAgICAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7XG4gICAgICAgICAgICB0aGlzLm5zcHNbbnNwXS5pZCA9IHRoaXMuZW5naW5lLmlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtFbWl0dGVyKE1hbmFnZXIucHJvdG90eXBlKTtNYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb24gPSBmdW5jdGlvbiAodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247dGhpcy5fcmVjb25uZWN0aW9uID0gISF2O3JldHVybiB0aGlzO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO3RoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtyZXR1cm4gdGhpcztcbiAgICAgIH07TWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXkgPSBmdW5jdGlvbiAodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTt0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7dGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNaW4odik7cmV0dXJuIHRoaXM7XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLnJhbmRvbWl6YXRpb25GYWN0b3IgPSBmdW5jdGlvbiAodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yO3RoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O3RoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpO3JldHVybiB0aGlzO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheU1heCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O3RoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjt0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1heCh2KTtyZXR1cm4gdGhpcztcbiAgICAgIH07TWFuYWdlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7dGhpcy5fdGltZW91dCA9IHY7cmV0dXJuIHRoaXM7XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLm1heWJlUmVjb25uZWN0T25PcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLm9wZW4gPSBNYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGRlYnVnKFwicmVhZHlTdGF0ZSAlc1wiLCB0aGlzLnJlYWR5U3RhdGUpO2lmICh+dGhpcy5yZWFkeVN0YXRlLmluZGV4T2YoXCJvcGVuXCIpKSByZXR1cm4gdGhpcztkZWJ1ZyhcIm9wZW5pbmcgJXNcIiwgdGhpcy51cmkpO3RoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO3ZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTt2YXIgc2VsZiA9IHRoaXM7dGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7dGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7dmFyIG9wZW5TdWIgPSBvbihzb2NrZXQsIFwib3BlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5vbm9wZW4oKTtmbiAmJiBmbigpO1xuICAgICAgICB9KTt2YXIgZXJyb3JTdWIgPSBvbihzb2NrZXQsIFwiZXJyb3JcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICBkZWJ1ZyhcImNvbm5lY3RfZXJyb3JcIik7c2VsZi5jbGVhbnVwKCk7c2VsZi5yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtzZWxmLmVtaXRBbGwoXCJjb25uZWN0X2Vycm9yXCIsIGRhdGEpO2lmIChmbikge1xuICAgICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gZXJyb3JcIik7ZXJyLmRhdGEgPSBkYXRhO2ZuKGVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO2lmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgICAgICAgIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB3aWxsIHRpbWVvdXQgYWZ0ZXIgJWRcIiwgdGltZW91dCk7dmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB0aW1lZCBvdXQgYWZ0ZXIgJWRcIiwgdGltZW91dCk7b3BlblN1Yi5kZXN0cm95KCk7c29ja2V0LmNsb3NlKCk7c29ja2V0LmVtaXQoXCJlcnJvclwiLCBcInRpbWVvdXRcIik7c2VsZi5lbWl0QWxsKFwiY29ubmVjdF90aW1lb3V0XCIsIHRpbWVvdXQpO1xuICAgICAgICAgIH0sIHRpbWVvdXQpO3RoaXMuc3Vicy5wdXNoKHsgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0gfSk7XG4gICAgICAgIH10aGlzLnN1YnMucHVzaChvcGVuU3ViKTt0aGlzLnN1YnMucHVzaChlcnJvclN1Yik7cmV0dXJuIHRoaXM7XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoXCJvcGVuXCIpO3RoaXMuY2xlYW51cCgpO3RoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO3RoaXMuZW1pdChcIm9wZW5cIik7dmFyIHNvY2tldCA9IHRoaXMuZW5naW5lO3RoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgXCJkYXRhXCIsIGJpbmQodGhpcywgXCJvbmRhdGFcIikpKTt0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsIFwicGluZ1wiLCBiaW5kKHRoaXMsIFwib25waW5nXCIpKSk7dGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCBcInBvbmdcIiwgYmluZCh0aGlzLCBcIm9ucG9uZ1wiKSkpO3RoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgXCJlcnJvclwiLCBiaW5kKHRoaXMsIFwib25lcnJvclwiKSkpO3RoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgXCJjbG9zZVwiLCBiaW5kKHRoaXMsIFwib25jbG9zZVwiKSkpO3RoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgXCJkZWNvZGVkXCIsIGJpbmQodGhpcywgXCJvbmRlY29kZWRcIikpKTtcbiAgICAgIH07TWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTt0aGlzLmVtaXRBbGwoXCJwaW5nXCIpO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5vbnBvbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdEFsbChcInBvbmdcIiwgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5vbmRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5vbmRlY29kZWQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIHRoaXMuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBkZWJ1ZyhcImVycm9yXCIsIGVycik7dGhpcy5lbWl0QWxsKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgIH07TWFuYWdlci5wcm90b3R5cGUuc29ja2V0ID0gZnVuY3Rpb24gKG5zcCkge1xuICAgICAgICB2YXIgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07aWYgKCFzb2NrZXQpIHtcbiAgICAgICAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCk7dGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7dmFyIHNlbGYgPSB0aGlzO3NvY2tldC5vbihcImNvbm5lY3RpbmdcIiwgb25Db25uZWN0aW5nKTtcbiAgICAgICAgICBzb2NrZXQub24oXCJjb25uZWN0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNvY2tldC5pZCA9IHNlbGYuZW5naW5lLmlkO1xuICAgICAgICAgIH0pO2lmICh0aGlzLmF1dG9Db25uZWN0KSB7XG4gICAgICAgICAgICBvbkNvbm5lY3RpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1mdW5jdGlvbiBvbkNvbm5lY3RpbmcoKSB7XG4gICAgICAgICAgaWYgKCEgfmluZGV4T2Yoc2VsZi5jb25uZWN0aW5nLCBzb2NrZXQpKSB7XG4gICAgICAgICAgICBzZWxmLmNvbm5lY3RpbmcucHVzaChzb2NrZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfXJldHVybiBzb2NrZXQ7XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoc29ja2V0KSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4T2YodGhpcy5jb25uZWN0aW5nLCBzb2NrZXQpO2lmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO2lmICh0aGlzLmNvbm5lY3RpbmcubGVuZ3RoKSByZXR1cm47dGhpcy5jbG9zZSgpO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIGRlYnVnKFwid3JpdGluZyBwYWNrZXQgJWpcIiwgcGFja2V0KTt2YXIgc2VsZiA9IHRoaXM7aWYgKCFzZWxmLmVuY29kaW5nKSB7XG4gICAgICAgICAgc2VsZi5lbmNvZGluZyA9IHRydWU7dGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgICAgICAgfXNlbGYuZW5jb2RpbmcgPSBmYWxzZTtzZWxmLnByb2Nlc3NQYWNrZXRRdWV1ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYucGFja2V0QnVmZmVyLnB1c2gocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhY2tldEJ1ZmZlci5sZW5ndGggPiAwICYmICF0aGlzLmVuY29kaW5nKSB7XG4gICAgICAgICAgdmFyIHBhY2sgPSB0aGlzLnBhY2tldEJ1ZmZlci5zaGlmdCgpO3RoaXMucGFja2V0KHBhY2spO1xuICAgICAgICB9XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKFwiY2xlYW51cFwiKTt2YXIgc3ViO3doaWxlIChzdWIgPSB0aGlzLnN1YnMuc2hpZnQoKSkgc3ViLmRlc3Ryb3koKTt0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO3RoaXMuZW5jb2RpbmcgPSBmYWxzZTt0aGlzLmxhc3RQaW5nID0gbnVsbDt0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5jbG9zZSA9IE1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKFwiZGlzY29ubmVjdFwiKTt0aGlzLnNraXBSZWNvbm5lY3QgPSB0cnVlO3RoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7aWYgKFwib3BlbmluZ1wiID09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICB9dGhpcy5iYWNrb2ZmLnJlc2V0KCk7dGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGRlYnVnKFwib25jbG9zZVwiKTt0aGlzLmNsZWFudXAoKTt0aGlzLmJhY2tvZmYucmVzZXQoKTt0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiO3RoaXMuZW1pdChcImNsb3NlXCIsIHJlYXNvbik7aWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfTtNYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO3ZhciBzZWxmID0gdGhpcztpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgICAgICAgZGVidWcoXCJyZWNvbm5lY3QgZmFpbGVkXCIpO3RoaXMuYmFja29mZi5yZXNldCgpO3RoaXMuZW1pdEFsbChcInJlY29ubmVjdF9mYWlsZWRcIik7dGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZGVsYXkgPSB0aGlzLmJhY2tvZmYuZHVyYXRpb24oKTtkZWJ1ZyhcIndpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdFwiLCBkZWxheSk7dGhpcy5yZWNvbm5lY3RpbmcgPSB0cnVlO3ZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO2RlYnVnKFwiYXR0ZW1wdGluZyByZWNvbm5lY3RcIik7c2VsZi5lbWl0QWxsKFwicmVjb25uZWN0X2F0dGVtcHRcIiwgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtzZWxmLmVtaXRBbGwoXCJyZWNvbm5lY3RpbmdcIiwgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47c2VsZi5vcGVuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IGF0dGVtcHQgZXJyb3JcIik7c2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtzZWxmLnJlY29ubmVjdCgpO3NlbGYuZW1pdEFsbChcInJlY29ubmVjdF9lcnJvclwiLCBlcnIuZGF0YSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJyZWNvbm5lY3Qgc3VjY2Vzc1wiKTtzZWxmLm9ucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIGRlbGF5KTt0aGlzLnN1YnMucHVzaCh7IGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9IH0pO1xuICAgICAgICB9XG4gICAgICB9O01hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0czt0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO3RoaXMuYmFja29mZi5yZXNldCgpO3RoaXMudXBkYXRlU29ja2V0SWRzKCk7dGhpcy5lbWl0QWxsKFwicmVjb25uZWN0XCIsIGF0dGVtcHQpO1xuICAgICAgfTtcbiAgICB9LCB7IFwiLi9vblwiOiAzMywgXCIuL3NvY2tldFwiOiAzNCwgYmFja28yOiAzNiwgXCJjb21wb25lbnQtYmluZFwiOiAzNywgXCJjb21wb25lbnQtZW1pdHRlclwiOiAzOCwgZGVidWc6IDM5LCBcImVuZ2luZS5pby1jbGllbnRcIjogMSwgaW5kZXhvZjogNDIsIFwic29ja2V0LmlvLXBhcnNlclwiOiA0NyB9XSwgMzM6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IG9uO2Z1bmN0aW9uIG9uKG9iaiwgZXYsIGZuKSB7XG4gICAgICAgIG9iai5vbihldiwgZm4pO3JldHVybiB7IGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICAgICAgICB9IH07XG4gICAgICB9XG4gICAgfSwge31dLCAzNDogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIHZhciBwYXJzZXIgPSBfZGVyZXFfKFwic29ja2V0LmlvLXBhcnNlclwiKTt2YXIgRW1pdHRlciA9IF9kZXJlcV8oXCJjb21wb25lbnQtZW1pdHRlclwiKTt2YXIgdG9BcnJheSA9IF9kZXJlcV8oXCJ0by1hcnJheVwiKTt2YXIgb24gPSBfZGVyZXFfKFwiLi9vblwiKTt2YXIgYmluZCA9IF9kZXJlcV8oXCJjb21wb25lbnQtYmluZFwiKTt2YXIgZGVidWcgPSBfZGVyZXFfKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tY2xpZW50OnNvY2tldFwiKTt2YXIgaGFzQmluID0gX2RlcmVxXyhcImhhcy1iaW5hcnlcIik7bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU29ja2V0O3ZhciBldmVudHMgPSB7IGNvbm5lY3Q6IDEsIGNvbm5lY3RfZXJyb3I6IDEsIGNvbm5lY3RfdGltZW91dDogMSwgY29ubmVjdGluZzogMSwgZGlzY29ubmVjdDogMSwgZXJyb3I6IDEsIHJlY29ubmVjdDogMSwgcmVjb25uZWN0X2F0dGVtcHQ6IDEsIHJlY29ubmVjdF9mYWlsZWQ6IDEsIHJlY29ubmVjdF9lcnJvcjogMSwgcmVjb25uZWN0aW5nOiAxLCBwaW5nOiAxLCBwb25nOiAxIH07dmFyIGVtaXQgPSBFbWl0dGVyLnByb3RvdHlwZS5lbWl0O2Z1bmN0aW9uIFNvY2tldChpbywgbnNwKSB7XG4gICAgICAgIHRoaXMuaW8gPSBpbzt0aGlzLm5zcCA9IG5zcDt0aGlzLmpzb24gPSB0aGlzO3RoaXMuaWRzID0gMDt0aGlzLmFja3MgPSB7fTt0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTt0aGlzLnNlbmRCdWZmZXIgPSBbXTt0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO3RoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtpZiAodGhpcy5pby5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG4gICAgICB9RW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtTb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3VicykgcmV0dXJuO3ZhciBpbyA9IHRoaXMuaW87dGhpcy5zdWJzID0gW29uKGlvLCBcIm9wZW5cIiwgYmluZCh0aGlzLCBcIm9ub3BlblwiKSksIG9uKGlvLCBcInBhY2tldFwiLCBiaW5kKHRoaXMsIFwib25wYWNrZXRcIikpLCBvbihpbywgXCJjbG9zZVwiLCBiaW5kKHRoaXMsIFwib25jbG9zZVwiKSldO1xuICAgICAgfTtTb2NrZXQucHJvdG90eXBlLm9wZW4gPSBTb2NrZXQucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkgcmV0dXJuIHRoaXM7dGhpcy5zdWJFdmVudHMoKTt0aGlzLmlvLm9wZW4oKTtpZiAoXCJvcGVuXCIgPT0gdGhpcy5pby5yZWFkeVN0YXRlKSB0aGlzLm9ub3BlbigpO3RoaXMuZW1pdChcImNvbm5lY3RpbmdcIik7cmV0dXJuIHRoaXM7XG4gICAgICB9O1NvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7YXJncy51bnNoaWZ0KFwibWVzc2FnZVwiKTt0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7cmV0dXJuIHRoaXM7XG4gICAgICB9O1NvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgICAgICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtyZXR1cm4gdGhpcztcbiAgICAgICAgfXZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO3ZhciBwYXJzZXJUeXBlID0gcGFyc2VyLkVWRU5UO2lmIChoYXNCaW4oYXJncykpIHtcbiAgICAgICAgICBwYXJzZXJUeXBlID0gcGFyc2VyLkJJTkFSWV9FVkVOVDtcbiAgICAgICAgfXZhciBwYWNrZXQgPSB7IHR5cGU6IHBhcnNlclR5cGUsIGRhdGE6IGFyZ3MgfTtwYWNrZXQub3B0aW9ucyA9IHt9O3BhY2tldC5vcHRpb25zLmNvbXByZXNzID0gIXRoaXMuZmxhZ3MgfHwgZmFsc2UgIT09IHRoaXMuZmxhZ3MuY29tcHJlc3M7aWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgZGVidWcoXCJlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWRcIiwgdGhpcy5pZHMpO3RoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpO3BhY2tldC5pZCA9IHRoaXMuaWRzKys7XG4gICAgICAgIH1pZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICB0aGlzLnBhY2tldChwYWNrZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gICAgICAgIH1kZWxldGUgdGhpcy5mbGFncztyZXR1cm4gdGhpcztcbiAgICAgIH07U29ja2V0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgIHBhY2tldC5uc3AgPSB0aGlzLm5zcDt0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xuICAgICAgfTtTb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoXCJ0cmFuc3BvcnQgaXMgb3BlbiAtIGNvbm5lY3RpbmdcIik7aWYgKFwiL1wiICE9IHRoaXMubnNwKSB7XG4gICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBwYXJzZXIuQ09OTkVDVCB9KTtcbiAgICAgICAgfVxuICAgICAgfTtTb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGRlYnVnKFwiY2xvc2UgKCVzKVwiLCByZWFzb24pO3RoaXMuY29ubmVjdGVkID0gZmFsc2U7dGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO2RlbGV0ZSB0aGlzLmlkO3RoaXMuZW1pdChcImRpc2Nvbm5lY3RcIiwgcmVhc29uKTtcbiAgICAgIH07U29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgaWYgKHBhY2tldC5uc3AgIT0gdGhpcy5uc3ApIHJldHVybjtzd2l0Y2ggKHBhY2tldC50eXBlKSB7Y2FzZSBwYXJzZXIuQ09OTkVDVDpcbiAgICAgICAgICAgIHRoaXMub25jb25uZWN0KCk7YnJlYWs7Y2FzZSBwYXJzZXIuRVZFTlQ6XG4gICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTticmVhaztjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTticmVhaztjYXNlIHBhcnNlci5BQ0s6XG4gICAgICAgICAgICB0aGlzLm9uYWNrKHBhY2tldCk7YnJlYWs7Y2FzZSBwYXJzZXIuQklOQVJZX0FDSzpcbiAgICAgICAgICAgIHRoaXMub25hY2socGFja2V0KTticmVhaztjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTticmVhaztjYXNlIHBhcnNlci5FUlJPUjpcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIHBhY2tldC5kYXRhKTticmVhazt9XG4gICAgICB9O1NvY2tldC5wcm90b3R5cGUub25ldmVudCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBwYWNrZXQuZGF0YSB8fCBbXTtkZWJ1ZyhcImVtaXR0aW5nIGV2ZW50ICVqXCIsIGFyZ3MpO2lmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgICAgICAgIGRlYnVnKFwiYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudFwiKTthcmdzLnB1c2godGhpcy5hY2socGFja2V0LmlkKSk7XG4gICAgICAgIH1pZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5wdXNoKGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1NvY2tldC5wcm90b3R5cGUuYWNrID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpczt2YXIgc2VudCA9IGZhbHNlO3JldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHNlbnQpIHJldHVybjtzZW50ID0gdHJ1ZTt2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtkZWJ1ZyhcInNlbmRpbmcgYWNrICVqXCIsIGFyZ3MpO3ZhciB0eXBlID0gaGFzQmluKGFyZ3MpID8gcGFyc2VyLkJJTkFSWV9BQ0sgOiBwYXJzZXIuQUNLO3NlbGYucGFja2V0KHsgdHlwZTogdHlwZSwgaWQ6IGlkLCBkYXRhOiBhcmdzIH0pO1xuICAgICAgICB9O1xuICAgICAgfTtTb2NrZXQucHJvdG90eXBlLm9uYWNrID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgICB2YXIgYWNrID0gdGhpcy5hY2tzW3BhY2tldC5pZF07aWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYWNrKSB7XG4gICAgICAgICAgZGVidWcoXCJjYWxsaW5nIGFjayAlcyB3aXRoICVqXCIsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO2Fjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7ZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKFwiYmFkIGFjayAlc1wiLCBwYWNrZXQuaWQpO1xuICAgICAgICB9XG4gICAgICB9O1NvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7dGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTt0aGlzLmVtaXQoXCJjb25uZWN0XCIpO3RoaXMuZW1pdEJ1ZmZlcmVkKCk7XG4gICAgICB9O1NvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaTtmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZWNlaXZlQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZW1pdC5hcHBseSh0aGlzLCB0aGlzLnJlY2VpdmVCdWZmZXJbaV0pO1xuICAgICAgICB9dGhpcy5yZWNlaXZlQnVmZmVyID0gW107Zm9yIChpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMucGFja2V0KHRoaXMuc2VuZEJ1ZmZlcltpXSk7XG4gICAgICAgIH10aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICAgIH07U29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKFwic2VydmVyIGRpc2Nvbm5lY3QgKCVzKVwiLCB0aGlzLm5zcCk7dGhpcy5kZXN0cm95KCk7dGhpcy5vbmNsb3NlKFwiaW8gc2VydmVyIGRpc2Nvbm5lY3RcIik7XG4gICAgICB9O1NvY2tldC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vicykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNbaV0uZGVzdHJveSgpO1xuICAgICAgICAgIH10aGlzLnN1YnMgPSBudWxsO1xuICAgICAgICB9dGhpcy5pby5kZXN0cm95KHRoaXMpO1xuICAgICAgfTtTb2NrZXQucHJvdG90eXBlLmNsb3NlID0gU29ja2V0LnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICBkZWJ1ZyhcInBlcmZvcm1pbmcgZGlzY29ubmVjdCAoJXMpXCIsIHRoaXMubnNwKTt0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pO1xuICAgICAgICB9dGhpcy5kZXN0cm95KCk7aWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgdGhpcy5vbmNsb3NlKFwiaW8gY2xpZW50IGRpc2Nvbm5lY3RcIik7XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH07U29ja2V0LnByb3RvdHlwZS5jb21wcmVzcyA9IGZ1bmN0aW9uIChjb21wcmVzcykge1xuICAgICAgICB0aGlzLmZsYWdzID0gdGhpcy5mbGFncyB8fCB7fTt0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7cmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgIH0sIHsgXCIuL29uXCI6IDMzLCBcImNvbXBvbmVudC1iaW5kXCI6IDM3LCBcImNvbXBvbmVudC1lbWl0dGVyXCI6IDM4LCBkZWJ1ZzogMzksIFwiaGFzLWJpbmFyeVwiOiA0MSwgXCJzb2NrZXQuaW8tcGFyc2VyXCI6IDQ3LCBcInRvLWFycmF5XCI6IDUxIH1dLCAzNTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIChmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBwYXJzZXVyaSA9IF9kZXJlcV8oXCJwYXJzZXVyaVwiKTt2YXIgZGVidWcgPSBfZGVyZXFfKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tY2xpZW50OnVybFwiKTttb2R1bGUuZXhwb3J0cyA9IHVybDtmdW5jdGlvbiB1cmwodXJpLCBsb2MpIHtcbiAgICAgICAgICB2YXIgb2JqID0gdXJpO3ZhciBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uO2lmIChudWxsID09IHVyaSkgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7aWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgICAgaWYgKFwiL1wiID09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgICAgICAgICAgaWYgKFwiL1wiID09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1pZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgICAgICAgICBkZWJ1ZyhcInByb3RvY29sLWxlc3MgdXJsICVzXCIsIHVyaSk7aWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGxvYykge1xuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIHVyaTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBcImh0dHBzOi8vXCIgKyB1cmk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1kZWJ1ZyhcInBhcnNlICVzXCIsIHVyaSk7b2JqID0gcGFyc2V1cmkodXJpKTtcbiAgICAgICAgICB9aWYgKCFvYmoucG9ydCkge1xuICAgICAgICAgICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICAgIG9iai5wb3J0ID0gXCI4MFwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjQ0M1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1vYmoucGF0aCA9IG9iai5wYXRoIHx8IFwiL1wiO3ZhciBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZihcIjpcIikgIT09IC0xO3ZhciBob3N0ID0gaXB2NiA/IFwiW1wiICsgb2JqLmhvc3QgKyBcIl1cIiA6IG9iai5ob3N0O29iai5pZCA9IG9iai5wcm90b2NvbCArIFwiOi8vXCIgKyBob3N0ICsgXCI6XCIgKyBvYmoucG9ydDtvYmouaHJlZiA9IG9iai5wcm90b2NvbCArIFwiOi8vXCIgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PSBvYmoucG9ydCA/IFwiXCIgOiBcIjpcIiArIG9iai5wb3J0KTtyZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgICB9KS5jYWxsKHRoaXMsIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDoge30pO1xuICAgIH0sIHsgZGVidWc6IDM5LCBwYXJzZXVyaTogNDUgfV0sIDM2OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO2Z1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTt0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO3RoaXMubWF4ID0gb3B0cy5tYXggfHwgMWU0O3RoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjt0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO3RoaXMuYXR0ZW1wdHMgPSAwO1xuICAgICAgfUJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7aWYgKHRoaXMuaml0dGVyKSB7XG4gICAgICAgICAgdmFyIHJhbmQgPSBNYXRoLnJhbmRvbSgpO3ZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTttcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgICAgICAgfXJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbiAgICAgIH07QmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYXR0ZW1wdHMgPSAwO1xuICAgICAgfTtCYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbiAobWluKSB7XG4gICAgICAgIHRoaXMubXMgPSBtaW47XG4gICAgICB9O0JhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uIChtYXgpIHtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICB9O0JhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uIChqaXR0ZXIpIHtcbiAgICAgICAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG4gICAgICB9O1xuICAgIH0sIHt9XSwgMzc6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICB2YXIgc2xpY2UgPSBbXS5zbGljZTttb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmosIGZuKSB7XG4gICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBmbikgZm4gPSBvYmpbZm5dO2lmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kKCkgcmVxdWlyZXMgYSBmdW5jdGlvblwiKTt2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtyZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseShvYmosIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9LCB7fV0sIDM4OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO2Z1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XG4gICAgICAgIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xuICAgICAgfWZ1bmN0aW9uIG1peGluKG9iaikge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcbiAgICAgICAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XG4gICAgICAgIH1yZXR1cm4gb2JqO1xuICAgICAgfUVtaXR0ZXIucHJvdG90eXBlLm9uID0gRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9Oyh0aGlzLl9jYWxsYmFja3NbXCIkXCIgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbXCIkXCIgKyBldmVudF0gfHwgW10pLnB1c2goZm4pO3JldHVybiB0aGlzO1xuICAgICAgfTtFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgICAgICBmdW5jdGlvbiBvbigpIHtcbiAgICAgICAgICB0aGlzLm9mZihldmVudCwgb24pO2ZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1vbi5mbiA9IGZuO3RoaXMub24oZXZlbnQsIG9uKTtyZXR1cm4gdGhpcztcbiAgICAgIH07RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307aWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O3JldHVybiB0aGlzO1xuICAgICAgICB9dmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tcIiRcIiArIGV2ZW50XTtpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7aWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbXCIkXCIgKyBldmVudF07cmV0dXJuIHRoaXM7XG4gICAgICAgIH12YXIgY2I7Zm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYiA9IGNhbGxiYWNrc1tpXTtpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTticmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1yZXR1cm4gdGhpcztcbiAgICAgIH07RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307dmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbXCIkXCIgKyBldmVudF07aWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9cmV0dXJuIHRoaXM7XG4gICAgICB9O0VtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307cmV0dXJuIHRoaXMuX2NhbGxiYWNrc1tcIiRcIiArIGV2ZW50XSB8fCBbXTtcbiAgICAgIH07RW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XG4gICAgICB9O1xuICAgIH0sIHt9XSwgMzk6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBhcmd1bWVudHNbNF1bMTddWzBdLmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgfSwgeyBcIi4vZGVidWdcIjogNDAsIGR1cDogMTcgfV0sIDQwOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgYXJndW1lbnRzWzRdWzE4XVswXS5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgIH0sIHsgZHVwOiAxOCwgbXM6IDQ0IH1dLCA0MTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIChmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBpc0FycmF5ID0gX2RlcmVxXyhcImlzYXJyYXlcIik7bW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7ZnVuY3Rpb24gaGFzQmluYXJ5KGRhdGEpIHtcbiAgICAgICAgICBmdW5jdGlvbiBfaGFzQmluYXJ5KG9iaikge1xuICAgICAgICAgICAgaWYgKCFvYmopIHJldHVybiBmYWxzZTtpZiAoZ2xvYmFsLkJ1ZmZlciAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBnbG9iYWwuQXJyYXlCdWZmZXIgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgZ2xvYmFsLkJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYiB8fCBnbG9iYWwuRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfWlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoX2hhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIG9iaikge1xuICAgICAgICAgICAgICBpZiAob2JqLnRvSlNPTiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG9iai50b0pTT04pIHtcbiAgICAgICAgICAgICAgICBvYmogPSBvYmoudG9KU09OKCk7XG4gICAgICAgICAgICAgIH1mb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgX2hhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfXJldHVybiBmYWxzZTtcbiAgICAgICAgICB9cmV0dXJuIF9oYXNCaW5hcnkoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhbGwodGhpcywgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB7fSk7XG4gICAgfSwgeyBpc2FycmF5OiA0MyB9XSwgNDI6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBhcmd1bWVudHNbNF1bMjNdWzBdLmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgfSwgeyBkdXA6IDIzIH1dLCA0MzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIGFyZ3VtZW50c1s0XVsyNF1bMF0uYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICB9LCB7IGR1cDogMjQgfV0sIDQ0OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgYXJndW1lbnRzWzRdWzI1XVswXS5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgIH0sIHsgZHVwOiAyNSB9XSwgNDU6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBhcmd1bWVudHNbNF1bMjhdWzBdLmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgfSwgeyBkdXA6IDI4IH1dLCA0NjogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIChmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBpc0FycmF5ID0gX2RlcmVxXyhcImlzYXJyYXlcIik7dmFyIGlzQnVmID0gX2RlcmVxXyhcIi4vaXMtYnVmZmVyXCIpO2V4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgICAgICAgdmFyIGJ1ZmZlcnMgPSBbXTt2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO2Z1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO2lmIChpc0J1ZihkYXRhKSkge1xuICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O2J1ZmZlcnMucHVzaChkYXRhKTtyZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO2ZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSk7XG4gICAgICAgICAgICAgIH1yZXR1cm4gbmV3RGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZGF0YSAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IHt9O2ZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSk7XG4gICAgICAgICAgICAgIH1yZXR1cm4gbmV3RGF0YTtcbiAgICAgICAgICAgIH1yZXR1cm4gZGF0YTtcbiAgICAgICAgICB9dmFyIHBhY2sgPSBwYWNrZXQ7cGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEpO3BhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDtyZXR1cm4geyBwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnMgfTtcbiAgICAgICAgfTtleHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgYnVmZmVycykge1xuICAgICAgICAgIHZhciBjdXJQbGFjZUhvbGRlciA9IDA7ZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgIHZhciBidWYgPSBidWZmZXJzW2RhdGEubnVtXTtyZXR1cm4gYnVmO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSk7XG4gICAgICAgICAgICAgIH1yZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YSAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBkYXRhKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSk7XG4gICAgICAgICAgICAgIH1yZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH1yZXR1cm4gZGF0YTtcbiAgICAgICAgICB9cGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEpO3BhY2tldC5hdHRhY2htZW50cyA9IHVuZGVmaW5lZDtyZXR1cm4gcGFja2V0O1xuICAgICAgICB9O2V4cG9ydHMucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICBmdW5jdGlvbiBfcmVtb3ZlQmxvYnMob2JqLCBjdXJLZXksIGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICAgIGlmICghb2JqKSByZXR1cm4gb2JqO2lmIChnbG9iYWwuQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iIHx8IGdsb2JhbC5GaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgICAgICAgcGVuZGluZ0Jsb2JzKys7dmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO2ZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYmxvYmxlc3NEYXRhID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfWlmICghIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIG9iaiAmJiAhaXNCdWYob2JqKSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9dmFyIHBlbmRpbmdCbG9icyA9IDA7dmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7X3JlbW92ZUJsb2JzKGJsb2JsZXNzRGF0YSk7aWYgKCFwZW5kaW5nQmxvYnMpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkuY2FsbCh0aGlzLCB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHt9KTtcbiAgICB9LCB7IFwiLi9pcy1idWZmZXJcIjogNDgsIGlzYXJyYXk6IDQzIH1dLCA0NzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIHZhciBkZWJ1ZyA9IF9kZXJlcV8oXCJkZWJ1Z1wiKShcInNvY2tldC5pby1wYXJzZXJcIik7dmFyIGpzb24gPSBfZGVyZXFfKFwianNvbjNcIik7dmFyIGlzQXJyYXkgPSBfZGVyZXFfKFwiaXNhcnJheVwiKTt2YXIgRW1pdHRlciA9IF9kZXJlcV8oXCJjb21wb25lbnQtZW1pdHRlclwiKTt2YXIgYmluYXJ5ID0gX2RlcmVxXyhcIi4vYmluYXJ5XCIpO3ZhciBpc0J1ZiA9IF9kZXJlcV8oXCIuL2lzLWJ1ZmZlclwiKTtleHBvcnRzLnByb3RvY29sID0gNDtleHBvcnRzLnR5cGVzID0gW1wiQ09OTkVDVFwiLCBcIkRJU0NPTk5FQ1RcIiwgXCJFVkVOVFwiLCBcIkJJTkFSWV9FVkVOVFwiLCBcIkFDS1wiLCBcIkJJTkFSWV9BQ0tcIiwgXCJFUlJPUlwiXTtleHBvcnRzLkNPTk5FQ1QgPSAwO2V4cG9ydHMuRElTQ09OTkVDVCA9IDE7ZXhwb3J0cy5FVkVOVCA9IDI7ZXhwb3J0cy5BQ0sgPSAzO2V4cG9ydHMuRVJST1IgPSA0O2V4cG9ydHMuQklOQVJZX0VWRU5UID0gNTtleHBvcnRzLkJJTkFSWV9BQ0sgPSA2O2V4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7ZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtmdW5jdGlvbiBFbmNvZGVyKCkge31FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAob2JqLCBjYWxsYmFjaykge1xuICAgICAgICBkZWJ1ZyhcImVuY29kaW5nIHBhY2tldCAlalwiLCBvYmopO2lmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT0gb2JqLnR5cGUpIHtcbiAgICAgICAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO2NhbGxiYWNrKFtlbmNvZGluZ10pO1xuICAgICAgICB9XG4gICAgICB9O2Z1bmN0aW9uIGVuY29kZUFzU3RyaW5nKG9iaikge1xuICAgICAgICB2YXIgc3RyID0gXCJcIjt2YXIgbnNwID0gZmFsc2U7c3RyICs9IG9iai50eXBlO2lmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT0gb2JqLnR5cGUpIHtcbiAgICAgICAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzO3N0ciArPSBcIi1cIjtcbiAgICAgICAgfWlmIChvYmoubnNwICYmIFwiL1wiICE9IG9iai5uc3ApIHtcbiAgICAgICAgICBuc3AgPSB0cnVlO3N0ciArPSBvYmoubnNwO1xuICAgICAgICB9aWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgICAgICAgaWYgKG5zcCkge1xuICAgICAgICAgICAgc3RyICs9IFwiLFwiO25zcCA9IGZhbHNlO1xuICAgICAgICAgIH1zdHIgKz0gb2JqLmlkO1xuICAgICAgICB9aWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICAgICAgICBpZiAobnNwKSBzdHIgKz0gXCIsXCI7c3RyICs9IGpzb24uc3RyaW5naWZ5KG9iai5kYXRhKTtcbiAgICAgICAgfWRlYnVnKFwiZW5jb2RlZCAlaiBhcyAlc1wiLCBvYmosIHN0cik7cmV0dXJuIHN0cjtcbiAgICAgIH1mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKSB7XG4gICAgICAgICAgdmFyIGRlY29uc3RydWN0aW9uID0gYmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7dmFyIHBhY2sgPSBlbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO3ZhciBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztidWZmZXJzLnVuc2hpZnQocGFjayk7Y2FsbGJhY2soYnVmZmVycyk7XG4gICAgICAgIH1iaW5hcnkucmVtb3ZlQmxvYnMob2JqLCB3cml0ZUVuY29kaW5nKTtcbiAgICAgIH1mdW5jdGlvbiBEZWNvZGVyKCkge1xuICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgfUVtaXR0ZXIoRGVjb2Rlci5wcm90b3R5cGUpO0RlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIHBhY2tldDtpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygb2JqKSB7XG4gICAgICAgICAgcGFja2V0ID0gZGVjb2RlU3RyaW5nKG9iaik7aWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09IHBhY2tldC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PSBwYWNrZXQudHlwZSkge1xuICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNCdWYob2JqKSB8fCBvYmouYmFzZTY0KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImdvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7aWYgKHBhY2tldCkge1xuICAgICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO3RoaXMuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0eXBlOiBcIiArIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH07ZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikge1xuICAgICAgICB2YXIgcCA9IHt9O3ZhciBpID0gMDtwLnR5cGUgPSBOdW1iZXIoc3RyLmNoYXJBdCgwKSk7aWYgKG51bGwgPT0gZXhwb3J0cy50eXBlc1twLnR5cGVdKSByZXR1cm4gZXJyb3IoKTtpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT0gcC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PSBwLnR5cGUpIHtcbiAgICAgICAgICB2YXIgYnVmID0gXCJcIjt3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9IFwiLVwiKSB7XG4gICAgICAgICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTtpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICB9aWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9IFwiLVwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGF0dGFjaG1lbnRzXCIpO1xuICAgICAgICAgIH1wLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gICAgICAgIH1pZiAoXCIvXCIgPT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICAgICAgICBwLm5zcCA9IFwiXCI7d2hpbGUgKCsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO2lmIChcIixcIiA9PSBjKSBicmVhaztwLm5zcCArPSBjO2lmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwLm5zcCA9IFwiL1wiO1xuICAgICAgICB9dmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtpZiAoXCJcIiAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkge1xuICAgICAgICAgIHAuaWQgPSBcIlwiO3doaWxlICgrK2kpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7XG4gICAgICAgICAgICAgIC0taTticmVhaztcbiAgICAgICAgICAgIH1wLmlkICs9IHN0ci5jaGFyQXQoaSk7aWYgKGkgPT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgICAgfXAuaWQgPSBOdW1iZXIocC5pZCk7XG4gICAgICAgIH1pZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHAuZGF0YSA9IGpzb24ucGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9ZGVidWcoXCJkZWNvZGVkICVzIGFzICVqXCIsIHN0ciwgcCk7cmV0dXJuIHA7XG4gICAgICB9RGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH07ZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7dGhpcy5idWZmZXJzID0gW107XG4gICAgICB9QmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbiAoYmluRGF0YSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykge1xuICAgICAgICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7dGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7cmV0dXJuIHBhY2tldDtcbiAgICAgICAgfXJldHVybiBudWxsO1xuICAgICAgfTtCaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5pc2hlZFJlY29uc3RydWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlY29uUGFjayA9IG51bGw7dGhpcy5idWZmZXJzID0gW107XG4gICAgICB9O2Z1bmN0aW9uIGVycm9yKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogZXhwb3J0cy5FUlJPUiwgZGF0YTogXCJwYXJzZXIgZXJyb3JcIiB9O1xuICAgICAgfVxuICAgIH0sIHsgXCIuL2JpbmFyeVwiOiA0NiwgXCIuL2lzLWJ1ZmZlclwiOiA0OCwgXCJjb21wb25lbnQtZW1pdHRlclwiOiA0OSwgZGVidWc6IDM5LCBpc2FycmF5OiA0MywganNvbjM6IDUwIH1dLCA0ODogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHtcbiAgICAgIChmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gaXNCdWY7ZnVuY3Rpb24gaXNCdWYob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIGdsb2JhbC5CdWZmZXIgJiYgZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgfSkuY2FsbCh0aGlzLCB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHt9KTtcbiAgICB9LCB7fV0sIDQ5OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykge1xuICAgICAgYXJndW1lbnRzWzRdWzE1XVswXS5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgIH0sIHsgZHVwOiAxNSB9XSwgNTA6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICAoZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBpc0xvYWRlciA9IHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kO3ZhciBvYmplY3RUeXBlcyA9IHsgXCJmdW5jdGlvblwiOiB0cnVlLCBvYmplY3Q6IHRydWUgfTt2YXIgZnJlZUV4cG9ydHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO3ZhciByb290ID0gb2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93IHx8IHRoaXMsXG4gICAgICAgICAgICAgIGZyZWVHbG9iYWwgPSBmcmVlRXhwb3J0cyAmJiBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiB0eXBlb2YgZ2xvYmFsID09IFwib2JqZWN0XCIgJiYgZ2xvYmFsO2lmIChmcmVlR2xvYmFsICYmIChmcmVlR2xvYmFsW1wiZ2xvYmFsXCJdID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWxbXCJ3aW5kb3dcIl0gPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbFtcInNlbGZcIl0gPT09IGZyZWVHbG9iYWwpKSB7XG4gICAgICAgICAgICByb290ID0gZnJlZUdsb2JhbDtcbiAgICAgICAgICB9ZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQsIGV4cG9ydHMpIHtcbiAgICAgICAgICAgIGNvbnRleHQgfHwgKGNvbnRleHQgPSByb290W1wiT2JqZWN0XCJdKCkpO2V4cG9ydHMgfHwgKGV4cG9ydHMgPSByb290W1wiT2JqZWN0XCJdKCkpO3ZhciBOdW1iZXIgPSBjb250ZXh0W1wiTnVtYmVyXCJdIHx8IHJvb3RbXCJOdW1iZXJcIl0sXG4gICAgICAgICAgICAgICAgU3RyaW5nID0gY29udGV4dFtcIlN0cmluZ1wiXSB8fCByb290W1wiU3RyaW5nXCJdLFxuICAgICAgICAgICAgICAgIE9iamVjdCA9IGNvbnRleHRbXCJPYmplY3RcIl0gfHwgcm9vdFtcIk9iamVjdFwiXSxcbiAgICAgICAgICAgICAgICBEYXRlID0gY29udGV4dFtcIkRhdGVcIl0gfHwgcm9vdFtcIkRhdGVcIl0sXG4gICAgICAgICAgICAgICAgU3ludGF4RXJyb3IgPSBjb250ZXh0W1wiU3ludGF4RXJyb3JcIl0gfHwgcm9vdFtcIlN5bnRheEVycm9yXCJdLFxuICAgICAgICAgICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHRbXCJUeXBlRXJyb3JcIl0gfHwgcm9vdFtcIlR5cGVFcnJvclwiXSxcbiAgICAgICAgICAgICAgICBNYXRoID0gY29udGV4dFtcIk1hdGhcIl0gfHwgcm9vdFtcIk1hdGhcIl0sXG4gICAgICAgICAgICAgICAgbmF0aXZlSlNPTiA9IGNvbnRleHRbXCJKU09OXCJdIHx8IHJvb3RbXCJKU09OXCJdO2lmICh0eXBlb2YgbmF0aXZlSlNPTiA9PSBcIm9iamVjdFwiICYmIG5hdGl2ZUpTT04pIHtcbiAgICAgICAgICAgICAgZXhwb3J0cy5zdHJpbmdpZnkgPSBuYXRpdmVKU09OLnN0cmluZ2lmeTtleHBvcnRzLnBhcnNlID0gbmF0aXZlSlNPTi5wYXJzZTtcbiAgICAgICAgICAgIH12YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICAgICAgICAgIGdldENsYXNzID0gb2JqZWN0UHJvdG8udG9TdHJpbmcsXG4gICAgICAgICAgICAgICAgaXNQcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBmb3JFYWNoLFxuICAgICAgICAgICAgICAgIHVuZGVmO3ZhciBpc0V4dGVuZGVkID0gbmV3IERhdGUoLTB4Yzc4MmI1YjgwMGNlYyk7dHJ5IHtcbiAgICAgICAgICAgICAgaXNFeHRlbmRlZCA9IGlzRXh0ZW5kZWQuZ2V0VVRDRnVsbFllYXIoKSA9PSAtMTA5MjUyICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTW9udGgoKSA9PT0gMCAmJiBpc0V4dGVuZGVkLmdldFVUQ0RhdGUoKSA9PT0gMSAmJiBpc0V4dGVuZGVkLmdldFVUQ0hvdXJzKCkgPT0gMTAgJiYgaXNFeHRlbmRlZC5nZXRVVENNaW51dGVzKCkgPT0gMzcgJiYgaXNFeHRlbmRlZC5nZXRVVENTZWNvbmRzKCkgPT0gNiAmJiBpc0V4dGVuZGVkLmdldFVUQ01pbGxpc2Vjb25kcygpID09IDcwODtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31mdW5jdGlvbiBoYXMobmFtZSkge1xuICAgICAgICAgICAgICBpZiAoaGFzW25hbWVdICE9PSB1bmRlZikge1xuICAgICAgICAgICAgICAgIHJldHVybiBoYXNbbmFtZV07XG4gICAgICAgICAgICAgIH12YXIgaXNTdXBwb3J0ZWQ7aWYgKG5hbWUgPT0gXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIikge1xuICAgICAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gXCJhXCJbMF0gIT0gXCJhXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSBcImpzb25cIikge1xuICAgICAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gaGFzKFwianNvbi1zdHJpbmdpZnlcIikgJiYgaGFzKFwianNvbi1wYXJzZVwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWQgPSBcIntcXFwiYVxcXCI6WzEsdHJ1ZSxmYWxzZSxudWxsLFxcXCJcXFxcdTAwMDBcXFxcYlxcXFxuXFxcXGZcXFxcclxcXFx0XFxcIl19XCI7aWYgKG5hbWUgPT0gXCJqc29uLXN0cmluZ2lmeVwiKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJpbmdpZnksXG4gICAgICAgICAgICAgICAgICAgICAgc3RyaW5naWZ5U3VwcG9ydGVkID0gdHlwZW9mIHN0cmluZ2lmeSA9PSBcImZ1bmN0aW9uXCIgJiYgaXNFeHRlbmRlZDtpZiAoc3RyaW5naWZ5U3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfSkudG9KU09OID0gdmFsdWU7dHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdpZnlTdXBwb3J0ZWQgPSBzdHJpbmdpZnkoMCkgPT09IFwiMFwiICYmIHN0cmluZ2lmeShuZXcgTnVtYmVyKCkpID09PSBcIjBcIiAmJiBzdHJpbmdpZnkobmV3IFN0cmluZygpKSA9PSAnXCJcIicgJiYgc3RyaW5naWZ5KGdldENsYXNzKSA9PT0gdW5kZWYgJiYgc3RyaW5naWZ5KHVuZGVmKSA9PT0gdW5kZWYgJiYgc3RyaW5naWZ5KCkgPT09IHVuZGVmICYmIHN0cmluZ2lmeSh2YWx1ZSkgPT09IFwiMVwiICYmIHN0cmluZ2lmeShbdmFsdWVdKSA9PSBcIlsxXVwiICYmIHN0cmluZ2lmeShbdW5kZWZdKSA9PSBcIltudWxsXVwiICYmIHN0cmluZ2lmeShudWxsKSA9PSBcIm51bGxcIiAmJiBzdHJpbmdpZnkoW3VuZGVmLCBnZXRDbGFzcywgbnVsbF0pID09IFwiW251bGwsbnVsbCxudWxsXVwiICYmIHN0cmluZ2lmeSh7IGE6IFt2YWx1ZSwgdHJ1ZSwgZmFsc2UsIG51bGwsIFwiXFx4MDBcXGJcXG5cXGZcXHJcdFwiXSB9KSA9PSBzZXJpYWxpemVkICYmIHN0cmluZ2lmeShudWxsLCB2YWx1ZSkgPT09IFwiMVwiICYmIHN0cmluZ2lmeShbMSwgMl0sIG51bGwsIDEpID09IFwiW1xcbiAxLFxcbiAyXFxuXVwiICYmIHN0cmluZ2lmeShuZXcgRGF0ZSgtODY0ZTEzKSkgPT0gJ1wiLTI3MTgyMS0wNC0yMFQwMDowMDowMC4wMDBaXCInICYmIHN0cmluZ2lmeShuZXcgRGF0ZSg4NjRlMTMpKSA9PSAnXCIrMjc1NzYwLTA5LTEzVDAwOjAwOjAwLjAwMFpcIicgJiYgc3RyaW5naWZ5KG5ldyBEYXRlKC02MjE5ODc1NTJlNSkpID09ICdcIi0wMDAwMDEtMDEtMDFUMDA6MDA6MDAuMDAwWlwiJyAmJiBzdHJpbmdpZnkobmV3IERhdGUoLTEpKSA9PSAnXCIxOTY5LTEyLTMxVDIzOjU5OjU5Ljk5OVpcIic7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ2lmeVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9aXNTdXBwb3J0ZWQgPSBzdHJpbmdpZnlTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgfWlmIChuYW1lID09IFwianNvbi1wYXJzZVwiKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcGFyc2UgPSBleHBvcnRzLnBhcnNlO2lmICh0eXBlb2YgcGFyc2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlKFwiMFwiKSA9PT0gMCAmJiAhcGFyc2UoZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlKHNlcmlhbGl6ZWQpO3ZhciBwYXJzZVN1cHBvcnRlZCA9IHZhbHVlW1wiYVwiXS5sZW5ndGggPT0gNSAmJiB2YWx1ZVtcImFcIl1bMF0gPT09IDE7aWYgKHBhcnNlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSAhcGFyc2UoJ1wiXHRcIicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9aWYgKHBhcnNlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gcGFyc2UoXCIwMVwiKSAhPT0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBwYXJzZShcIjEuXCIpICE9PSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfWlzU3VwcG9ydGVkID0gcGFyc2VTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9cmV0dXJuIGhhc1tuYW1lXSA9ICEhaXNTdXBwb3J0ZWQ7XG4gICAgICAgICAgICB9aWYgKCFoYXMoXCJqc29uXCIpKSB7XG4gICAgICAgICAgICAgIHZhciBmdW5jdGlvbkNsYXNzID0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiLFxuICAgICAgICAgICAgICAgICAgZGF0ZUNsYXNzID0gXCJbb2JqZWN0IERhdGVdXCIsXG4gICAgICAgICAgICAgICAgICBudW1iZXJDbGFzcyA9IFwiW29iamVjdCBOdW1iZXJdXCIsXG4gICAgICAgICAgICAgICAgICBzdHJpbmdDbGFzcyA9IFwiW29iamVjdCBTdHJpbmddXCIsXG4gICAgICAgICAgICAgICAgICBhcnJheUNsYXNzID0gXCJbb2JqZWN0IEFycmF5XVwiLFxuICAgICAgICAgICAgICAgICAgYm9vbGVhbkNsYXNzID0gXCJbb2JqZWN0IEJvb2xlYW5dXCI7dmFyIGNoYXJJbmRleEJ1Z2d5ID0gaGFzKFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpO2lmICghaXNFeHRlbmRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7dmFyIE1vbnRocyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF07dmFyIGdldERheSA9IGZ1bmN0aW9uIGdldERheSh5ZWFyLCBtb250aCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1vbnRoc1ttb250aF0gKyAzNjUgKiAoeWVhciAtIDE5NzApICsgZmxvb3IoKHllYXIgLSAxOTY5ICsgKG1vbnRoID0gKyhtb250aCA+IDEpKSkgLyA0KSAtIGZsb29yKCh5ZWFyIC0gMTkwMSArIG1vbnRoKSAvIDEwMCkgKyBmbG9vcigoeWVhciAtIDE2MDEgKyBtb250aCkgLyA0MDApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1pZiAoIShpc1Byb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgdmFyIG1lbWJlcnMgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcjtpZiAoKG1lbWJlcnMuX19wcm90b19fID0gbnVsbCwgbWVtYmVycy5fX3Byb3RvX18gPSB7IHRvU3RyaW5nOiAxIH0sIG1lbWJlcnMpLnRvU3RyaW5nICE9IGdldENsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWwgPSB0aGlzLl9fcHJvdG9fXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKHByb3BlcnR5IGluICh0aGlzLl9fcHJvdG9fXyA9IG51bGwsIHRoaXMpKTt0aGlzLl9fcHJvdG9fXyA9IG9yaWdpbmFsO3JldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvciA9IG1lbWJlcnMuY29uc3RydWN0b3I7aXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSAodGhpcy5jb25zdHJ1Y3RvciB8fCBjb25zdHJ1Y3RvcikucHJvdG90eXBlO3JldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmICEocHJvcGVydHkgaW4gcGFyZW50ICYmIHRoaXNbcHJvcGVydHldID09PSBwYXJlbnRbcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH1tZW1iZXJzID0gbnVsbDtyZXR1cm4gaXNQcm9wZXJ0eS5jYWxsKHRoaXMsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9Zm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSAwLFxuICAgICAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgICAgICBtZW1iZXJzLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTsoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVPZiA9IDA7XG4gICAgICAgICAgICAgICAgfSkucHJvdG90eXBlLnZhbHVlT2YgPSAwO21lbWJlcnMgPSBuZXcgUHJvcGVydGllcygpO2ZvciAocHJvcGVydHkgaW4gbWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzUHJvcGVydHkuY2FsbChtZW1iZXJzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1Qcm9wZXJ0aWVzID0gbWVtYmVycyA9IG51bGw7aWYgKCFzaXplKSB7XG4gICAgICAgICAgICAgICAgICBtZW1iZXJzID0gW1widmFsdWVPZlwiLCBcInRvU3RyaW5nXCIsIFwidG9Mb2NhbGVTdHJpbmdcIiwgXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLCBcImlzUHJvdG90eXBlT2ZcIiwgXCJoYXNPd25Qcm9wZXJ0eVwiLCBcImNvbnN0cnVjdG9yXCJdO2ZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGg7dmFyIGhhc1Byb3BlcnR5ID0gIWlzRnVuY3Rpb24gJiYgdHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciAhPSBcImZ1bmN0aW9uXCIgJiYgb2JqZWN0VHlwZXNbdHlwZW9mIG9iamVjdC5oYXNPd25Qcm9wZXJ0eV0gJiYgb2JqZWN0Lmhhc093blByb3BlcnR5IHx8IGlzUHJvcGVydHk7Zm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09IFwicHJvdG90eXBlXCIpICYmIGhhc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1mb3IgKGxlbmd0aCA9IG1lbWJlcnMubGVuZ3RoOyBwcm9wZXJ0eSA9IG1lbWJlcnNbLS1sZW5ndGhdOyBoYXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpICYmIGNhbGxiYWNrKHByb3BlcnR5KSk7XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lbWJlcnMgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5O2ZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiAhaXNQcm9wZXJ0eS5jYWxsKG1lbWJlcnMsIHByb3BlcnR5KSAmJiAobWVtYmVyc1twcm9wZXJ0eV0gPSAxKSAmJiBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0NvbnN0cnVjdG9yO2ZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkgJiYgIShpc0NvbnN0cnVjdG9yID0gcHJvcGVydHkgPT09IFwiY29uc3RydWN0b3JcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1pZiAoaXNDb25zdHJ1Y3RvciB8fCBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSA9IFwiY29uc3RydWN0b3JcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfXJldHVybiBmb3JFYWNoKG9iamVjdCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9O2lmICghaGFzKFwianNvbi1zdHJpbmdpZnlcIikpIHtcbiAgICAgICAgICAgICAgICB2YXIgRXNjYXBlcyA9IHsgOTI6IFwiXFxcXFxcXFxcIiwgMzQ6ICdcXFxcXCInLCA4OiBcIlxcXFxiXCIsIDEyOiBcIlxcXFxmXCIsIDEwOiBcIlxcXFxuXCIsIDEzOiBcIlxcXFxyXCIsIDk6IFwiXFxcXHRcIiB9O3ZhciBsZWFkaW5nWmVyb2VzID0gXCIwMDAwMDBcIjt2YXIgdG9QYWRkZWRTdHJpbmcgPSBmdW5jdGlvbiB0b1BhZGRlZFN0cmluZyh3aWR0aCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAobGVhZGluZ1plcm9lcyArICh2YWx1ZSB8fCAwKSkuc2xpY2UoLXdpZHRoKTtcbiAgICAgICAgICAgICAgICB9O3ZhciB1bmljb2RlUHJlZml4ID0gXCJcXFxcdTAwXCI7dmFyIHF1b3RlID0gZnVuY3Rpb24gcXVvdGUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAnXCInLFxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgdXNlQ2hhckluZGV4ID0gIWNoYXJJbmRleEJ1Z2d5IHx8IGxlbmd0aCA+IDEwO3ZhciBzeW1ib2xzID0gdXNlQ2hhckluZGV4ICYmIChjaGFySW5kZXhCdWdneSA/IHZhbHVlLnNwbGl0KFwiXCIpIDogdmFsdWUpO2ZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KTtzd2l0Y2ggKGNoYXJDb2RlKSB7Y2FzZSA4OmNhc2UgOTpjYXNlIDEwOmNhc2UgMTI6Y2FzZSAxMzpjYXNlIDM0OmNhc2UgOTI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gRXNjYXBlc1tjaGFyQ29kZV07YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB1bmljb2RlUHJlZml4ICsgdG9QYWRkZWRTdHJpbmcoMiwgY2hhckNvZGUudG9TdHJpbmcoMTYpKTticmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1yZXN1bHQgKz0gdXNlQ2hhckluZGV4ID8gc3ltYm9sc1tpbmRleF0gOiB2YWx1ZS5jaGFyQXQoaW5kZXgpO31cbiAgICAgICAgICAgICAgICAgIH1yZXR1cm4gcmVzdWx0ICsgJ1wiJztcbiAgICAgICAgICAgICAgICB9O3ZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiBzZXJpYWxpemUocHJvcGVydHksIG9iamVjdCwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjaykge1xuICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlLCBjbGFzc05hbWUsIHllYXIsIG1vbnRoLCBkYXRlLCB0aW1lLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzLCByZXN1bHRzLCBlbGVtZW50LCBpbmRleCwgbGVuZ3RoLCBwcmVmaXgsIHJlc3VsdDt0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9aWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwodmFsdWUpO2lmIChjbGFzc05hbWUgPT0gZGF0ZUNsYXNzICYmICFpc1Byb3BlcnR5LmNhbGwodmFsdWUsIFwidG9KU09OXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXREYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGZsb29yKHZhbHVlIC8gODY0ZTUpO2ZvciAoeWVhciA9IGZsb29yKGRhdGUgLyAzNjUuMjQyNSkgKyAxOTcwIC0gMTsgZ2V0RGF5KHllYXIgKyAxLCAwKSA8PSBkYXRlOyB5ZWFyKyspO2ZvciAobW9udGggPSBmbG9vcigoZGF0ZSAtIGdldERheSh5ZWFyLCAwKSkgLyAzMC40Mik7IGdldERheSh5ZWFyLCBtb250aCArIDEpIDw9IGRhdGU7IG1vbnRoKyspO2RhdGUgPSAxICsgZGF0ZSAtIGdldERheSh5ZWFyLCBtb250aCk7dGltZSA9ICh2YWx1ZSAlIDg2NGU1ICsgODY0ZTUpICUgODY0ZTU7aG91cnMgPSBmbG9vcih0aW1lIC8gMzZlNSkgJSAyNDttaW51dGVzID0gZmxvb3IodGltZSAvIDZlNCkgJSA2MDtzZWNvbmRzID0gZmxvb3IodGltZSAvIDFlMykgJSA2MDttaWxsaXNlY29uZHMgPSB0aW1lICUgMWUzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IHZhbHVlLmdldFVUQ0Z1bGxZZWFyKCk7bW9udGggPSB2YWx1ZS5nZXRVVENNb250aCgpO2RhdGUgPSB2YWx1ZS5nZXRVVENEYXRlKCk7aG91cnMgPSB2YWx1ZS5nZXRVVENIb3VycygpO21pbnV0ZXMgPSB2YWx1ZS5nZXRVVENNaW51dGVzKCk7c2Vjb25kcyA9IHZhbHVlLmdldFVUQ1NlY29uZHMoKTttaWxsaXNlY29uZHMgPSB2YWx1ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH12YWx1ZSA9ICh5ZWFyIDw9IDAgfHwgeWVhciA+PSAxZTQgPyAoeWVhciA8IDAgPyBcIi1cIiA6IFwiK1wiKSArIHRvUGFkZGVkU3RyaW5nKDYsIHllYXIgPCAwID8gLXllYXIgOiB5ZWFyKSA6IHRvUGFkZGVkU3RyaW5nKDQsIHllYXIpKSArIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbW9udGggKyAxKSArIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgZGF0ZSkgKyBcIlRcIiArIHRvUGFkZGVkU3RyaW5nKDIsIGhvdXJzKSArIFwiOlwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbWludXRlcykgKyBcIjpcIiArIHRvUGFkZGVkU3RyaW5nKDIsIHNlY29uZHMpICsgXCIuXCIgKyB0b1BhZGRlZFN0cmluZygzLCBtaWxsaXNlY29uZHMpICsgXCJaXCI7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PSBcImZ1bmN0aW9uXCIgJiYgKGNsYXNzTmFtZSAhPSBudW1iZXJDbGFzcyAmJiBjbGFzc05hbWUgIT0gc3RyaW5nQ2xhc3MgJiYgY2xhc3NOYW1lICE9IGFycmF5Q2xhc3MgfHwgaXNQcm9wZXJ0eS5jYWxsKHZhbHVlLCBcInRvSlNPTlwiKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1pZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1pZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgICAgICAgICAgfWNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwodmFsdWUpO2lmIChjbGFzc05hbWUgPT0gYm9vbGVhbkNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBudW1iZXJDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPiAtMSAvIDAgJiYgdmFsdWUgPCAxIC8gMCA/IFwiXCIgKyB2YWx1ZSA6IFwibnVsbFwiO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1b3RlKFwiXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICB9aWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGVuZ3RoID0gc3RhY2subGVuZ3RoOyBsZW5ndGgtLTspIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2tbbGVuZ3RoXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfXN0YWNrLnB1c2godmFsdWUpO3Jlc3VsdHMgPSBbXTtwcmVmaXggPSBpbmRlbnRhdGlvbjtpbmRlbnRhdGlvbiArPSB3aGl0ZXNwYWNlO2lmIChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gc2VyaWFsaXplKGluZGV4LCB2YWx1ZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjayk7cmVzdWx0cy5wdXNoKGVsZW1lbnQgPT09IHVuZGVmID8gXCJudWxsXCIgOiBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICB9cmVzdWx0ID0gcmVzdWx0cy5sZW5ndGggPyB3aGl0ZXNwYWNlID8gXCJbXFxuXCIgKyBpbmRlbnRhdGlvbiArIHJlc3VsdHMuam9pbihcIixcXG5cIiArIGluZGVudGF0aW9uKSArIFwiXFxuXCIgKyBwcmVmaXggKyBcIl1cIiA6IFwiW1wiICsgcmVzdWx0cy5qb2luKFwiLFwiKSArIFwiXVwiIDogXCJbXVwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2gocHJvcGVydGllcyB8fCB2YWx1ZSwgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHNlcmlhbGl6ZShwcm9wZXJ0eSwgdmFsdWUsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spO2lmIChlbGVtZW50ICE9PSB1bmRlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocXVvdGUocHJvcGVydHkpICsgXCI6XCIgKyAod2hpdGVzcGFjZSA/IFwiIFwiIDogXCJcIikgKyBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtyZXN1bHQgPSByZXN1bHRzLmxlbmd0aCA/IHdoaXRlc3BhY2UgPyBcIntcXG5cIiArIGluZGVudGF0aW9uICsgcmVzdWx0cy5qb2luKFwiLFxcblwiICsgaW5kZW50YXRpb24pICsgXCJcXG5cIiArIHByZWZpeCArIFwifVwiIDogXCJ7XCIgKyByZXN1bHRzLmpvaW4oXCIsXCIpICsgXCJ9XCIgOiBcInt9XCI7XG4gICAgICAgICAgICAgICAgICAgIH1zdGFjay5wb3AoKTtyZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07ZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoc291cmNlLCBmaWx0ZXIsIHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgd2hpdGVzcGFjZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIGNsYXNzTmFtZTtpZiAob2JqZWN0VHlwZXNbdHlwZW9mIGZpbHRlcl0gJiYgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbChmaWx0ZXIpKSA9PSBmdW5jdGlvbkNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmaWx0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge307Zm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBmaWx0ZXIubGVuZ3RoLCB2YWx1ZTsgaW5kZXggPCBsZW5ndGg7IHZhbHVlID0gZmlsdGVyW2luZGV4KytdLCAoY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSksIGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcyB8fCBjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpICYmIChwcm9wZXJ0aWVzW3ZhbHVlXSA9IDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfWlmICh3aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwod2lkdGgpKSA9PSBudW1iZXJDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgod2lkdGggLT0gd2lkdGggJSAxKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAod2hpdGVzcGFjZSA9IFwiXCIsIHdpZHRoID4gMTAgJiYgKHdpZHRoID0gMTApOyB3aGl0ZXNwYWNlLmxlbmd0aCA8IHdpZHRoOyB3aGl0ZXNwYWNlICs9IFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgd2hpdGVzcGFjZSA9IHdpZHRoLmxlbmd0aCA8PSAxMCA/IHdpZHRoIDogd2lkdGguc2xpY2UoMCwgMTApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9cmV0dXJuIHNlcmlhbGl6ZShcIlwiLCAodmFsdWUgPSB7fSwgdmFsdWVbXCJcIl0gPSBzb3VyY2UsIHZhbHVlKSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIFwiXCIsIFtdKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9aWYgKCFoYXMoXCJqc29uLXBhcnNlXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7dmFyIFVuZXNjYXBlcyA9IHsgOTI6IFwiXFxcXFwiLCAzNDogJ1wiJywgNDc6IFwiL1wiLCA5ODogXCJcXGJcIiwgMTE2OiBcIlx0XCIsIDExMDogXCJcXG5cIiwgMTAyOiBcIlxcZlwiLCAxMTQ6IFwiXFxyXCIgfTt2YXIgSW5kZXgsIFNvdXJjZTt2YXIgYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ID0gU291cmNlID0gbnVsbDt0aHJvdyBTeW50YXhFcnJvcigpO1xuICAgICAgICAgICAgICAgIH07dmFyIGxleCA9IGZ1bmN0aW9uIGxleCgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBiZWdpbixcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBpc1NpZ25lZCxcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZTt3aGlsZSAoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7c3dpdGNoIChjaGFyQ29kZSkge2Nhc2UgOTpjYXNlIDEwOmNhc2UgMTM6Y2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4Kys7YnJlYWs7Y2FzZSAxMjM6Y2FzZSAxMjU6Y2FzZSA5MTpjYXNlIDkzOmNhc2UgNTg6Y2FzZSA0NDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2hhckluZGV4QnVnZ3kgPyBzb3VyY2UuY2hhckF0KEluZGV4KSA6IHNvdXJjZVtJbmRleF07SW5kZXgrKztyZXR1cm4gdmFsdWU7Y2FzZSAzNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFsdWUgPSBcIkBcIiwgSW5kZXgrKzsgSW5kZXggPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO2lmIChjaGFyQ29kZSA8IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA9PSA5Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7c3dpdGNoIChjaGFyQ29kZSkge2Nhc2UgOTI6Y2FzZSAzNDpjYXNlIDQ3OmNhc2UgOTg6Y2FzZSAxMTY6Y2FzZSAxMTA6Y2FzZSAxMDI6Y2FzZSAxMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IFVuZXNjYXBlc1tjaGFyQ29kZV07SW5kZXgrKzticmVhaztjYXNlIDExNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSArK0luZGV4O2ZvciAocG9zaXRpb24gPSBJbmRleCArIDQ7IEluZGV4IDwgcG9zaXRpb247IEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtpZiAoIShjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1NyB8fCBjaGFyQ29kZSA+PSA5NyAmJiBjaGFyQ29kZSA8PSAxMDIgfHwgY2hhckNvZGUgPj0gNjUgJiYgY2hhckNvZGUgPD0gNzApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfXZhbHVlICs9IGZyb21DaGFyQ29kZShcIjB4XCIgKyBzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KSk7YnJlYWs7ZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Y2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7YmVnaW4gPSBJbmRleDt3aGlsZSAoY2hhckNvZGUgPj0gMzIgJiYgY2hhckNvZGUgIT0gOTIgJiYgY2hhckNvZGUgIT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfXZhbHVlICs9IHNvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9aWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRleCsrO3JldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1hYm9ydCgpO2RlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IEluZGV4O2lmIChjaGFyQ29kZSA9PSA0NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NpZ25lZCA9IHRydWU7Y2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQ4ICYmIChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4ICsgMSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1pc1NpZ25lZCA9IGZhbHNlO2ZvciAoOyBJbmRleCA8IGxlbmd0aCAmJiAoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgSW5kZXgrKyk7aWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSA0Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gKytJbmRleDtmb3IgKDsgcG9zaXRpb24gPCBsZW5ndGggJiYgKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQocG9zaXRpb24pLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IHBvc2l0aW9uKyspO2lmIChwb3NpdGlvbiA9PSBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9SW5kZXggPSBwb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfWNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO2lmIChjaGFyQ29kZSA9PSAxMDEgfHwgY2hhckNvZGUgPT0gNjkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO2lmIChjaGFyQ29kZSA9PSA0MyB8fCBjaGFyQ29kZSA9PSA0NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Zm9yIChwb3NpdGlvbiA9IEluZGV4OyBwb3NpdGlvbiA8IGxlbmd0aCAmJiAoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbiksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgcG9zaXRpb24rKyk7aWYgKHBvc2l0aW9uID09IEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1JbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9cmV0dXJuICtzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAoaXNTaWduZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAoc291cmNlLnNsaWNlKEluZGV4LCBJbmRleCArIDQpID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDQ7cmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA1KSA9PSBcImZhbHNlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNTtyZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA0KSA9PSBcIm51bGxcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRleCArPSA0O3JldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWFib3J0KCk7fVxuICAgICAgICAgICAgICAgICAgfXJldHVybiBcIiRcIjtcbiAgICAgICAgICAgICAgICB9O3ZhciBnZXQgPSBmdW5jdGlvbiBnZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzLCBoYXNNZW1iZXJzO2lmICh2YWx1ZSA9PSBcIiRcIikge1xuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfWlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuY2hhckF0KDApIDogdmFsdWVbMF0pID09IFwiQFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgICAgICB9aWYgKHZhbHVlID09IFwiW1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO2ZvciAoOzsgaGFzTWVtYmVycyB8fCAoaGFzTWVtYmVycyA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO2lmICh2YWx1ZSA9PSBcIl1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAoaGFzTWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO2lmICh2YWx1ZSA9PSBcIl1cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfWlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfXJlc3VsdHMucHVzaChnZXQodmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0ge307Zm9yICg7OyBoYXNNZW1iZXJzIHx8IChoYXNNZW1iZXJzID0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7aWYgKHZhbHVlID09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWlmIChoYXNNZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7aWYgKHZhbHVlID09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9aWYgKHZhbHVlID09IFwiLFwiIHx8IHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiIHx8IChjaGFySW5kZXhCdWdneSA/IHZhbHVlLmNoYXJBdCgwKSA6IHZhbHVlWzBdKSAhPSBcIkBcIiB8fCBsZXgoKSAhPSBcIjpcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfXJlc3VsdHNbdmFsdWUuc2xpY2UoMSldID0gZ2V0KGxleCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgIH1hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfXJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9O3ZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gd2Fsayhzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjayk7aWYgKGVsZW1lbnQgPT09IHVuZGVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzb3VyY2VbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlW3Byb3BlcnR5XSA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTt2YXIgd2FsayA9IGZ1bmN0aW9uIHdhbGsoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eV0sXG4gICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoO2lmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0Q2xhc3MuY2FsbCh2YWx1ZSkgPT0gYXJyYXlDbGFzcykge1xuICAgICAgICAgICAgICAgICAgICAgIGZvciAobGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBsZW5ndGgtLTspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh2YWx1ZSwgbGVuZ3RoLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlKHZhbHVlLCBwcm9wZXJ0eSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9cmV0dXJuIGNhbGxiYWNrLmNhbGwoc291cmNlLCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH07ZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCB2YWx1ZTtJbmRleCA9IDA7U291cmNlID0gXCJcIiArIHNvdXJjZTtyZXN1bHQgPSBnZXQobGV4KCkpO2lmIChsZXgoKSAhPSBcIiRcIikge1xuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfUluZGV4ID0gU291cmNlID0gbnVsbDtyZXR1cm4gY2FsbGJhY2sgJiYgZ2V0Q2xhc3MuY2FsbChjYWxsYmFjaykgPT0gZnVuY3Rpb25DbGFzcyA/IHdhbGsoKHZhbHVlID0ge30sIHZhbHVlW1wiXCJdID0gcmVzdWx0LCB2YWx1ZSksIFwiXCIsIGNhbGxiYWNrKSA6IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZXhwb3J0c1tcInJ1bkluQ29udGV4dFwiXSA9IHJ1bkluQ29udGV4dDtyZXR1cm4gZXhwb3J0cztcbiAgICAgICAgICB9aWYgKGZyZWVFeHBvcnRzICYmICFpc0xvYWRlcikge1xuICAgICAgICAgICAgcnVuSW5Db250ZXh0KHJvb3QsIGZyZWVFeHBvcnRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG5hdGl2ZUpTT04gPSByb290LkpTT04sXG4gICAgICAgICAgICAgICAgcHJldmlvdXNKU09OID0gcm9vdFtcIkpTT04zXCJdLFxuICAgICAgICAgICAgICAgIGlzUmVzdG9yZWQgPSBmYWxzZTt2YXIgSlNPTjMgPSBydW5JbkNvbnRleHQocm9vdCwgcm9vdFtcIkpTT04zXCJdID0geyBub0NvbmZsaWN0OiBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNSZXN0b3JlZCkge1xuICAgICAgICAgICAgICAgICAgaXNSZXN0b3JlZCA9IHRydWU7cm9vdC5KU09OID0gbmF0aXZlSlNPTjtyb290W1wiSlNPTjNcIl0gPSBwcmV2aW91c0pTT047bmF0aXZlSlNPTiA9IHByZXZpb3VzSlNPTiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfXJldHVybiBKU09OMztcbiAgICAgICAgICAgICAgfSB9KTtyb290LkpTT04gPSB7IHBhcnNlOiBKU09OMy5wYXJzZSwgc3RyaW5naWZ5OiBKU09OMy5zdHJpbmdpZnkgfTtcbiAgICAgICAgICB9aWYgKGlzTG9hZGVyKSB7XG4gICAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gSlNPTjM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgICB9KS5jYWxsKHRoaXMsIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDoge30pO1xuICAgIH0sIHt9XSwgNTE6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXk7ZnVuY3Rpb24gdG9BcnJheShsaXN0LCBpbmRleCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBbXTtpbmRleCA9IGluZGV4IHx8IDA7Zm9yICh2YXIgaSA9IGluZGV4IHx8IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV07XG4gICAgICAgIH1yZXR1cm4gYXJyYXk7XG4gICAgICB9XG4gICAgfSwge31dIH0sIHt9LCBbMzFdKSgzMSk7XG59KTtcblxuY2MuX1JGcG9wKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5jYy5fUkZwdXNoKG1vZHVsZSwgJzQzYzY2OTg4ckZINmIreHh5V1NzYlRpJywgJ3VzZXInKTtcbi8vIGJpei91c2VyL3NjcmlwdC91c2VyLmpzXG5cbmZ1bmN0aW9uIFVzZXIodXNlcikge31cblxuVXNlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgdGhpcy5JZCA9IHVzZXIuSWQ7XG4gICAgdGhpcy5OYW1lID0gdXNlci5OYW1lO1xuICAgIHRoaXMuRGlhbW9uZCA9IHVzZXIuRGlhbW9uZDtcbiAgICB0aGlzLktpbGwgPSB1c2VyLktpbGw7XG4gICAgdGhpcy5UYW5rQm9keSA9IHVzZXIuVGFua0JvZHk7XG4gICAgdGhpcy5UYW5rSGVhZCA9IHVzZXIuVGFua0hlYWQ7XG4gICAgdGhpcy5UYW5rV2hlZWwgPSB1c2VyLlRhbmtXaGVlbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFVzZXIoKTtcblxuY2MuX1JGcG9wKCk7Il19
