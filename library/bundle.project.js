require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"biz-socket":[function(require,module,exports){
cc._RFpush(module, '462a1boOOpB3pCoZ/FvwZch', 'biz-socket');
// biz/socket/biz-socket.js

'use strict';

var socketIO = require('../../lib/socket.io');

var BizSocket = (function () {
    var URI = '10.10.1.29:3000/tankControllers';
    var UID = 'lisheng';

    var ws = socketIO(URI + '?uid=' + UID);

    var connect = function connect() {
        ws.emit('c-enter');
    };

    var disconnect = function disconnect() {
        ws.emit('c-leave');
    };

    var on = ws.on.bind(ws);

    var emit = function emit(eventName, eventObj) {
        ws.emit(eventName, {
            uid: UID,
            data: eventObj
        });
    };

    return {
        connect: connect,
        disconnect: disconnect,
        on: on,
        emit: emit
    };
})();

module.exports = BizSocket;

cc._RFpop();
},{"../../lib/socket.io":"socket.io"}],"controller":[function(require,module,exports){
cc._RFpush(module, 'f2d90q40wZO0r33JeQe1sFf', 'controller');
// biz/controller/script/controller.js

'use strict';

var bizSocket = require('../../socket/biz-socket');

cc.Class({
    'extends': cc.Component,

    properties: {},

    backToMain: function backToMain() {
        bizSocket.disconnect();
        cc.director.loadScene('main');
    },

    onLoad: function onLoad() {},

    update: function update(dt) {}
});

cc._RFpop();
},{"../../socket/biz-socket":"biz-socket"}],"data":[function(require,module,exports){
cc._RFpush(module, '19a03pBgr9P6KEGg7IRtEDG', 'data');
// biz/main/script/data.js

'use strict';

var updateData = function updateData(object) {};

var initArchives = function initArchives() {};

var updateArchives = function updateArchives() {};

var getArchives = function getArchives() {};

var data = {
    username: '',

    tankHead: 0,
    tankBody: 0,
    tankWheel: 0,

    money: 0,
    scoreKill: 0,
    scoreDeal: 0

};

module.exports = data;

cc._RFpop();
},{}],"directionCtrl":[function(require,module,exports){
cc._RFpush(module, '8dfd11I/pBAD7XnN4iH9tiV', 'directionCtrl');
// biz/controller/script/directionCtrl.js

'use strict';

var bizSocket = require('../../socket/biz-socket');

cc.Class({
    'extends': cc.Component,

    properties: {
        follower: {
            'default': null,
            type: cc.Node
        },
        followSpeed: 0
    },

    onLoad: function onLoad() {
        this.setTouchControl();
        this.node.on('direction', function (event) {
            console.log(event.detail.direction);
            bizSocket.emit('c-direction', {
                direction: event.detail.direction
            });
        });
    },

    setTouchControl: function setTouchControl() {
        var self = this;
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            onTouchBegan: self.onTouchBegan.bind(self),
            onTouchMoved: self.onTouchMoved.bind(self),
            onTouchEnded: self.onTouchEnded.bind(self)
        }, self.node);
    },

    __getAngle: function __getAngle(pos) {
        this.angle = Math.atan2(pos.y, pos.x) / cc.PI * 180;
        return this.angle;
    },

    __getRadians: function __getRadians(pos) {
        this.radians = Math.atan2(pos.y, pos.x);
        return this.radians;
    },

    __getLength: function __getLength(pos) {
        return Math.sqrt(pos.x * pos.x + pos.y * pos.y);
    },

    onUpdateDirection: function onUpdateDirection(position) {
        if (this.angle < 0) this.angle = this.angle + 360;

        if (this.angle > -45 && this.angle <= 45) this.direction = 'RIGHT';
        if (this.angle > 45 && this.angle <= 135) this.direction = 'UP';
        if (this.angle > 135 && this.angle <= 225) this.direction = 'LEFT';
        if (this.angle > 225 && this.angle <= 315) this.direction = 'DOWN';

        this.node.emit('direction', {
            direction: this.direction
        });
    },

    onTouchBegan: function onTouchBegan(touch, event) {
        var target = this.follower;
        var touchLoc = touch.getLocation();

        var locInNode = this.node.convertToNodeSpaceAR(touchLoc);
        var tmpLength = this.__getLength(locInNode);

        return tmpLength < 103;
    },

    onTouchMoved: function onTouchMoved(touch, event) {
        var target = this.follower;
        var touchLoc = touch.getLocation();

        var locInNode = this.node.convertToNodeSpaceAR(touchLoc);
        this.__getAngle(locInNode);
        this.__getRadians(locInNode);
        this.onUpdateDirection(locInNode);

        var tmpLength = this.__getLength(locInNode);

        if (tmpLength < 103) {
            target.setPosition(locInNode);
        } else {
            var x = Math.cos(this.radians) * 103;
            var y = Math.sin(this.radians) * 103;
            target.setPosition(cc.p(x, y));
        }
    },

    onTouchEnded: function onTouchEnded(touch, event) {
        var target = this.follower;
        target.setPosition({ x: 0, y: 0 });
    },

    update: function update(dt) {}
});

cc._RFpop();
},{"../../socket/biz-socket":"biz-socket"}],"fireCtrl":[function(require,module,exports){
cc._RFpush(module, 'a4023/XIFtI1Z1hB/fMjLNJ', 'fireCtrl');
// biz/controller/script/fireCtrl.js

'use strict';

var bizSocket = require('../../socket/biz-socket');

cc.Class({
    'extends': cc.Component,

    properties: {},

    onLoad: function onLoad() {},

    fire: function fire() {
        bizSocket.emit('c-fire', {
            fire: 'fire'
        });
    }
});

cc._RFpop();
},{"../../socket/biz-socket":"biz-socket"}],"index":[function(require,module,exports){
cc._RFpush(module, '626b7lEiD1Im5v5puIImRDy', 'index');
// utils/index.js

'use strict';

exports.getUid = function () {
    // return window.localStorage.getItem('uid');
    return 'lisheng';
};

cc._RFpop();
},{}],"lodash":[function(require,module,exports){
(function (global){
cc._RFpush(module, '9f2f1hkSF9Nk6WvHxAs9uqP', 'lodash');
// lib/lodash.js

"use strict";(function(){var undefined;var VERSION="4.2.0";var BIND_FLAG=1,BIND_KEY_FLAG=2,CURRY_BOUND_FLAG=4,CURRY_FLAG=8,CURRY_RIGHT_FLAG=16,PARTIAL_FLAG=32,PARTIAL_RIGHT_FLAG=64,ARY_FLAG=128,REARG_FLAG=256,FLIP_FLAG=512;var UNORDERED_COMPARE_FLAG=1,PARTIAL_COMPARE_FLAG=2;var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION="...";var HOT_COUNT=150,HOT_SPAN=16;var LARGE_ARRAY_SIZE=200;var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;var FUNC_ERROR_TEXT="Expected a function";var HASH_UNDEFINED="__lodash_hash_undefined__";var INFINITY=1 / 0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e308,NAN=0 / 0;var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH - 1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH >>> 1;var PLACEHOLDER="__lodash_placeholder__";var argsTag="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag="[object Function]",genTag="[object GeneratorFunction]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",symbolTag="[object Symbol]",weakMapTag="[object WeakMap]";var arrayBufferTag="[object ArrayBuffer]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]";var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;var reEscapedHtml=/&(?:amp|lt|gt|quot|#39|#96);/g,reUnescapedHtml=/[&<>"'`]/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);var reTrim=/^\s+|\s+$/g,reTrimStart=/^\s+/,reTrimEnd=/\s+$/;var reEscapeChar=/\\(\\)?/g;var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;var reFlags=/\w*$/;var reHasHexPrefix=/^0x/i;var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;var reIsBinary=/^0b[01]+$/i;var reIsHostCtor=/^\[object .+?Constructor\]$/;var reIsOctal=/^0o[0-7]+$/i;var reIsUint=/^(?:0|[1-9]\d*)$/;var reLatin1=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;var reNoMatch=/($^)/;var reUnescapedString=/['\n\r\u2028\u2029\\]/g;var rsAstralRange="\\ud800-\\udfff",rsComboMarksRange="\\u0300-\\u036f\\ufe20-\\ufe23",rsComboSymbolsRange="\\u20d0-\\u20f0",rsDingbatRange="\\u2700-\\u27bf",rsLowerRange="a-z\\xdf-\\xf6\\xf8-\\xff",rsMathOpRange="\\xac\\xb1\\xd7\\xf7",rsNonCharRange="\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",rsQuoteRange="\\u2018\\u2019\\u201c\\u201d",rsSpaceRange=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",rsUpperRange="A-Z\\xc0-\\xd6\\xd8-\\xde",rsVarRange="\\ufe0e\\ufe0f",rsBreakRange=rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;var rsAstral="[" + rsAstralRange + "]",rsBreak="[" + rsBreakRange + "]",rsCombo="[" + rsComboMarksRange + rsComboSymbolsRange + "]",rsDigits="\\d+",rsDingbat="[" + rsDingbatRange + "]",rsLower="[" + rsLowerRange + "]",rsMisc="[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]",rsFitz="\\ud83c[\\udffb-\\udfff]",rsModifier="(?:" + rsCombo + "|" + rsFitz + ")",rsNonAstral="[^" + rsAstralRange + "]",rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",rsUpper="[" + rsUpperRange + "]",rsZWJ="\\u200d";var rsLowerMisc="(?:" + rsLower + "|" + rsMisc + ")",rsUpperMisc="(?:" + rsUpper + "|" + rsMisc + ")",reOptMod=rsModifier + "?",rsOptVar="[" + rsVarRange + "]?",rsOptJoin="(?:" + rsZWJ + "(?:" + [rsNonAstral,rsRegional,rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*",rsSeq=rsOptVar + reOptMod + rsOptJoin,rsEmoji="(?:" + [rsDingbat,rsRegional,rsSurrPair].join("|") + ")" + rsSeq,rsSymbol="(?:" + [rsNonAstral + rsCombo + "?",rsCombo,rsRegional,rsSurrPair,rsAstral].join("|") + ")";var reComboMark=RegExp(rsCombo,"g");var reComplexSymbol=RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq,"g");var reHasComplexSymbol=RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");var reBasicWord=/[a-zA-Z0-9]+/g;var reComplexWord=RegExp([rsUpper + "?" + rsLower + "+(?=" + [rsBreak,rsUpper,"$"].join("|") + ")",rsUpperMisc + "+(?=" + [rsBreak,rsUpper + rsLowerMisc,"$"].join("|") + ")",rsUpper + "?" + rsLowerMisc + "+",rsUpper + "+",rsDigits,rsEmoji].join("|"),"g");var reHasComplexWord=/[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;var contextProps=["Array","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Reflect","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"];var templateCounter=-1;var typedArrayTags={};typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;var cloneableTags={};cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;var deburredLetters={"脌":"A","脕":"A","脗":"A","脙":"A","脛":"A","脜":"A","脿":"a","谩":"a","芒":"a","茫":"a","盲":"a","氓":"a","脟":"C","莽":"c","脨":"D","冒":"d","脠":"E","脡":"E","脢":"E","脣":"E","猫":"e","茅":"e","锚":"e","毛":"e","脤":"I","脥":"I","脦":"I","脧":"I","矛":"i","铆":"i","卯":"i","茂":"i","脩":"N","帽":"n","脪":"O","脫":"O","脭":"O","脮":"O","脰":"O","脴":"O","貌":"o","贸":"o","么":"o","玫":"o","枚":"o","酶":"o","脵":"U","脷":"U","脹":"U","脺":"U","霉":"u","煤":"u","没":"u","眉":"u","脻":"Y","媒":"y","每":"y","脝":"Ae","忙":"ae","脼":"Th","镁":"th","脽":"ss"};var htmlEscapes={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"};var htmlUnescapes={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"};var objectTypes={"function":true,object:true};var stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};var freeParseFloat=parseFloat,freeParseInt=parseInt;var freeExports=objectTypes[typeof exports] && exports && !exports.nodeType?exports:null;var freeModule=objectTypes[typeof module] && module && !module.nodeType?module:null;var freeGlobal=checkGlobal(freeExports && freeModule && typeof global == "object" && global);var freeSelf=checkGlobal(objectTypes[typeof self] && self);var freeWindow=checkGlobal(objectTypes[typeof window] && window);var moduleExports=freeModule && freeModule.exports === freeExports?freeExports:null;var thisGlobal=checkGlobal(objectTypes[typeof this] && this);var root=freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function("return this")();function addMapEntry(map,pair){map.set(pair[0],pair[1]);return map;}function addSetEntry(set,value){set.add(value);return set;}function apply(func,thisArg,args){var length=args.length;switch(length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array.length;while(++index < length) {var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}function arrayConcat(array,other){var index=-1,length=array.length,othIndex=-1,othLength=other.length,result=Array(length + othLength);while(++index < length) {result[index] = array[index];}while(++othIndex < othLength) {result[index++] = other[othIndex];}return result;}function arrayEach(array,iteratee){var index=-1,length=array.length;while(++index < length) {if(iteratee(array[index],index,array) === false){break;}}return array;}function arrayEachRight(array,iteratee){var length=array.length;while(length--) {if(iteratee(array[length],length,array) === false){break;}}return array;}function arrayEvery(array,predicate){var index=-1,length=array.length;while(++index < length) {if(!predicate(array[index],index,array)){return false;}}return true;}function arrayFilter(array,predicate){var index=-1,length=array.length,resIndex=-1,result=[];while(++index < length) {var value=array[index];if(predicate(value,index,array)){result[++resIndex] = value;}}return result;}function arrayIncludes(array,value){return !!array.length && baseIndexOf(array,value,0) > -1;}function arrayIncludesWith(array,value,comparator){var index=-1,length=array.length;while(++index < length) {if(comparator(value,array[index])){return true;}}return false;}function arrayMap(array,iteratee){var index=-1,length=array.length,result=Array(length);while(++index < length) {result[index] = iteratee(array[index],index,array);}return result;}function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index < length) {array[offset + index] = values[index];}return array;}function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array.length;if(initAccum && length){accumulator = array[++index];}while(++index < length) {accumulator = iteratee(accumulator,array[index],index,array);}return accumulator;}function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array.length;if(initAccum && length){accumulator = array[--length];}while(length--) {accumulator = iteratee(accumulator,array[length],length,array);}return accumulator;}function arraySome(array,predicate){var index=-1,length=array.length;while(++index < length) {if(predicate(array[index],index,array)){return true;}}return false;}function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index < length) {var value=array[index],current=iteratee(value);if(current != null && (computed === undefined?current === current:comparator(current,computed))){var computed=current,result=value;}}return result;}function baseFind(collection,predicate,eachFunc,retKey){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result = retKey?key:value;return false;}});return result;}function baseFindIndex(array,predicate,fromRight){var length=array.length,index=fromRight?length:-1;while(fromRight?index--:++index < length) {if(predicate(array[index],index,array)){return index;}}return -1;}function baseIndexOf(array,value,fromIndex){if(value !== value){return indexOfNaN(array,fromIndex);}var index=fromIndex - 1,length=array.length;while(++index < length) {if(array[index] === value){return index;}}return -1;}function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator = initAccum?(initAccum = false,value):iteratee(accumulator,value,index,collection);});return accumulator;}function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--) {array[length] = array[length].value;}return array;}function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index < length) {var current=iteratee(array[index]);if(current !== undefined){result = result === undefined?current:result + current;}}return result;}function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index < n) {result[index] = iteratee(index);}return result;}function baseToPairs(object,props){return arrayMap(props,function(key){return [key,object[key]];});}function baseUnary(func){return function(value){return func(value);};}function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index < length && baseIndexOf(chrSymbols,strSymbols[index],0) > -1) {}return index;}function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index-- && baseIndexOf(chrSymbols,strSymbols[index],0) > -1) {}return index;}function checkGlobal(value){return value && value.Object === Object?value:null;}function compareAscending(value,other){if(value !== other){var valIsNull=value === null,valIsUndef=value === undefined,valIsReflexive=value === value;var othIsNull=other === null,othIsUndef=other === undefined,othIsReflexive=other === other;if(value > other && !othIsNull || !valIsReflexive || valIsNull && !othIsUndef && othIsReflexive || valIsUndef && othIsReflexive){return 1;}if(value < other && !valIsNull || !othIsReflexive || othIsNull && !valIsUndef && valIsReflexive || othIsUndef && valIsReflexive){return -1;}}return 0;}function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index < length) {var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index >= ordersLength){return result;}var order=orders[index];return result * (order == "desc"?-1:1);}}return object.index - other.index;}function deburrLetter(letter){return deburredLetters[letter];}function escapeHtmlChar(chr){return htmlEscapes[chr];}function escapeStringChar(chr){return "\\" + stringEscapes[chr];}function indexOfNaN(array,fromIndex,fromRight){var length=array.length,index=fromIndex + (fromRight?0:-1);while(fromRight?index--:++index < length) {var other=array[index];if(other !== other){return index;}}return -1;}function isHostObject(value){var result=false;if(value != null && typeof value.toString != "function"){try{result = !!(value + "");}catch(e) {}}return result;}function isIndex(value,length){value = typeof value == "number" || reIsUint.test(value)?+value:-1;length = length == null?MAX_SAFE_INTEGER:length;return value > -1 && value % 1 == 0 && value < length;}function iteratorToArray(iterator){var data,result=[];while(!(data = iterator.next()).done) {result.push(data.value);}return result;}function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index] = [key,value];});return result;}function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=-1,result=[];while(++index < length) {if(array[index] === placeholder){array[index] = PLACEHOLDER;result[++resIndex] = index;}}return result;}function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index] = value;});return result;}function stringSize(string){if(!(string && reHasComplexSymbol.test(string))){return string.length;}var result=reComplexSymbol.lastIndex = 0;while(reComplexSymbol.test(string)) {result++;}return result;}function stringToArray(string){return string.match(reComplexSymbol);}function unescapeHtmlChar(chr){return htmlUnescapes[chr];}function runInContext(context){context = context?_.defaults({},context,_.pick(root,contextProps)):root;var Date=context.Date,Error=context.Error,Math=context.Math,RegExp=context.RegExp,TypeError=context.TypeError;var arrayProto=context.Array.prototype,objectProto=context.Object.prototype;var funcToString=context.Function.prototype.toString;var hasOwnProperty=objectProto.hasOwnProperty;var idCounter=0;var objectCtorString=funcToString.call(Object);var objectToString=objectProto.toString;var oldDash=root._;var reIsNative=RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?") + "$");var Reflect=context.Reflect,Symbol=context.Symbol,Uint8Array=context.Uint8Array,clearTimeout=context.clearTimeout,enumerate=Reflect?Reflect.enumerate:undefined,getPrototypeOf=Object.getPrototypeOf,getOwnPropertySymbols=Object.getOwnPropertySymbols,iteratorSymbol=typeof (iteratorSymbol = Symbol && Symbol.iterator) == "symbol"?iteratorSymbol:undefined,propertyIsEnumerable=objectProto.propertyIsEnumerable,setTimeout=context.setTimeout,splice=arrayProto.splice;var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=Object.keys,nativeMax=Math.max,nativeMin=Math.min,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;var Map=getNative(context,"Map"),Set=getNative(context,"Set"),WeakMap=getNative(context,"WeakMap"),nativeCreate=getNative(Object,"create");var metaMap=WeakMap && new WeakMap();var mapCtorString=Map?funcToString.call(Map):"",setCtorString=Set?funcToString.call(Set):"";var symbolProto=Symbol?Symbol.prototype:undefined,symbolValueOf=Symbol?symbolProto.valueOf:undefined,symbolToString=Symbol?symbolProto.toString:undefined;var realNames={};function lodash(value){if(isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,"__wrapped__")){return wrapperClone(value);}}return new LodashWrapper(value);}function baseLodash(){}function LodashWrapper(value,chainAll){this.__wrapped__ = value;this.__actions__ = [];this.__chain__ = !!chainAll;this.__index__ = 0;this.__values__ = undefined;}lodash.templateSettings = {escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:lodash}};function LazyWrapper(value){this.__wrapped__ = value;this.__actions__ = [];this.__dir__ = 1;this.__filtered__ = false;this.__iteratees__ = [];this.__takeCount__ = MAX_ARRAY_LENGTH;this.__views__ = [];}function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__ = copyArray(this.__actions__);result.__dir__ = this.__dir__;result.__filtered__ = this.__filtered__;result.__iteratees__ = copyArray(this.__iteratees__);result.__takeCount__ = this.__takeCount__;result.__views__ = copyArray(this.__views__);return result;}function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__ = -1;result.__filtered__ = true;}else {result = this.clone();result.__dir__ *= -1;}return result;}function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir < 0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end - start,index=isRight?end:start - 1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length){return baseWrapperValue(array,this.__actions__);}var result=[];outer: while(length-- && resIndex < takeCount) {index += dir;var iterIndex=-1,value=array[index];while(++iterIndex < iterLength) {var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type == LAZY_MAP_FLAG){value = computed;}else if(!computed){if(type == LAZY_FILTER_FLAG){continue outer;}else {break outer;}}}result[resIndex++] = value;}return result;}function Hash(){}function hashDelete(hash,key){return hashHas(hash,key) && delete hash[key];}function hashGet(hash,key){if(nativeCreate){var result=hash[key];return result === HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(hash,key)?hash[key]:undefined;}function hashHas(hash,key){return nativeCreate?hash[key] !== undefined:hasOwnProperty.call(hash,key);}function hashSet(hash,key,value){hash[key] = nativeCreate && value === undefined?HASH_UNDEFINED:value;}function MapCache(values){var index=-1,length=values?values.length:0;this.clear();while(++index < length) {var entry=values[index];this.set(entry[0],entry[1]);}}function mapClear(){this.__data__ = {hash:new Hash(),map:Map?new Map():[],string:new Hash()};}function mapDelete(key){var data=this.__data__;if(isKeyable(key)){return hashDelete(typeof key == "string"?data.string:data.hash,key);}return Map?data.map["delete"](key):assocDelete(data.map,key);}function mapGet(key){var data=this.__data__;if(isKeyable(key)){return hashGet(typeof key == "string"?data.string:data.hash,key);}return Map?data.map.get(key):assocGet(data.map,key);}function mapHas(key){var data=this.__data__;if(isKeyable(key)){return hashHas(typeof key == "string"?data.string:data.hash,key);}return Map?data.map.has(key):assocHas(data.map,key);}function mapSet(key,value){var data=this.__data__;if(isKeyable(key)){hashSet(typeof key == "string"?data.string:data.hash,key,value);}else if(Map){data.map.set(key,value);}else {assocSet(data.map,key,value);}return this;}function SetCache(values){var index=-1,length=values?values.length:0;this.__data__ = new MapCache();while(++index < length) {this.push(values[index]);}}function cacheHas(cache,value){var map=cache.__data__;if(isKeyable(value)){var data=map.__data__,hash=typeof value == "string"?data.string:data.hash;return hash[value] === HASH_UNDEFINED;}return map.has(value);}function cachePush(value){var map=this.__data__;if(isKeyable(value)){var data=map.__data__,hash=typeof value == "string"?data.string:data.hash;hash[value] = HASH_UNDEFINED;}else {map.set(value,HASH_UNDEFINED);}}function Stack(values){var index=-1,length=values?values.length:0;this.clear();while(++index < length) {var entry=values[index];this.set(entry[0],entry[1]);}}function stackClear(){this.__data__ = {array:[],map:null};}function stackDelete(key){var data=this.__data__,array=data.array;return array?assocDelete(array,key):data.map["delete"](key);}function stackGet(key){var data=this.__data__,array=data.array;return array?assocGet(array,key):data.map.get(key);}function stackHas(key){var data=this.__data__,array=data.array;return array?assocHas(array,key):data.map.has(key);}function stackSet(key,value){var data=this.__data__,array=data.array;if(array){if(array.length < LARGE_ARRAY_SIZE - 1){assocSet(array,key,value);}else {data.array = null;data.map = new MapCache(array);}}var map=data.map;if(map){map.set(key,value);}return this;}function assocDelete(array,key){var index=assocIndexOf(array,key);if(index < 0){return false;}var lastIndex=array.length - 1;if(index == lastIndex){array.pop();}else {splice.call(array,index,1);}return true;}function assocGet(array,key){var index=assocIndexOf(array,key);return index < 0?undefined:array[index][1];}function assocHas(array,key){return assocIndexOf(array,key) > -1;}function assocIndexOf(array,key){var length=array.length;while(length--) {if(eq(array[length][0],key)){return length;}}return -1;}function assocSet(array,key,value){var index=assocIndexOf(array,key);if(index < 0){array.push([key,value]);}else {array[index][1] = value;}}function assignInDefaults(objValue,srcValue,key,object){if(objValue === undefined || eq(objValue,objectProto[key]) && !hasOwnProperty.call(object,key)){return srcValue;}return objValue;}function assignMergeValue(object,key,value){if(value !== undefined && !eq(object[key],value) || typeof key == "number" && value === undefined && !(key in object)){object[key] = value;}}function assignValue(object,key,value){var objValue=object[key];if(!eq(objValue,value) || eq(objValue,objectProto[key]) && !hasOwnProperty.call(object,key) || value === undefined && !(key in object)){object[key] = value;}}function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}function baseAssign(object,source){return object && copyObject(source,keys(source),object);}function baseAt(object,paths){var index=-1,isNil=object == null,length=paths.length,result=Array(length);while(++index < length) {result[index] = isNil?undefined:get(object,paths[index]);}return result;}function baseClamp(number,lower,upper){if(number === number){if(upper !== undefined){number = number <= upper?number:upper;}if(lower !== undefined){number = number >= lower?number:lower;}}return number;}function baseClone(value,isDeep,customizer,key,object,stack){var result;if(customizer){result = object?customizer(value,key,object,stack):customizer(value);}if(result !== undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result = initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else {var tag=getTag(value),isFunc=tag == funcTag || tag == genTag;if(tag == objectTag || tag == argsTag || isFunc && !object){if(isHostObject(value)){return object?value:{};}result = initCloneObject(isFunc?{}:value);if(!isDeep){return copySymbols(value,baseAssign(result,value));}}else {return cloneableTags[tag]?initCloneByTag(value,tag,isDeep):object?value:{};}}stack || (stack = new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);(isArr?arrayEach:baseForOwn)(value,function(subValue,key){assignValue(result,key,baseClone(subValue,isDeep,customizer,key,value,stack));});return isArr?result:copySymbols(value,result);}function baseConforms(source){var props=keys(source),length=props.length;return function(object){if(object == null){return !length;}var index=length;while(index--) {var key=props[index],predicate=source[key],value=object[key];if(value === undefined && !(key in Object(object)) || !predicate(value)){return false;}}return true;};}var baseCreate=(function(){function object(){}return function(prototype){if(isObject(prototype)){object.prototype = prototype;var result=new object();object.prototype = undefined;}return result || {};};})();function baseDelay(func,wait,args){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined,args);},wait);}function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values = arrayMap(values,baseUnary(iteratee));}if(comparator){includes = arrayIncludesWith;isCommon = false;}else if(values.length >= LARGE_ARRAY_SIZE){includes = cacheHas;isCommon = false;values = new SetCache(values);}outer: while(++index < length) {var value=array[index],computed=iteratee?iteratee(value):value;if(isCommon && computed === computed){var valuesIndex=valuesLength;while(valuesIndex--) {if(values[valuesIndex] === computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}var baseEach=createBaseEach(baseForOwn);var baseEachRight=createBaseEach(baseForOwnRight,true);function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result = !!predicate(value,index,collection);return result;});return result;}function baseFill(array,value,start,end){var length=array.length;start = toInteger(start);if(start < 0){start = -start > length?0:length + start;}end = end === undefined || end > length?length:toInteger(end);if(end < 0){end += length;}end = start > end?0:toLength(end);while(start < end) {array[start++] = value;}return array;}function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}function baseFlatten(array,isDeep,isStrict,result){result || (result = []);var index=-1,length=array.length;while(++index < length) {var value=array[index];if(isArrayLikeObject(value) && (isStrict || isArray(value) || isArguments(value))){if(isDeep){baseFlatten(value,isDeep,isStrict,result);}else {arrayPush(result,value);}}else if(!isStrict){result[result.length] = value;}}return result;}var baseFor=createBaseFor();var baseForRight=createBaseFor(true);function baseForIn(object,iteratee){return object == null?object:baseFor(object,iteratee,keysIn);}function baseForOwn(object,iteratee){return object && baseFor(object,iteratee,keys);}function baseForOwnRight(object,iteratee){return object && baseForRight(object,iteratee,keys);}function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}function baseGet(object,path){path = isKey(path,object)?[path + ""]:baseToPath(path);var index=0,length=path.length;while(object != null && index < length) {object = object[path[index++]];}return index && index == length?object:undefined;}function baseHas(object,key){return hasOwnProperty.call(object,key) || typeof object == "object" && key in object && getPrototypeOf(object) === null;}function baseHasIn(object,key){return key in Object(object);}function baseInRange(number,start,end){return number >= nativeMin(start,end) && number < nativeMax(start,end);}function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),result=[];while(othIndex--) {var array=arrays[othIndex];if(othIndex && iteratee){array = arrayMap(array,baseUnary(iteratee));}caches[othIndex] = !comparator && (iteratee || array.length >= 120)?new SetCache(othIndex && array):undefined;}array = arrays[0];var index=-1,length=array.length,seen=caches[0];outer: while(++index < length) {var value=array[index],computed=iteratee?iteratee(value):value;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){var othIndex=othLength;while(--othIndex) {var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}function baseInvoke(object,path,args){if(!isKey(path,object)){path = baseToPath(path);object = parent(object,path);path = last(path);}var func=object == null?object:object[path];return func == null?undefined:apply(func,object,args);}function baseIsEqual(value,other,customizer,bitmask,stack){if(value === other){return true;}if(value == null || other == null || !isObject(value) && !isObjectLike(other)){return value !== value && other !== other;}return baseIsEqualDeep(value,other,baseIsEqual,customizer,bitmask,stack);}function baseIsEqualDeep(object,other,equalFunc,customizer,bitmask,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=arrayTag,othTag=arrayTag;if(!objIsArr){objTag = getTag(object);if(objTag == argsTag){objTag = objectTag;}else if(objTag != objectTag){objIsArr = isTypedArray(object);}}if(!othIsArr){othTag = getTag(other);if(othTag == argsTag){othTag = objectTag;}else if(othTag != objectTag){othIsArr = isTypedArray(other);}}var objIsObj=objTag == objectTag && !isHostObject(object),othIsObj=othTag == objectTag && !isHostObject(other),isSameTag=objTag == othTag;if(isSameTag && !(objIsArr || objIsObj)){return equalByTag(object,other,objTag,equalFunc,customizer,bitmask);}var isPartial=bitmask & PARTIAL_COMPARE_FLAG;if(!isPartial){var objIsWrapped=objIsObj && hasOwnProperty.call(object,"__wrapped__"),othIsWrapped=othIsObj && hasOwnProperty.call(other,"__wrapped__");if(objIsWrapped || othIsWrapped){return equalFunc(objIsWrapped?object.value():object,othIsWrapped?other.value():other,customizer,bitmask,stack);}}if(!isSameTag){return false;}stack || (stack = new Stack());return (objIsArr?equalArrays:equalObjects)(object,other,equalFunc,customizer,bitmask,stack);}function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object == null){return !length;}object = Object(object);while(index--) {var data=matchData[index];if(noCustomizer && data[2]?data[1] !== object[data[0]]:!(data[0] in object)){return false;}}while(++index < length) {data = matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer && data[2]){if(objValue === undefined && !(key in object)){return false;}}else {var stack=new Stack(),result=customizer?customizer(objValue,srcValue,key,object,source,stack):undefined;if(!(result === undefined?baseIsEqual(srcValue,objValue,customizer,UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG,stack):result)){return false;}}}return true;}function baseIteratee(value){var type=typeof value;if(type == "function"){return value;}if(value == null){return identity;}if(type == "object"){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}function baseKeys(object){return nativeKeys(Object(object));}function baseKeysIn(object){object = object == null?object:Object(object);var result=[];for(var key in object) {result.push(key);}return result;}if(enumerate && !propertyIsEnumerable.call({valueOf:1},"valueOf")){baseKeysIn = function(object){return iteratorToArray(enumerate(object));};}function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index] = iteratee(value,key,collection);});return result;}function baseMatches(source){var matchData=getMatchData(source);if(matchData.length == 1 && matchData[0][2]){var key=matchData[0][0],value=matchData[0][1];return function(object){if(object == null){return false;}return object[key] === value && (value !== undefined || key in Object(object));};}return function(object){return object === source || baseIsMatch(object,source,matchData);};}function baseMatchesProperty(path,srcValue){return function(object){var objValue=get(object,path);return objValue === undefined && objValue === srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,undefined,UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);};}function baseMerge(object,source,srcIndex,customizer,stack){if(object === source){return;}var props=isArray(source) || isTypedArray(source)?undefined:keysIn(source);arrayEach(props || source,function(srcValue,key){if(props){key = srcValue;srcValue = source[key];}if(isObject(srcValue)){stack || (stack = new Stack());baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else {var newValue=customizer?customizer(object[key],srcValue,key + "",object,source,stack):undefined;if(newValue === undefined){newValue = srcValue;}assignMergeValue(object,key,newValue);}});}function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=object[key],srcValue=source[key],stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key + "",object,source,stack):undefined,isCommon=newValue === undefined;if(isCommon){newValue = srcValue;if(isArray(srcValue) || isTypedArray(srcValue)){if(isArray(objValue)){newValue = srcIndex?copyArray(objValue):objValue;}else if(isArrayLikeObject(objValue)){newValue = copyArray(objValue);}else {isCommon = false;newValue = baseClone(srcValue);}}else if(isPlainObject(srcValue) || isArguments(srcValue)){if(isArguments(objValue)){newValue = toPlainObject(objValue);}else if(!isObject(objValue) || srcIndex && isFunction(objValue)){isCommon = false;newValue = baseClone(srcValue);}else {newValue = srcIndex?baseClone(objValue):objValue;}}else {isCommon = false;}}stack.set(srcValue,newValue);if(isCommon){mergeFunc(newValue,srcValue,srcIndex,customizer,stack);}assignMergeValue(object,key,newValue);}function baseOrderBy(collection,iteratees,orders){var index=-1,toIteratee=getIteratee();iteratees = arrayMap(iteratees.length?iteratees:Array(1),function(iteratee){return toIteratee(iteratee);});var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return {criteria:criteria,index:++index,value:value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}function basePick(object,props){object = Object(object);return arrayReduce(props,function(result,key){if(key in object){result[key] = object[key];}return result;},{});}function basePickBy(object,predicate){var result={};baseForIn(object,function(value,key){if(predicate(value,key)){result[key] = value;}});return result;}function baseProperty(key){return function(object){return object == null?undefined:object[key];};}function basePropertyDeep(path){return function(object){return baseGet(object,path);};}function basePullAll(array,values){return basePullAllBy(array,values);}function basePullAllBy(array,values,iteratee){var index=-1,length=values.length,seen=array;if(iteratee){seen = arrayMap(array,function(value){return iteratee(value);});}while(++index < length) {var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex = baseIndexOf(seen,computed,fromIndex)) > -1) {if(seen !== array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length - 1;while(length--) {var index=indexes[length];if(lastIndex == length || index != previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else if(!isKey(index,array)){var path=baseToPath(index),object=parent(array,path);if(object != null){delete object[last(path)];}}else {delete array[index];}}}return array;}function baseRandom(lower,upper){return lower + nativeFloor(nativeRandom() * (upper - lower + 1));}function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end - start) / (step || 1)),0),result=Array(length);while(length--) {result[fromRight?length:++index] = start;start += step;}return result;}function baseSet(object,path,value,customizer){path = isKey(path,object)?[path + ""]:baseToPath(path);var index=-1,length=path.length,lastIndex=length - 1,nested=object;while(nested != null && ++index < length) {var key=path[index];if(isObject(nested)){var newValue=value;if(index != lastIndex){var objValue=nested[key];newValue = customizer?customizer(objValue,key,nested):undefined;if(newValue === undefined){newValue = objValue == null?isIndex(path[index + 1])?[]:{}:objValue;}}assignValue(nested,key,newValue);}nested = nested[key];}return object;}var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};function baseSlice(array,start,end){var index=-1,length=array.length;if(start < 0){start = -start > length?0:length + start;}end = end > length?length:end;if(end < 0){end += length;}length = start > end?0:end - start >>> 0;start >>>= 0;var result=Array(length);while(++index < length) {result[index] = array[index + start];}return result;}function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result = predicate(value,index,collection);return !result;});return !!result;}function baseSortedIndex(array,value,retHighest){var low=0,high=array?array.length:low;if(typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH){while(low < high) {var mid=low + high >>> 1,computed=array[mid];if((retHighest?computed <= value:computed < value) && computed !== null){low = mid + 1;}else {high = mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}function baseSortedIndexBy(array,value,iteratee,retHighest){value = iteratee(value);var low=0,high=array?array.length:0,valIsNaN=value !== value,valIsNull=value === null,valIsUndef=value === undefined;while(low < high) {var mid=nativeFloor((low + high) / 2),computed=iteratee(array[mid]),isDef=computed !== undefined,isReflexive=computed === computed;if(valIsNaN){var setLow=isReflexive || retHighest;}else if(valIsNull){setLow = isReflexive && isDef && (retHighest || computed != null);}else if(valIsUndef){setLow = isReflexive && (retHighest || isDef);}else if(computed == null){setLow = false;}else {setLow = retHighest?computed <= value:computed < value;}if(setLow){low = mid + 1;}else {high = mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}function baseSortedUniq(array){return baseSortedUniqBy(array);}function baseSortedUniqBy(array,iteratee){var index=0,length=array.length,value=array[0],computed=iteratee?iteratee(value):value,seen=computed,resIndex=0,result=[value];while(++index < length) {value = array[index],computed = iteratee?iteratee(value):value;if(!eq(computed,seen)){seen = computed;result[++resIndex] = value;}}return result;}function baseToPath(value){return isArray(value)?value:stringToPath(value);}function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon = false;includes = arrayIncludesWith;}else if(length >= LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon = false;includes = cacheHas;seen = new SetCache();}else {seen = iteratee?[]:result;}outer: while(++index < length) {var value=array[index],computed=iteratee?iteratee(value):value;if(isCommon && computed === computed){var seenIndex=seen.length;while(seenIndex--) {if(seen[seenIndex] === computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen !== result){seen.push(computed);}result.push(value);}}return result;}function baseUnset(object,path){path = isKey(path,object)?[path + ""]:baseToPath(path);object = parent(object,path);var key=last(path);return object != null && has(object,key)?delete object[key]:true;}function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index < length) && predicate(array[index],index,array)) {}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index + 1:length):baseSlice(array,fromRight?index + 1:0,fromRight?length:index);}function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result = result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}function baseXor(arrays,iteratee,comparator){var index=-1,length=arrays.length;while(++index < length) {var result=result?arrayPush(baseDifference(result,arrays[index],iteratee,comparator),baseDifference(arrays[index],result,iteratee,comparator)):arrays[index];}return result && result.length?baseUniq(result,iteratee,comparator):[];}function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index < length) {assignFunc(result,props[index],index < valsLength?values[index]:undefined);}return result;}function cloneBuffer(buffer){var Ctor=buffer.constructor,result=new Ctor(buffer.byteLength),view=new Uint8Array(result);view.set(new Uint8Array(buffer));return result;}function cloneMap(map){var Ctor=map.constructor;return arrayReduce(mapToArray(map),addMapEntry,new Ctor());}function cloneRegExp(regexp){var Ctor=regexp.constructor,result=new Ctor(regexp.source,reFlags.exec(regexp));result.lastIndex = regexp.lastIndex;return result;}function cloneSet(set){var Ctor=set.constructor;return arrayReduce(setToArray(set),addSetEntry,new Ctor());}function cloneSymbol(symbol){return Symbol?Object(symbolValueOf.call(symbol)):{};}function cloneTypedArray(typedArray,isDeep){var buffer=typedArray.buffer,Ctor=typedArray.constructor;return new Ctor(isDeep?cloneBuffer(buffer):buffer,typedArray.byteOffset,typedArray.length);}function composeArgs(args,partials,holders){var holdersLength=holders.length,argsIndex=-1,argsLength=nativeMax(args.length - holdersLength,0),leftIndex=-1,leftLength=partials.length,result=Array(leftLength + argsLength);while(++leftIndex < leftLength) {result[leftIndex] = partials[leftIndex];}while(++argsIndex < holdersLength) {result[holders[argsIndex]] = args[argsIndex];}while(argsLength--) {result[leftIndex++] = args[argsIndex++];}return result;}function composeArgsRight(args,partials,holders){var holdersIndex=-1,holdersLength=holders.length,argsIndex=-1,argsLength=nativeMax(args.length - holdersLength,0),rightIndex=-1,rightLength=partials.length,result=Array(argsLength + rightLength);while(++argsIndex < argsLength) {result[argsIndex] = args[argsIndex];}var offset=argsIndex;while(++rightIndex < rightLength) {result[offset + rightIndex] = partials[rightIndex];}while(++holdersIndex < holdersLength) {result[offset + holders[holdersIndex]] = args[argsIndex++];}return result;}function copyArray(source,array){var index=-1,length=source.length;array || (array = Array(length));while(++index < length) {array[index] = source[index];}return array;}function copyObject(source,props,object){return copyObjectWith(source,props,object);}function copyObjectWith(source,props,object,customizer){object || (object = {});var index=-1,length=props.length;while(++index < length) {var key=props[index],newValue=customizer?customizer(object[key],source[key],key,object,source):source[key];assignValue(object,key,newValue);}return object;}function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee),accumulator);};}function createAssigner(assigner){return rest(function(object,sources){var index=-1,length=sources.length,customizer=length > 1?sources[length - 1]:undefined,guard=length > 2?sources[2]:undefined;customizer = typeof customizer == "function"?(length--,customizer):undefined;if(guard && isIterateeCall(sources[0],sources[1],guard)){customizer = length < 3?undefined:customizer;length = 1;}object = Object(object);while(++index < length) {var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection == null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index < length) {if(iteratee(iterable[index],index,iterable) === false){break;}}return collection;};}function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--) {var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable) === false){break;}}return object;};}function createBaseWrapper(func,bitmask,thisArg){var isBind=bitmask & BIND_FLAG,Ctor=createCtorWrapper(func);function wrapper(){var fn=this && this !== root && this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}function createCaseFirst(methodName){return function(string){string = toString(string);var strSymbols=reHasComplexSymbol.test(string)?stringToArray(string):undefined,chr=strSymbols?strSymbols[0]:string.charAt(0),trailing=strSymbols?strSymbols.slice(1).join(""):string.slice(1);return chr[methodName]() + trailing;};}function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string)),callback,"");};}function createCtorWrapper(Ctor){return function(){var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);return isObject(result)?result:thisBinding;};}function createCurryWrapper(func,bitmask,arity){var Ctor=createCtorWrapper(func);function wrapper(){var length=arguments.length,index=length,args=Array(length),fn=this && this !== root && this instanceof wrapper?Ctor:func,placeholder=wrapper.placeholder;while(index--) {args[index] = arguments[index];}var holders=length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder?[]:replaceHolders(args,placeholder);length -= holders.length;return length < arity?createRecurryWrapper(func,bitmask,createHybridWrapper,placeholder,undefined,args,holders,undefined,undefined,arity - length):apply(fn,this,args);}return wrapper;}function createFlow(fromRight){return rest(function(funcs){funcs = baseFlatten(funcs);var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--) {var func=funcs[index];if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq && !wrapper && getFuncName(func) == "wrapper"){var wrapper=new LodashWrapper([],true);}}index = wrapper?index:length;while(++index < length) {func = funcs[index];var funcName=getFuncName(func),data=funcName == "wrapper"?getData(func):undefined;if(data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1){wrapper = wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else {wrapper = func.length == 1 && isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index < length) {result = funcs[index].call(this,result);}return result;};});}function createHybridWrapper(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask & ARY_FLAG,isBind=bitmask & BIND_FLAG,isBindKey=bitmask & BIND_KEY_FLAG,isCurry=bitmask & CURRY_FLAG,isCurryRight=bitmask & CURRY_RIGHT_FLAG,isFlip=bitmask & FLIP_FLAG,Ctor=isBindKey?undefined:createCtorWrapper(func);function wrapper(){var length=arguments.length,index=length,args=Array(length);while(index--) {args[index] = arguments[index];}if(partials){args = composeArgs(args,partials,holders);}if(partialsRight){args = composeArgsRight(args,partialsRight,holdersRight);}if(isCurry || isCurryRight){var placeholder=wrapper.placeholder,argsHolders=replaceHolders(args,placeholder);length -= argsHolders.length;if(length < arity){return createRecurryWrapper(func,bitmask,createHybridWrapper,placeholder,thisArg,args,argsHolders,argPos,ary,arity - length);}}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;if(argPos){args = reorder(args,argPos);}else if(isFlip && args.length > 1){args.reverse();}if(isAry && ary < args.length){args.length = ary;}if(this && this !== root && this instanceof wrapper){fn = Ctor || createCtorWrapper(fn);}return fn.apply(thisBinding,args);}return wrapper;}function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}function createOver(arrayFunc){return rest(function(iteratees){iteratees = arrayMap(baseFlatten(iteratees),getIteratee());return rest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}function createPadding(string,length,chars){length = toInteger(length);var strLength=stringSize(string);if(!length || strLength >= length){return "";}var padLength=length - strLength;chars = chars === undefined?" ":chars + "";var result=repeat(chars,nativeCeil(padLength / stringSize(chars)));return reHasComplexSymbol.test(chars)?stringToArray(result).slice(0,padLength).join(""):result.slice(0,padLength);}function createPartialWrapper(func,bitmask,thisArg,partials){var isBind=bitmask & BIND_FLAG,Ctor=createCtorWrapper(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength + argsLength),fn=this && this !== root && this instanceof wrapper?Ctor:func;while(++leftIndex < leftLength) {args[leftIndex] = partials[leftIndex];}while(argsLength--) {args[leftIndex++] = arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}function createRange(fromRight){return function(start,end,step){if(step && typeof step != "number" && isIterateeCall(start,end,step)){end = step = undefined;}start = toNumber(start);start = start === start?start:0;if(end === undefined){end = start;start = 0;}else {end = toNumber(end) || 0;}step = step === undefined?start < end?1:-1:toNumber(step) || 0;return baseRange(start,end,step,fromRight);};}function createRecurryWrapper(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask & CURRY_FLAG,newArgPos=argPos?copyArray(argPos):undefined,newsHolders=isCurry?holders:undefined,newHoldersRight=isCurry?undefined:holders,newPartials=isCurry?partials:undefined,newPartialsRight=isCurry?undefined:partials;bitmask |= isCurry?PARTIAL_FLAG:PARTIAL_RIGHT_FLAG;bitmask &= ~(isCurry?PARTIAL_RIGHT_FLAG:PARTIAL_FLAG);if(!(bitmask & CURRY_BOUND_FLAG)){bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newsHolders,newPartialsRight,newHoldersRight,newArgPos,ary,arity],result=wrapFunc.apply(undefined,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder = placeholder;return result;}function createRound(methodName){var func=Math[methodName];return function(number,precision){number = toNumber(number);precision = toInteger(precision);if(precision){var pair=(toString(number) + "e").split("e"),value=func(pair[0] + "e" + (+pair[1] + precision));pair = (toString(value) + "e").split("e");return +(pair[0] + "e" + (+pair[1] - precision));}return func(number);};}var createSet=!(Set && new Set([1,2]).size === 2)?noop:function(values){return new Set(values);};function createWrapper(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask & BIND_KEY_FLAG;if(!isBindKey && typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);partials = holders = undefined;}ary = ary === undefined?ary:nativeMax(toInteger(ary),0);arity = arity === undefined?arity:toInteger(arity);length -= holders?holders.length:0;if(bitmask & PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials = holders = undefined;}var data=isBindKey?undefined:getData(func),newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func = newData[0];bitmask = newData[1];thisArg = newData[2];partials = newData[3];holders = newData[4];arity = newData[9] = newData[9] == null?isBindKey?0:func.length:nativeMax(newData[9] - length,0);if(!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)){bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);}if(!bitmask || bitmask == BIND_FLAG){var result=createBaseWrapper(func,bitmask,thisArg);}else if(bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG){result = createCurryWrapper(func,bitmask,arity);}else if((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length){result = createPartialWrapper(func,bitmask,thisArg,partials);}else {result = createHybridWrapper.apply(undefined,newData);}var setter=data?baseSetData:setData;return setter(result,newData);}function equalArrays(array,other,equalFunc,customizer,bitmask,stack){var index=-1,isPartial=bitmask & PARTIAL_COMPARE_FLAG,isUnordered=bitmask & UNORDERED_COMPARE_FLAG,arrLength=array.length,othLength=other.length;if(arrLength != othLength && !(isPartial && othLength > arrLength)){return false;}var stacked=stack.get(array);if(stacked){return stacked == other;}var result=true;stack.set(array,other);while(++index < arrLength) {var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared !== undefined){if(compared){continue;}result = false;break;}if(isUnordered){if(!arraySome(other,function(othValue){return arrValue === othValue || equalFunc(arrValue,othValue,customizer,bitmask,stack);})){result = false;break;}}else if(!(arrValue === othValue || equalFunc(arrValue,othValue,customizer,bitmask,stack))){result = false;break;}}stack["delete"](array);return result;}function equalByTag(object,other,tag,equalFunc,customizer,bitmask){switch(tag){case arrayBufferTag:if(object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:return +object == +other;case errorTag:return object.name == other.name && object.message == other.message;case numberTag:return object != +object?other != +other:object == +other;case regexpTag:case stringTag:return object == other + "";case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask & PARTIAL_COMPARE_FLAG;convert || (convert = setToArray);return (isPartial || object.size == other.size) && equalFunc(convert(object),convert(other),customizer,bitmask | UNORDERED_COMPARE_FLAG);case symbolTag:return !!Symbol && symbolValueOf.call(object) == symbolValueOf.call(other);}return false;}function equalObjects(object,other,equalFunc,customizer,bitmask,stack){var isPartial=bitmask & PARTIAL_COMPARE_FLAG,objProps=keys(object),objLength=objProps.length,othProps=keys(other),othLength=othProps.length;if(objLength != othLength && !isPartial){return false;}var index=objLength;while(index--) {var key=objProps[index];if(!(isPartial?key in other:baseHas(other,key))){return false;}}var stacked=stack.get(object);if(stacked){return stacked == other;}var result=true;stack.set(object,other);var skipCtor=isPartial;while(++index < objLength) {key = objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}if(!(compared === undefined?objValue === othValue || equalFunc(objValue,othValue,customizer,bitmask,stack):compared)){result = false;break;}skipCtor || (skipCtor = key == "constructor");}if(result && !skipCtor){var objCtor=object.constructor,othCtor=other.constructor;if(objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)){result = false;}}stack["delete"](object);return result;}var getData=!metaMap?noop:function(func){return metaMap.get(func);};function getFuncName(func){var result=func.name + "",array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--) {var data=array[length],otherFunc=data.func;if(otherFunc == null || otherFunc == func){return data.name;}}return result;}function getIteratee(){var result=lodash.iteratee || iteratee;result = result === iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}var getLength=baseProperty("length");function getMatchData(object){var result=toPairs(object),length=result.length;while(length--) {result[length][2] = isStrictComparable(result[length][1]);}return result;}function getNative(object,key){var value=object == null?undefined:object[key];return isNative(value)?value:undefined;}var getSymbols=getOwnPropertySymbols || function(){return [];};function getTag(value){return objectToString.call(value);}if(Map && getTag(new Map()) != mapTag || Set && getTag(new Set()) != setTag){getTag = function(value){var result=objectToString.call(value),Ctor=result == objectTag?value.constructor:null,ctorString=typeof Ctor == "function"?funcToString.call(Ctor):"";if(ctorString){if(ctorString == mapCtorString){return mapTag;}if(ctorString == setCtorString){return setTag;}}return result;};}function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index < length) {var data=transforms[index],size=data.size;switch(data.type){case "drop":start += size;break;case "dropRight":end -= size;break;case "take":end = nativeMin(end,start + size);break;case "takeRight":start = nativeMax(start,end - size);break;}}return {start:start,end:end};}function hasPath(object,path,hasFunc){if(object == null){return false;}var result=hasFunc(object,path);if(!result && !isKey(path)){path = baseToPath(path);object = parent(object,path);if(object != null){path = last(path);result = hasFunc(object,path);}}var length=object?object.length:undefined;return result || !!length && isLength(length) && isIndex(path,length) && (isArray(object) || isString(object) || isArguments(object));}function initCloneArray(array){var length=array.length,result=array.constructor(length);if(length && typeof array[0] == "string" && hasOwnProperty.call(array,"index")){result.index = array.index;result.input = array.input;}return result;}function initCloneObject(object){if(isPrototype(object)){return {};}var Ctor=object.constructor;return baseCreate(isFunction(Ctor)?Ctor.prototype:undefined);}function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return cloneMap(object);case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return cloneSet(object);case symbolTag:return cloneSymbol(object);}}function indexKeys(object){var length=object?object.length:undefined;if(isLength(length) && (isArray(object) || isString(object) || isArguments(object))){return baseTimes(length,String);}return null;}function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index;if(type == "number"?isArrayLike(object) && isIndex(index,object.length):type == "string" && index in object){return eq(object[index],value);}return false;}function isKey(value,object){if(typeof value == "number"){return true;}return !isArray(value) && (reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object));}function isKeyable(value){var type=typeof value;return type == "number" || type == "boolean" || type == "string" && value !== "__proto__" || value == null;}function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other != "function" || !(funcName in LazyWrapper.prototype)){return false;}if(func === other){return true;}var data=getData(other);return !!data && func === data[0];}function isPrototype(value){var Ctor=value && value.constructor,proto=typeof Ctor == "function" && Ctor.prototype || objectProto;return value === proto;}function isStrictComparable(value){return value === value && !isObject(value);}function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask | srcBitmask,isCommon=newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);var isCombo=srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG;if(!(isCommon || isCombo)){return data;}if(srcBitmask & BIND_FLAG){data[2] = source[2];newBitmask |= bitmask & BIND_FLAG?0:CURRY_BOUND_FLAG;}var value=source[3];if(value){var partials=data[3];data[3] = partials?composeArgs(partials,value,source[4]):copyArray(value);data[4] = partials?replaceHolders(data[3],PLACEHOLDER):copyArray(source[4]);}value = source[5];if(value){partials = data[5];data[5] = partials?composeArgsRight(partials,value,source[6]):copyArray(value);data[6] = partials?replaceHolders(data[5],PLACEHOLDER):copyArray(source[6]);}value = source[7];if(value){data[7] = copyArray(value);}if(srcBitmask & ARY_FLAG){data[8] = data[8] == null?source[8]:nativeMin(data[8],source[8]);}if(data[9] == null){data[9] = source[9];}data[0] = source[0];data[1] = newBitmask;return data;}function mergeDefaults(objValue,srcValue,key,object,source,stack){if(isObject(objValue) && isObject(srcValue)){stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined,mergeDefaults,stack);}return objValue;}function parent(object,path){return path.length == 1?object:get(object,baseSlice(path,0,-1));}function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--) {var index=indexes[length];array[length] = isIndex(index,arrLength)?oldArray[index]:undefined;}return array;}var setData=(function(){var count=0,lastCalled=0;return function(key,value){var stamp=now(),remaining=HOT_SPAN - (stamp - lastCalled);lastCalled = stamp;if(remaining > 0){if(++count >= HOT_COUNT){return key;}}else {count = 0;}return baseSetData(key,value);};})();function stringToPath(string){var result=[];toString(string).replace(rePropName,function(match,number,quote,string){result.push(quote?string.replace(reEscapeChar,"$1"):number || match);});return result;}function toArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}function toFunction(value){return typeof value == "function"?value:identity;}function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__ = copyArray(wrapper.__actions__);result.__index__ = wrapper.__index__;result.__values__ = wrapper.__values__;return result;}function chunk(array,size){size = nativeMax(toInteger(size),0);var length=array?array.length:0;if(!length || size < 1){return [];}var index=0,resIndex=-1,result=Array(nativeCeil(length / size));while(index < length) {result[++resIndex] = baseSlice(array,index,index += size);}return result;}function compact(array){var index=-1,length=array?array.length:0,resIndex=-1,result=[];while(++index < length) {var value=array[index];if(value){result[++resIndex] = value;}}return result;}var concat=rest(function(array,values){if(!isArray(array)){array = array == null?[]:[Object(array)];}values = baseFlatten(values);return arrayConcat(array,values);});var difference=rest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,false,true)):[];});var differenceBy=rest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee = undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,false,true),getIteratee(iteratee)):[];});var differenceWith=rest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator = undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,false,true),undefined,comparator):[];});function drop(array,n,guard){var length=array?array.length:0;if(!length){return [];}n = guard || n === undefined?1:toInteger(n);return baseSlice(array,n < 0?0:n,length);}function dropRight(array,n,guard){var length=array?array.length:0;if(!length){return [];}n = guard || n === undefined?1:toInteger(n);n = length - n;return baseSlice(array,0,n < 0?0:n);}function dropRightWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}function dropWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3),true):[];}function fill(array,value,start,end){var length=array?array.length:0;if(!length){return [];}if(start && typeof start != "number" && isIterateeCall(array,value,start)){start = 0;end = length;}return baseFill(array,value,start,end);}function findIndex(array,predicate){return array && array.length?baseFindIndex(array,getIteratee(predicate,3)):-1;}function findLastIndex(array,predicate){return array && array.length?baseFindIndex(array,getIteratee(predicate,3),true):-1;}function flatten(array){var length=array?array.length:0;return length?baseFlatten(array):[];}function flattenDeep(array){var length=array?array.length:0;return length?baseFlatten(array,true):[];}function fromPairs(pairs){var index=-1,length=pairs?pairs.length:0,result={};while(++index < length) {var pair=pairs[index];result[pair[0]] = pair[1];}return result;}function head(array){return array?array[0]:undefined;}function indexOf(array,value,fromIndex){var length=array?array.length:0;if(!length){return -1;}fromIndex = toInteger(fromIndex);if(fromIndex < 0){fromIndex = nativeMax(length + fromIndex,0);}return baseIndexOf(array,value,fromIndex);}function initial(array){return dropRight(array,1);}var intersection=rest(function(arrays){var mapped=arrayMap(arrays,toArrayLikeObject);return mapped.length && mapped[0] === arrays[0]?baseIntersection(mapped):[];});var intersectionBy=rest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,toArrayLikeObject);if(iteratee === last(mapped)){iteratee = undefined;}else {mapped.pop();}return mapped.length && mapped[0] === arrays[0]?baseIntersection(mapped,getIteratee(iteratee)):[];});var intersectionWith=rest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,toArrayLikeObject);if(comparator === last(mapped)){comparator = undefined;}else {mapped.pop();}return mapped.length && mapped[0] === arrays[0]?baseIntersection(mapped,undefined,comparator):[];});function join(array,separator){return array?nativeJoin.call(array,separator):"";}function last(array){var length=array?array.length:0;return length?array[length - 1]:undefined;}function lastIndexOf(array,value,fromIndex){var length=array?array.length:0;if(!length){return -1;}var index=length;if(fromIndex !== undefined){index = toInteger(fromIndex);index = (index < 0?nativeMax(length + index,0):nativeMin(index,length - 1)) + 1;}if(value !== value){return indexOfNaN(array,index,true);}while(index--) {if(array[index] === value){return index;}}return -1;}var pull=rest(pullAll);function pullAll(array,values){return array && array.length && values && values.length?basePullAll(array,values):array;}function pullAllBy(array,values,iteratee){return array && array.length && values && values.length?basePullAllBy(array,values,getIteratee(iteratee)):array;}var pullAt=rest(function(array,indexes){indexes = arrayMap(baseFlatten(indexes),String);var result=baseAt(array,indexes);basePullAt(array,indexes.sort(compareAscending));return result;});function remove(array,predicate){var result=[];if(!(array && array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate = getIteratee(predicate,3);while(++index < length) {var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}function reverse(array){return array?nativeReverse.call(array):array;}function slice(array,start,end){var length=array?array.length:0;if(!length){return [];}if(end && typeof end != "number" && isIterateeCall(array,start,end)){start = 0;end = length;}else {start = start == null?0:toInteger(start);end = end === undefined?length:toInteger(end);}return baseSlice(array,start,end);}function sortedIndex(array,value){return baseSortedIndex(array,value);}function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee));}function sortedIndexOf(array,value){var length=array?array.length:0;if(length){var index=baseSortedIndex(array,value);if(index < length && eq(array[index],value)){return index;}}return -1;}function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee),true);}function sortedLastIndexOf(array,value){var length=array?array.length:0;if(length){var index=baseSortedIndex(array,value,true) - 1;if(eq(array[index],value)){return index;}}return -1;}function sortedUniq(array){return array && array.length?baseSortedUniq(array):[];}function sortedUniqBy(array,iteratee){return array && array.length?baseSortedUniqBy(array,getIteratee(iteratee)):[];}function tail(array){return drop(array,1);}function take(array,n,guard){if(!(array && array.length)){return [];}n = guard || n === undefined?1:toInteger(n);return baseSlice(array,0,n < 0?0:n);}function takeRight(array,n,guard){var length=array?array.length:0;if(!length){return [];}n = guard || n === undefined?1:toInteger(n);n = length - n;return baseSlice(array,n < 0?0:n,length);}function takeRightWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}function takeWhile(array,predicate){return array && array.length?baseWhile(array,getIteratee(predicate,3)):[];}var union=rest(function(arrays){return baseUniq(baseFlatten(arrays,false,true));});var unionBy=rest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee = undefined;}return baseUniq(baseFlatten(arrays,false,true),getIteratee(iteratee));});var unionWith=rest(function(arrays){var comparator=last(arrays);if(isArrayLikeObject(comparator)){comparator = undefined;}return baseUniq(baseFlatten(arrays,false,true),undefined,comparator);});function uniq(array){return array && array.length?baseUniq(array):[];}function uniqBy(array,iteratee){return array && array.length?baseUniq(array,getIteratee(iteratee)):[];}function uniqWith(array,comparator){return array && array.length?baseUniq(array,undefined,comparator):[];}function unzip(array){if(!(array && array.length)){return [];}var length=0;array = arrayFilter(array,function(group){if(isArrayLikeObject(group)){length = nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}function unzipWith(array,iteratee){if(!(array && array.length)){return [];}var result=unzip(array);if(iteratee == null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined,group);});}var without=rest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});var xor=rest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});var xorBy=rest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee = undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee));});var xorWith=rest(function(arrays){var comparator=last(arrays);if(isArrayLikeObject(comparator)){comparator = undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);});var zip=rest(unzip);function zipObject(props,values){return baseZipObject(props || [],values || [],assignValue);}function zipObjectDeep(props,values){return baseZipObject(props || [],values || [],baseSet);}var zipWith=rest(function(arrays){var length=arrays.length,iteratee=length > 1?arrays[length - 1]:undefined;iteratee = typeof iteratee == "function"?(arrays.pop(),iteratee):undefined;return unzipWith(arrays,iteratee);});function chain(value){var result=lodash(value);result.__chain__ = true;return result;}function tap(value,interceptor){interceptor(value);return value;}function thru(value,interceptor){return interceptor(value);}var wrapperAt=rest(function(paths){paths = baseFlatten(paths);var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)){return this.thru(interceptor);}value = value.slice(start,+start + (length?1:0));value.__actions__.push({func:thru,args:[interceptor],thisArg:undefined});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length && !array.length){array.push(undefined);}return array;});});function wrapperChain(){return chain(this);}function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}function wrapperFlatMap(iteratee){return this.map(iteratee).flatten();}function wrapperNext(){if(this.__values__ === undefined){this.__values__ = toArray(this.value());}var done=this.__index__ >= this.__values__.length,value=done?undefined:this.__values__[this.__index__++];return {done:done,value:value};}function wrapperToIterator(){return this;}function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash) {var clone=wrapperClone(parent);clone.__index__ = 0;clone.__values__ = undefined;if(result){previous.__wrapped__ = clone;}else {result = clone;}var previous=clone;parent = parent.__wrapped__;}previous.__wrapped__ = value;return result;}function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped = new LazyWrapper(this);}wrapped = wrapped.reverse();wrapped.__actions__.push({func:thru,args:[reverse],thisArg:undefined});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}var countBy=createAggregator(function(result,value,key){hasOwnProperty.call(result,key)?++result[key]:result[key] = 1;});function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard && isIterateeCall(collection,predicate,guard)){predicate = undefined;}return func(collection,getIteratee(predicate,3));}function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}function find(collection,predicate){predicate = getIteratee(predicate,3);if(isArray(collection)){var index=baseFindIndex(collection,predicate);return index > -1?collection[index]:undefined;}return baseFind(collection,predicate,baseEach);}function findLast(collection,predicate){predicate = getIteratee(predicate,3);if(isArray(collection)){var index=baseFindIndex(collection,predicate,true);return index > -1?collection[index]:undefined;}return baseFind(collection,predicate,baseEachRight);}function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee));}function forEach(collection,iteratee){return typeof iteratee == "function" && isArray(collection)?arrayEach(collection,iteratee):baseEach(collection,toFunction(iteratee));}function forEachRight(collection,iteratee){return typeof iteratee == "function" && isArray(collection)?arrayEachRight(collection,iteratee):baseEachRight(collection,toFunction(iteratee));}var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else {result[key] = [value];}});function includes(collection,value,fromIndex,guard){collection = isArrayLike(collection)?collection:values(collection);fromIndex = fromIndex && !guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex < 0){fromIndex = nativeMax(length + fromIndex,0);}return isString(collection)?fromIndex <= length && collection.indexOf(value,fromIndex) > -1:!!length && baseIndexOf(collection,value,fromIndex) > -1;}var invokeMap=rest(function(collection,path,args){var index=-1,isFunc=typeof path == "function",isProp=isKey(path),result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){var func=isFunc?path:isProp && value != null?value[path]:undefined;result[++index] = func?apply(func,value,args):baseInvoke(value,path,args);});return result;});var keyBy=createAggregator(function(result,value,key){result[key] = value;});function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}function orderBy(collection,iteratees,orders,guard){if(collection == null){return [];}if(!isArray(iteratees)){iteratees = iteratees == null?[]:[iteratees];}orders = guard?undefined:orders;if(!isArray(orders)){orders = orders == null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return [[],[]];});function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length < 3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length < 3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;predicate = getIteratee(predicate,3);return func(collection,function(value,index,collection){return !predicate(value,index,collection);});}function sample(collection){var array=isArrayLike(collection)?collection:values(collection),length=array.length;return length > 0?array[baseRandom(0,length - 1)]:undefined;}function sampleSize(collection,n){var index=-1,result=toArray(collection),length=result.length,lastIndex=length - 1;n = baseClamp(toInteger(n),0,length);while(++index < n) {var rand=baseRandom(index,lastIndex),value=result[rand];result[rand] = result[index];result[index] = value;}result.length = n;return result;}function shuffle(collection){return sampleSize(collection,MAX_ARRAY_LENGTH);}function size(collection){if(collection == null){return 0;}if(isArrayLike(collection)){var result=collection.length;return result && isString(collection)?stringSize(collection):result;}return keys(collection).length;}function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard && isIterateeCall(collection,predicate,guard)){predicate = undefined;}return func(collection,getIteratee(predicate,3));}var sortBy=rest(function(collection,iteratees){if(collection == null){return [];}var length=iteratees.length;if(length > 1 && isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees = [];}else if(length > 2 && isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees.length = 1;}return baseOrderBy(collection,baseFlatten(iteratees),[]);});var now=Date.now;function after(n,func){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}n = toInteger(n);return function(){if(--n < 1){return func.apply(this,arguments);}};}function ary(func,n,guard){n = guard?undefined:n;n = func && n == null?func.length:n;return createWrapper(func,ARY_FLAG,undefined,undefined,undefined,undefined,n);}function before(n,func){var result;if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}n = toInteger(n);return function(){if(--n > 0){result = func.apply(this,arguments);}if(n <= 1){func = undefined;}return result;};}var bind=rest(function(func,thisArg,partials){var bitmask=BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,bind.placeholder);bitmask |= PARTIAL_FLAG;}return createWrapper(func,bitmask,thisArg,partials,holders);});var bindKey=rest(function(object,key,partials){var bitmask=BIND_FLAG | BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,bindKey.placeholder);bitmask |= PARTIAL_FLAG;}return createWrapper(key,bitmask,object,partials,holders);});function curry(func,arity,guard){arity = guard?undefined:arity;var result=createWrapper(func,CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder = curry.placeholder;return result;}function curryRight(func,arity,guard){arity = guard?undefined:arity;var result=createWrapper(func,CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder = curryRight.placeholder;return result;}function debounce(func,wait,options){var args,maxTimeoutId,result,stamp,thisArg,timeoutId,trailingCall,lastCalled=0,leading=false,maxWait=false,trailing=true;if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}wait = toNumber(wait) || 0;if(isObject(options)){leading = !!options.leading;maxWait = "maxWait" in options && nativeMax(toNumber(options.maxWait) || 0,wait);trailing = "trailing" in options?!!options.trailing:trailing;}function cancel(){if(timeoutId){clearTimeout(timeoutId);}if(maxTimeoutId){clearTimeout(maxTimeoutId);}lastCalled = 0;args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;}function complete(isCalled,id){if(id){clearTimeout(id);}maxTimeoutId = timeoutId = trailingCall = undefined;if(isCalled){lastCalled = now();result = func.apply(thisArg,args);if(!timeoutId && !maxTimeoutId){args = thisArg = undefined;}}}function delayed(){var remaining=wait - (now() - stamp);if(remaining <= 0 || remaining > wait){complete(trailingCall,maxTimeoutId);}else {timeoutId = setTimeout(delayed,remaining);}}function flush(){if(timeoutId && trailingCall || maxTimeoutId && trailing){result = func.apply(thisArg,args);}cancel();return result;}function maxDelayed(){complete(trailing,timeoutId);}function debounced(){args = arguments;stamp = now();thisArg = this;trailingCall = trailing && (timeoutId || !leading);if(maxWait === false){var leadingCall=leading && !timeoutId;}else {if(!maxTimeoutId && !leading){lastCalled = stamp;}var remaining=maxWait - (stamp - lastCalled),isCalled=remaining <= 0 || remaining > maxWait;if(isCalled){if(maxTimeoutId){maxTimeoutId = clearTimeout(maxTimeoutId);}lastCalled = stamp;result = func.apply(thisArg,args);}else if(!maxTimeoutId){maxTimeoutId = setTimeout(maxDelayed,remaining);}}if(isCalled && timeoutId){timeoutId = clearTimeout(timeoutId);}else if(!timeoutId && wait !== maxWait){timeoutId = setTimeout(delayed,wait);}if(leadingCall){isCalled = true;result = func.apply(thisArg,args);}if(isCalled && !timeoutId && !maxTimeoutId){args = thisArg = undefined;}return result;}debounced.cancel = cancel;debounced.flush = flush;return debounced;}var defer=rest(function(func,args){return baseDelay(func,1,args);});var delay=rest(function(func,wait,args){return baseDelay(func,toNumber(wait) || 0,args);});function flip(func){return createWrapper(func,FLIP_FLAG);}function memoize(func,resolver){if(typeof func != "function" || resolver && typeof resolver != "function"){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache = cache.set(key,result);return result;};memoized.cache = new memoize.Cache();return memoized;}function negate(predicate){if(typeof predicate != "function"){throw new TypeError(FUNC_ERROR_TEXT);}return function(){return !predicate.apply(this,arguments);};}function once(func){return before(2,func);}var overArgs=rest(function(func,transforms){transforms = arrayMap(baseFlatten(transforms),getIteratee());var funcsLength=transforms.length;return rest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index < length) {args[index] = transforms[index].call(this,args[index]);}return apply(func,this,args);});});var partial=rest(function(func,partials){var holders=replaceHolders(partials,partial.placeholder);return createWrapper(func,PARTIAL_FLAG,undefined,partials,holders);});var partialRight=rest(function(func,partials){var holders=replaceHolders(partials,partialRight.placeholder);return createWrapper(func,PARTIAL_RIGHT_FLAG,undefined,partials,holders);});var rearg=rest(function(func,indexes){return createWrapper(func,REARG_FLAG,undefined,undefined,undefined,baseFlatten(indexes));});function rest(func,start){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}start = nativeMax(start === undefined?func.length - 1:toInteger(start),0);return function(){var args=arguments,index=-1,length=nativeMax(args.length - start,0),array=Array(length);while(++index < length) {array[index] = args[start + index];}switch(start){case 0:return func.call(this,array);case 1:return func.call(this,args[0],array);case 2:return func.call(this,args[0],args[1],array);}var otherArgs=Array(start + 1);index = -1;while(++index < start) {otherArgs[index] = args[index];}otherArgs[start] = array;return apply(func,this,otherArgs);};}function spread(func,start){if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}start = start === undefined?0:nativeMax(toInteger(start),0);return rest(function(args){var array=args[start],otherArgs=args.slice(0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func != "function"){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading = "leading" in options?!!options.leading:leading;trailing = "trailing" in options?!!options.trailing:trailing;}return debounce(func,wait,{leading:leading,maxWait:wait,trailing:trailing});}function unary(func){return ary(func,1);}function wrap(value,wrapper){wrapper = wrapper == null?identity:wrapper;return partial(wrapper,value);}function clone(value){return baseClone(value);}function cloneWith(value,customizer){return baseClone(value,false,customizer);}function cloneDeep(value){return baseClone(value,true);}function cloneDeepWith(value,customizer){return baseClone(value,true,customizer);}function eq(value,other){return value === other || value !== value && other !== other;}function gt(value,other){return value > other;}function gte(value,other){return value >= other;}function isArguments(value){return isArrayLikeObject(value) && hasOwnProperty.call(value,"callee") && (!propertyIsEnumerable.call(value,"callee") || objectToString.call(value) == argsTag);}var isArray=Array.isArray;function isArrayLike(value){return value != null && !(typeof value == "function" && isFunction(value)) && isLength(getLength(value));}function isArrayLikeObject(value){return isObjectLike(value) && isArrayLike(value);}function isBoolean(value){return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;}function isDate(value){return isObjectLike(value) && objectToString.call(value) == dateTag;}function isElement(value){return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);}function isEmpty(value){if(isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value))){return !value.length;}for(var key in value) {if(hasOwnProperty.call(value,key)){return false;}}return true;}function isEqual(value,other){return baseIsEqual(value,other);}function isEqualWith(value,other,customizer){customizer = typeof customizer == "function"?customizer:undefined;var result=customizer?customizer(value,other):undefined;return result === undefined?baseIsEqual(value,other,customizer):!!result;}function isError(value){return isObjectLike(value) && typeof value.message == "string" && objectToString.call(value) == errorTag;}function isFinite(value){return typeof value == "number" && nativeIsFinite(value);}function isFunction(value){var tag=isObject(value)?objectToString.call(value):"";return tag == funcTag || tag == genTag;}function isInteger(value){return typeof value == "number" && value == toInteger(value);}function isLength(value){return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;}function isObject(value){var type=typeof value;return !!value && (type == "object" || type == "function");}function isObjectLike(value){return !!value && typeof value == "object";}function isMatch(object,source){return object === source || baseIsMatch(object,source,getMatchData(source));}function isMatchWith(object,source,customizer){customizer = typeof customizer == "function"?customizer:undefined;return baseIsMatch(object,source,getMatchData(source),customizer);}function isNaN(value){return isNumber(value) && value != +value;}function isNative(value){if(value == null){return false;}if(isFunction(value)){return reIsNative.test(funcToString.call(value));}return isObjectLike(value) && (isHostObject(value)?reIsNative:reIsHostCtor).test(value);}function isNull(value){return value === null;}function isNil(value){return value == null;}function isNumber(value){return typeof value == "number" || isObjectLike(value) && objectToString.call(value) == numberTag;}function isPlainObject(value){if(!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)){return false;}var proto=objectProto;if(typeof value.constructor == "function"){proto = getPrototypeOf(value);}if(proto === null){return true;}var Ctor=proto.constructor;return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;}function isRegExp(value){return isObject(value) && objectToString.call(value) == regexpTag;}function isSafeInteger(value){return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;}function isString(value){return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;}function isSymbol(value){return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;}function isTypedArray(value){return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];}function isUndefined(value){return value === undefined;}function lt(value,other){return value < other;}function lte(value,other){return value <= other;}function toArray(value){if(!value){return [];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(iteratorSymbol && value[iteratorSymbol]){return iteratorToArray(value[iteratorSymbol]());}var tag=getTag(value),func=tag == mapTag?mapToArray:tag == setTag?setToArray:values;return func(value);}function toInteger(value){if(!value){return value === 0?value:0;}value = toNumber(value);if(value === INFINITY || value === -INFINITY){var sign=value < 0?-1:1;return sign * MAX_INTEGER;}var remainder=value % 1;return value === value?remainder?value - remainder:value:0;}function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}function toNumber(value){if(isObject(value)){var other=isFunction(value.valueOf)?value.valueOf():value;value = isObject(other)?other + "":other;}if(typeof value != "string"){return value === 0?value:+value;}value = value.replace(reTrim,"");var isBinary=reIsBinary.test(value);return isBinary || reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}function toPlainObject(value){return copyObject(value,keysIn(value));}function toSafeInteger(value){return baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER);}function toString(value){if(typeof value == "string"){return value;}if(value == null){return "";}if(isSymbol(value)){return Symbol?symbolToString.call(value):"";}var result=value + "";return result == "0" && 1 / value == -INFINITY?"-0":result;}var assign=createAssigner(function(object,source){copyObject(source,keys(source),object);});var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObjectWith(source,keysIn(source),object,customizer);});var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObjectWith(source,keys(source),object,customizer);});var at=rest(function(object,paths){return baseAt(object,baseFlatten(paths));});function create(prototype,properties){var result=baseCreate(prototype);return properties?baseAssign(result,properties):result;}var defaults=rest(function(args){args.push(undefined,assignInDefaults);return apply(assignInWith,undefined,args);});var defaultsDeep=rest(function(args){args.push(undefined,mergeDefaults);return apply(mergeWith,undefined,args);});function findKey(object,predicate){return baseFind(object,getIteratee(predicate,3),baseForOwn,true);}function findLastKey(object,predicate){return baseFind(object,getIteratee(predicate,3),baseForOwnRight,true);}function forIn(object,iteratee){return object == null?object:baseFor(object,toFunction(iteratee),keysIn);}function forInRight(object,iteratee){return object == null?object:baseForRight(object,toFunction(iteratee),keysIn);}function forOwn(object,iteratee){return object && baseForOwn(object,toFunction(iteratee));}function forOwnRight(object,iteratee){return object && baseForOwnRight(object,toFunction(iteratee));}function functions(object){return object == null?[]:baseFunctions(object,keys(object));}function functionsIn(object){return object == null?[]:baseFunctions(object,keysIn(object));}function get(object,path,defaultValue){var result=object == null?undefined:baseGet(object,path);return result === undefined?defaultValue:result;}function has(object,path){return hasPath(object,path,baseHas);}function hasIn(object,path){return hasPath(object,path,baseHasIn);}var invert=createInverter(function(result,value,key){result[value] = key;},constant(identity));var invertBy=createInverter(function(result,value,key){if(hasOwnProperty.call(result,value)){result[value].push(key);}else {result[value] = [key];}},getIteratee);var invoke=rest(baseInvoke);function keys(object){var isProto=isPrototype(object);if(!(isProto || isArrayLike(object))){return baseKeys(object);}var indexes=indexKeys(object),skipIndexes=!!indexes,result=indexes || [],length=result.length;for(var key in object) {if(baseHas(object,key) && !(skipIndexes && (key == "length" || isIndex(key,length))) && !(isProto && key == "constructor")){result.push(key);}}return result;}function keysIn(object){var index=-1,isProto=isPrototype(object),props=baseKeysIn(object),propsLength=props.length,indexes=indexKeys(object),skipIndexes=!!indexes,result=indexes || [],length=result.length;while(++index < propsLength) {var key=props[index];if(!(skipIndexes && (key == "length" || isIndex(key,length))) && !(key == "constructor" && (isProto || !hasOwnProperty.call(object,key)))){result.push(key);}}return result;}function mapKeys(object,iteratee){var result={};iteratee = getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){result[iteratee(value,key,object)] = value;});return result;}function mapValues(object,iteratee){var result={};iteratee = getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){result[key] = iteratee(value,key,object);});return result;}var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});var omit=rest(function(object,props){if(object == null){return {};}props = arrayMap(baseFlatten(props),String);return basePick(object,baseDifference(keysIn(object),props));});function omitBy(object,predicate){predicate = getIteratee(predicate,2);return basePickBy(object,function(value,key){return !predicate(value,key);});}var pick=rest(function(object,props){return object == null?{}:basePick(object,baseFlatten(props));});function pickBy(object,predicate){return object == null?{}:basePickBy(object,getIteratee(predicate,2));}function result(object,path,defaultValue){if(!isKey(path,object)){path = baseToPath(path);var result=get(object,path);object = parent(object,path);}else {result = object == null?undefined:object[path];}if(result === undefined){result = defaultValue;}return isFunction(result)?result.call(object):result;}function set(object,path,value){return object == null?object:baseSet(object,path,value);}function setWith(object,path,value,customizer){customizer = typeof customizer == "function"?customizer:undefined;return object == null?object:baseSet(object,path,value,customizer);}function toPairs(object){return baseToPairs(object,keys(object));}function toPairsIn(object){return baseToPairs(object,keysIn(object));}function transform(object,iteratee,accumulator){var isArr=isArray(object) || isTypedArray(object);iteratee = getIteratee(iteratee,4);if(accumulator == null){if(isArr || isObject(object)){var Ctor=object.constructor;if(isArr){accumulator = isArray(object)?new Ctor():[];}else {accumulator = baseCreate(isFunction(Ctor)?Ctor.prototype:undefined);}}else {accumulator = {};}}(isArr?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}function unset(object,path){return object == null?true:baseUnset(object,path);}function values(object){return object?baseValues(object,keys(object)):[];}function valuesIn(object){return object == null?baseValues(object,keysIn(object)):[];}function clamp(number,lower,upper){if(upper === undefined){upper = lower;lower = undefined;}if(upper !== undefined){upper = toNumber(upper);upper = upper === upper?upper:0;}if(lower !== undefined){lower = toNumber(lower);lower = lower === lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}function inRange(number,start,end){start = toNumber(start) || 0;if(end === undefined){end = start;start = 0;}else {end = toNumber(end) || 0;}number = toNumber(number);return baseInRange(number,start,end);}function random(lower,upper,floating){if(floating && typeof floating != "boolean" && isIterateeCall(lower,upper,floating)){upper = floating = undefined;}if(floating === undefined){if(typeof upper == "boolean"){floating = upper;upper = undefined;}else if(typeof lower == "boolean"){floating = lower;lower = undefined;}}if(lower === undefined && upper === undefined){lower = 0;upper = 1;}else {lower = toNumber(lower) || 0;if(upper === undefined){upper = lower;lower = 0;}else {upper = toNumber(upper) || 0;}}if(lower > upper){var temp=lower;lower = upper;upper = temp;}if(floating || lower % 1 || upper % 1){var rand=nativeRandom();return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))),upper);}return baseRandom(lower,upper);}var camelCase=createCompounder(function(result,word,index){word = word.toLowerCase();return result + (index?capitalize(word):word);});function capitalize(string){return upperFirst(toString(string).toLowerCase());}function deburr(string){string = toString(string);return string && string.replace(reLatin1,deburrLetter).replace(reComboMark,"");}function endsWith(string,target,position){string = toString(string);target = typeof target == "string"?target:target + "";var length=string.length;position = position === undefined?length:baseClamp(toInteger(position),0,length);position -= target.length;return position >= 0 && string.indexOf(target,position) == position;}function escape(string){string = toString(string);return string && reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}function escapeRegExp(string){string = toString(string);return string && reHasRegExpChar.test(string)?string.replace(reRegExpChar,"\\$&"):string;}var kebabCase=createCompounder(function(result,word,index){return result + (index?"-":"") + word.toLowerCase();});var lowerCase=createCompounder(function(result,word,index){return result + (index?" ":"") + word.toLowerCase();});var lowerFirst=createCaseFirst("toLowerCase");var upperFirst=createCaseFirst("toUpperCase");function pad(string,length,chars){string = toString(string);length = toInteger(length);var strLength=stringSize(string);if(!length || strLength >= length){return string;}var mid=(length - strLength) / 2,leftLength=nativeFloor(mid),rightLength=nativeCeil(mid);return createPadding("",leftLength,chars) + string + createPadding("",rightLength,chars);}function padEnd(string,length,chars){string = toString(string);return string + createPadding(string,length,chars);}function padStart(string,length,chars){string = toString(string);return createPadding(string,length,chars) + string;}function parseInt(string,radix,guard){if(guard || radix == null){radix = 0;}else if(radix){radix = +radix;}string = toString(string).replace(reTrim,"");return nativeParseInt(string,radix || (reHasHexPrefix.test(string)?16:10));}function repeat(string,n){string = toString(string);n = toInteger(n);var result="";if(!string || n < 1 || n > MAX_SAFE_INTEGER){return result;}do {if(n % 2){result += string;}n = nativeFloor(n / 2);string += string;}while(n);return result;}function replace(){var args=arguments,string=toString(args[0]);return args.length < 3?string:string.replace(args[1],args[2]);}var snakeCase=createCompounder(function(result,word,index){return result + (index?"_":"") + word.toLowerCase();});function split(string,separator,limit){return toString(string).split(separator,limit);}var startCase=createCompounder(function(result,word,index){return result + (index?" ":"") + capitalize(word);});function startsWith(string,target,position){string = toString(string);position = baseClamp(toInteger(position),0,string.length);return string.lastIndexOf(target,position) == position;}function template(string,options,guard){var settings=lodash.templateSettings;if(guard && isIterateeCall(string,options,guard)){options = undefined;}string = toString(string);options = assignInWith({},options,settings,assignInDefaults);var imports=assignInWith({},options.imports,settings.imports,assignInDefaults),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate || reNoMatch,source="__p += '";var reDelimiters=RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate?reEsTemplate:reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$","g");var sourceURL="//# sourceURL=" + ("sourceURL" in options?options.sourceURL:"lodash.templateSources[" + ++templateCounter + "]") + "\n";string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue || (interpolateValue = esTemplateValue);source += string.slice(index,offset).replace(reUnescapedString,escapeStringChar);if(escapeValue){isEscaping = true;source += "' +\n__e(" + escapeValue + ") +\n'";}if(evaluateValue){isEvaluating = true;source += "';\n" + evaluateValue + ";\n__p += '";}if(interpolateValue){source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";}index = offset + match.length;return match;});source += "';\n";var variable=options.variable;if(!variable){source = "with (obj) {\n" + source + "\n}\n";}source = (isEvaluating?source.replace(reEmptyStringLeading,""):source).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;");source = "function(" + (variable || "obj") + ") {\n" + (variable?"":"obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping?", __e = _.escape":"") + (isEvaluating?", __j = Array.prototype.join;\n" + "function print() { __p += __j.call(arguments, '') }\n":";\n") + source + "return __p\n}";var result=attempt(function(){return Function(importsKeys,sourceURL + "return " + source).apply(undefined,importsValues);});result.source = source;if(isError(result)){throw result;}return result;}function toLower(value){return toString(value).toLowerCase();}function toUpper(value){return toString(value).toUpperCase();}function trim(string,chars,guard){string = toString(string);if(!string){return string;}if(guard || chars === undefined){return string.replace(reTrim,"");}chars = chars + "";if(!chars){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars);return strSymbols.slice(charsStartIndex(strSymbols,chrSymbols),charsEndIndex(strSymbols,chrSymbols) + 1).join("");}function trimEnd(string,chars,guard){string = toString(string);if(!string){return string;}if(guard || chars === undefined){return string.replace(reTrimEnd,"");}chars = chars + "";if(!chars){return string;}var strSymbols=stringToArray(string);return strSymbols.slice(0,charsEndIndex(strSymbols,stringToArray(chars)) + 1).join("");}function trimStart(string,chars,guard){string = toString(string);if(!string){return string;}if(guard || chars === undefined){return string.replace(reTrimStart,"");}chars = chars + "";if(!chars){return string;}var strSymbols=stringToArray(string);return strSymbols.slice(charsStartIndex(strSymbols,stringToArray(chars))).join("");}function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator="separator" in options?options.separator:separator;length = "length" in options?toInteger(options.length):length;omission = "omission" in options?toString(options.omission):omission;}string = toString(string);var strLength=string.length;if(reHasComplexSymbol.test(string)){var strSymbols=stringToArray(string);strLength = strSymbols.length;}if(length >= strLength){return string;}var end=length - stringSize(omission);if(end < 1){return omission;}var result=strSymbols?strSymbols.slice(0,end).join(""):string.slice(0,end);if(separator === undefined){return result + omission;}if(strSymbols){end += result.length - end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator = RegExp(separator.source,toString(reFlags.exec(separator)) + "g");}separator.lastIndex = 0;while(match = separator.exec(substring)) {var newEnd=match.index;}result = result.slice(0,newEnd === undefined?end:newEnd);}}else if(string.indexOf(separator,end) != end){var index=result.lastIndexOf(separator);if(index > -1){result = result.slice(0,index);}}return result + omission;}function unescape(string){string = toString(string);return string && reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}var upperCase=createCompounder(function(result,word,index){return result + (index?" ":"") + word.toUpperCase();});function words(string,pattern,guard){string = toString(string);pattern = guard?undefined:pattern;if(pattern === undefined){pattern = reHasComplexWord.test(string)?reComplexWord:reBasicWord;}return string.match(pattern) || [];}var attempt=rest(function(func,args){try{return apply(func,undefined,args);}catch(e) {return isObject(e)?e:new Error(e);}});var bindAll=rest(function(object,methodNames){arrayEach(baseFlatten(methodNames),function(key){object[key] = bind(object[key],object);});return object;});function cond(pairs){var length=pairs?pairs.length:0,toIteratee=getIteratee();pairs = !length?[]:arrayMap(pairs,function(pair){if(typeof pair[1] != "function"){throw new TypeError(FUNC_ERROR_TEXT);}return [toIteratee(pair[0]),pair[1]];});return rest(function(args){var index=-1;while(++index < length) {var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}function conforms(source){return baseConforms(baseClone(source,true));}function constant(value){return function(){return value;};}var flow=createFlow();var flowRight=createFlow(true);function identity(value){return value;}function iteratee(func){return baseIteratee(typeof func == "function"?func:baseClone(func,true));}function matches(source){return baseMatches(baseClone(source,true));}function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,true));}var method=rest(function(path,args){return function(object){return baseInvoke(object,path,args);};});var methodOf=rest(function(object,args){return function(path){return baseInvoke(object,path,args);};});function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options == null && !(isObject(source) && (methodNames.length || !props.length))){options = source;source = object;object = this;methodNames = baseFunctions(source,keys(source));}var chain=isObject(options) && "chain" in options?options.chain:true,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName] = func;if(isFunc){object.prototype[methodName] = function(){var chainAll=this.__chain__;if(chain || chainAll){var result=object(this.__wrapped__),actions=result.__actions__ = copyArray(this.__actions__);actions.push({func:func,args:arguments,thisArg:object});result.__chain__ = chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}function noConflict(){if(root._ === this){root._ = oldDash;}return this;}function noop(){}function nthArg(n){n = toInteger(n);return function(){return arguments[n];};}var over=createOver(arrayMap);var overEvery=createOver(arrayEvery);var overSome=createOver(arraySome);function property(path){return isKey(path)?baseProperty(path):basePropertyDeep(path);}function propertyOf(object){return function(path){return object == null?undefined:baseGet(object,path);};}var range=createRange();var rangeRight=createRange(true);function times(n,iteratee){n = toInteger(n);if(n < 1 || n > MAX_SAFE_INTEGER){return [];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee = toFunction(iteratee);n -= MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index < n) {iteratee(index);}return result;}function toPath(value){return isArray(value)?arrayMap(value,String):stringToPath(value);}function uniqueId(prefix){var id=++idCounter;return toString(prefix) + id;}function add(augend,addend){var result;if(augend !== undefined){result = augend;}if(addend !== undefined){result = result === undefined?addend:result + addend;}return result;}var ceil=createRound("ceil");var floor=createRound("floor");function max(array){return array && array.length?baseExtremum(array,identity,gt):undefined;}function maxBy(array,iteratee){return array && array.length?baseExtremum(array,getIteratee(iteratee),gt):undefined;}function mean(array){return sum(array) / (array?array.length:0);}function min(array){return array && array.length?baseExtremum(array,identity,lt):undefined;}function minBy(array,iteratee){return array && array.length?baseExtremum(array,getIteratee(iteratee),lt):undefined;}var round=createRound("round");function subtract(minuend,subtrahend){var result;if(minuend !== undefined){result = minuend;}if(subtrahend !== undefined){result = result === undefined?subtrahend:result - subtrahend;}return result;}function sum(array){return array && array.length?baseSum(array,identity):0;}function sumBy(array,iteratee){return array && array.length?baseSum(array,getIteratee(iteratee)):0;}lodash.prototype = baseLodash.prototype;LodashWrapper.prototype = baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor = LodashWrapper;LazyWrapper.prototype = baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor = LazyWrapper;Hash.prototype = nativeCreate?nativeCreate(null):objectProto;MapCache.prototype.clear = mapClear;MapCache.prototype["delete"] = mapDelete;MapCache.prototype.get = mapGet;MapCache.prototype.has = mapHas;MapCache.prototype.set = mapSet;SetCache.prototype.push = cachePush;Stack.prototype.clear = stackClear;Stack.prototype["delete"] = stackDelete;Stack.prototype.get = stackGet;Stack.prototype.has = stackHas;Stack.prototype.set = stackSet;memoize.Cache = MapCache;lodash.after = after;lodash.ary = ary;lodash.assign = assign;lodash.assignIn = assignIn;lodash.assignInWith = assignInWith;lodash.assignWith = assignWith;lodash.at = at;lodash.before = before;lodash.bind = bind;lodash.bindAll = bindAll;lodash.bindKey = bindKey;lodash.chain = chain;lodash.chunk = chunk;lodash.compact = compact;lodash.concat = concat;lodash.cond = cond;lodash.conforms = conforms;lodash.constant = constant;lodash.countBy = countBy;lodash.create = create;lodash.curry = curry;lodash.curryRight = curryRight;lodash.debounce = debounce;lodash.defaults = defaults;lodash.defaultsDeep = defaultsDeep;lodash.defer = defer;lodash.delay = delay;lodash.difference = difference;lodash.differenceBy = differenceBy;lodash.differenceWith = differenceWith;lodash.drop = drop;lodash.dropRight = dropRight;lodash.dropRightWhile = dropRightWhile;lodash.dropWhile = dropWhile;lodash.fill = fill;lodash.filter = filter;lodash.flatMap = flatMap;lodash.flatten = flatten;lodash.flattenDeep = flattenDeep;lodash.flip = flip;lodash.flow = flow;lodash.flowRight = flowRight;lodash.fromPairs = fromPairs;lodash.functions = functions;lodash.functionsIn = functionsIn;lodash.groupBy = groupBy;lodash.initial = initial;lodash.intersection = intersection;lodash.intersectionBy = intersectionBy;lodash.intersectionWith = intersectionWith;lodash.invert = invert;lodash.invertBy = invertBy;lodash.invokeMap = invokeMap;lodash.iteratee = iteratee;lodash.keyBy = keyBy;lodash.keys = keys;lodash.keysIn = keysIn;lodash.map = map;lodash.mapKeys = mapKeys;lodash.mapValues = mapValues;lodash.matches = matches;lodash.matchesProperty = matchesProperty;lodash.memoize = memoize;lodash.merge = merge;lodash.mergeWith = mergeWith;lodash.method = method;lodash.methodOf = methodOf;lodash.mixin = mixin;lodash.negate = negate;lodash.nthArg = nthArg;lodash.omit = omit;lodash.omitBy = omitBy;lodash.once = once;lodash.orderBy = orderBy;lodash.over = over;lodash.overArgs = overArgs;lodash.overEvery = overEvery;lodash.overSome = overSome;lodash.partial = partial;lodash.partialRight = partialRight;lodash.partition = partition;lodash.pick = pick;lodash.pickBy = pickBy;lodash.property = property;lodash.propertyOf = propertyOf;lodash.pull = pull;lodash.pullAll = pullAll;lodash.pullAllBy = pullAllBy;lodash.pullAt = pullAt;lodash.range = range;lodash.rangeRight = rangeRight;lodash.rearg = rearg;lodash.reject = reject;lodash.remove = remove;lodash.rest = rest;lodash.reverse = reverse;lodash.sampleSize = sampleSize;lodash.set = set;lodash.setWith = setWith;lodash.shuffle = shuffle;lodash.slice = slice;lodash.sortBy = sortBy;lodash.sortedUniq = sortedUniq;lodash.sortedUniqBy = sortedUniqBy;lodash.split = split;lodash.spread = spread;lodash.tail = tail;lodash.take = take;lodash.takeRight = takeRight;lodash.takeRightWhile = takeRightWhile;lodash.takeWhile = takeWhile;lodash.tap = tap;lodash.throttle = throttle;lodash.thru = thru;lodash.toArray = toArray;lodash.toPairs = toPairs;lodash.toPairsIn = toPairsIn;lodash.toPath = toPath;lodash.toPlainObject = toPlainObject;lodash.transform = transform;lodash.unary = unary;lodash.union = union;lodash.unionBy = unionBy;lodash.unionWith = unionWith;lodash.uniq = uniq;lodash.uniqBy = uniqBy;lodash.uniqWith = uniqWith;lodash.unset = unset;lodash.unzip = unzip;lodash.unzipWith = unzipWith;lodash.values = values;lodash.valuesIn = valuesIn;lodash.without = without;lodash.words = words;lodash.wrap = wrap;lodash.xor = xor;lodash.xorBy = xorBy;lodash.xorWith = xorWith;lodash.zip = zip;lodash.zipObject = zipObject;lodash.zipObjectDeep = zipObjectDeep;lodash.zipWith = zipWith;lodash.extend = assignIn;lodash.extendWith = assignInWith;mixin(lodash,lodash);lodash.add = add;lodash.attempt = attempt;lodash.camelCase = camelCase;lodash.capitalize = capitalize;lodash.ceil = ceil;lodash.clamp = clamp;lodash.clone = clone;lodash.cloneDeep = cloneDeep;lodash.cloneDeepWith = cloneDeepWith;lodash.cloneWith = cloneWith;lodash.deburr = deburr;lodash.endsWith = endsWith;lodash.eq = eq;lodash.escape = escape;lodash.escapeRegExp = escapeRegExp;lodash.every = every;lodash.find = find;lodash.findIndex = findIndex;lodash.findKey = findKey;lodash.findLast = findLast;lodash.findLastIndex = findLastIndex;lodash.findLastKey = findLastKey;lodash.floor = floor;lodash.forEach = forEach;lodash.forEachRight = forEachRight;lodash.forIn = forIn;lodash.forInRight = forInRight;lodash.forOwn = forOwn;lodash.forOwnRight = forOwnRight;lodash.get = get;lodash.gt = gt;lodash.gte = gte;lodash.has = has;lodash.hasIn = hasIn;lodash.head = head;lodash.identity = identity;lodash.includes = includes;lodash.indexOf = indexOf;lodash.inRange = inRange;lodash.invoke = invoke;lodash.isArguments = isArguments;lodash.isArray = isArray;lodash.isArrayLike = isArrayLike;lodash.isArrayLikeObject = isArrayLikeObject;lodash.isBoolean = isBoolean;lodash.isDate = isDate;lodash.isElement = isElement;lodash.isEmpty = isEmpty;lodash.isEqual = isEqual;lodash.isEqualWith = isEqualWith;lodash.isError = isError;lodash.isFinite = isFinite;lodash.isFunction = isFunction;lodash.isInteger = isInteger;lodash.isLength = isLength;lodash.isMatch = isMatch;lodash.isMatchWith = isMatchWith;lodash.isNaN = isNaN;lodash.isNative = isNative;lodash.isNil = isNil;lodash.isNull = isNull;lodash.isNumber = isNumber;lodash.isObject = isObject;lodash.isObjectLike = isObjectLike;lodash.isPlainObject = isPlainObject;lodash.isRegExp = isRegExp;lodash.isSafeInteger = isSafeInteger;lodash.isString = isString;lodash.isSymbol = isSymbol;lodash.isTypedArray = isTypedArray;lodash.isUndefined = isUndefined;lodash.join = join;lodash.kebabCase = kebabCase;lodash.last = last;lodash.lastIndexOf = lastIndexOf;lodash.lowerCase = lowerCase;lodash.lowerFirst = lowerFirst;lodash.lt = lt;lodash.lte = lte;lodash.max = max;lodash.maxBy = maxBy;lodash.mean = mean;lodash.min = min;lodash.minBy = minBy;lodash.noConflict = noConflict;lodash.noop = noop;lodash.now = now;lodash.pad = pad;lodash.padEnd = padEnd;lodash.padStart = padStart;lodash.parseInt = parseInt;lodash.random = random;lodash.reduce = reduce;lodash.reduceRight = reduceRight;lodash.repeat = repeat;lodash.replace = replace;lodash.result = result;lodash.round = round;lodash.runInContext = runInContext;lodash.sample = sample;lodash.size = size;lodash.snakeCase = snakeCase;lodash.some = some;lodash.sortedIndex = sortedIndex;lodash.sortedIndexBy = sortedIndexBy;lodash.sortedIndexOf = sortedIndexOf;lodash.sortedLastIndex = sortedLastIndex;lodash.sortedLastIndexBy = sortedLastIndexBy;lodash.sortedLastIndexOf = sortedLastIndexOf;lodash.startCase = startCase;lodash.startsWith = startsWith;lodash.subtract = subtract;lodash.sum = sum;lodash.sumBy = sumBy;lodash.template = template;lodash.times = times;lodash.toInteger = toInteger;lodash.toLength = toLength;lodash.toLower = toLower;lodash.toNumber = toNumber;lodash.toSafeInteger = toSafeInteger;lodash.toString = toString;lodash.toUpper = toUpper;lodash.trim = trim;lodash.trimEnd = trimEnd;lodash.trimStart = trimStart;lodash.truncate = truncate;lodash.unescape = unescape;lodash.uniqueId = uniqueId;lodash.upperCase = upperCase;lodash.upperFirst = upperFirst;lodash.each = forEach;lodash.eachRight = forEachRight;lodash.first = head;mixin(lodash,(function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName] = func;}});return source;})(),{chain:false});lodash.VERSION = VERSION;arrayEach(["bind","bindKey","curry","curryRight","partial","partialRight"],function(methodName){lodash[methodName].placeholder = lodash;});arrayEach(["drop","take"],function(methodName,index){LazyWrapper.prototype[methodName] = function(n){var filtered=this.__filtered__;if(filtered && !index){return new LazyWrapper(this);}n = n === undefined?1:nativeMax(toInteger(n),0);var result=this.clone();if(filtered){result.__takeCount__ = nativeMin(n,result.__takeCount__);}else {result.__views__.push({size:nativeMin(n,MAX_ARRAY_LENGTH),type:methodName + (result.__dir__ < 0?"Right":"")});}return result;};LazyWrapper.prototype[methodName + "Right"] = function(n){return this.reverse()[methodName](n).reverse();};});arrayEach(["filter","map","takeWhile"],function(methodName,index){var type=index + 1,isFilter=type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName] = function(iteratee){var result=this.clone();result.__iteratees__.push({iteratee:getIteratee(iteratee,3),type:type});result.__filtered__ = result.__filtered__ || isFilter;return result;};});arrayEach(["head","last"],function(methodName,index){var takeName="take" + (index?"Right":"");LazyWrapper.prototype[methodName] = function(){return this[takeName](1).value()[0];};});arrayEach(["initial","tail"],function(methodName,index){var dropName="drop" + (index?"":"Right");LazyWrapper.prototype[methodName] = function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact = function(){return this.filter(identity);};LazyWrapper.prototype.find = function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast = function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap = rest(function(path,args){if(typeof path == "function"){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject = function(predicate){predicate = getIteratee(predicate,3);return this.filter(function(value){return !predicate(value);});};LazyWrapper.prototype.slice = function(start,end){start = toInteger(start);var result=this;if(result.__filtered__ && (start > 0 || end < 0)){return new LazyWrapper(result);}if(start < 0){result = result.takeRight(-start);}else if(start){result = result.drop(start);}if(end !== undefined){end = toInteger(end);result = end < 0?result.dropRight(-end):result.take(end - start);}return result;};LazyWrapper.prototype.takeRightWhile = function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray = function(){return this.take(MAX_ARRAY_LENGTH);};baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?"take" + (methodName == "last"?"Right":""):methodName],retUnwrapped=isTaker || /^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName] = function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy || isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker && chainAll?result[0]:result;};if(useLazy && checkIteratee && typeof iteratee == "function" && iteratee.length != 1){isLazy = useLazy = false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped && !chainAll,onlyLazy=isLazy && !isHybrid;if(!retUnwrapped && useLazy){value = onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({func:thru,args:[interceptor],thisArg:undefined});return new LodashWrapper(result,chainAll);}if(isUnwrapped && onlyLazy){return func.apply(this,args);}result = this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});arrayEach(["pop","push","shift","sort","splice","unshift"],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?"tap":"thru",retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName] = function(){var args=arguments;if(retUnwrapped && !this.__chain__){return func.apply(this.value(),args);}return this[chainName](function(value){return func.apply(value,args);});};});baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name + "",names=realNames[key] || (realNames[key] = []);names.push({name:methodName,func:lodashFunc});}});realNames[createHybridWrapper(undefined,BIND_KEY_FLAG).name] = [{name:"wrapper",func:undefined}];LazyWrapper.prototype.clone = lazyClone;LazyWrapper.prototype.reverse = lazyReverse;LazyWrapper.prototype.value = lazyValue;lodash.prototype.at = wrapperAt;lodash.prototype.chain = wrapperChain;lodash.prototype.commit = wrapperCommit;lodash.prototype.flatMap = wrapperFlatMap;lodash.prototype.next = wrapperNext;lodash.prototype.plant = wrapperPlant;lodash.prototype.reverse = wrapperReverse;lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;if(iteratorSymbol){lodash.prototype[iteratorSymbol] = wrapperToIterator;}return lodash;}var _=runInContext();(freeWindow || freeSelf || {})._ = _;if(typeof define == "function" && typeof define.amd == "object" && define.amd){define(function(){return _;});}else if(freeExports && freeModule){if(moduleExports){(freeModule.exports = _)._ = _;}freeExports._ = _;}else {root._ = _;}}).call(undefined);

cc._RFpop();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"main":[function(require,module,exports){
cc._RFpush(module, '4788eVMSFhL2qgCgTN1rpuj', 'main');
// biz/main/script/main.js

'use strict';

var bizSocket = require('../../socket/biz-socket');

cc.Class({
    'extends': cc.Component,

    properties: {},

    enterAction: function enterAction() {
        cc.director.loadScene('controller');
        bizSocket.connect();
    },

    onLoad: function onLoad() {},

    update: function update(dt) {}
});

cc._RFpop();
},{"../../socket/biz-socket":"biz-socket"}],"socket.io":[function(require,module,exports){
(function (global){
cc._RFpush(module, '342756pPltPvItiKud7zucD', 'socket.io');
// lib/socket.io.js

"use strict";

(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }g.io = f();
  }
})(function () {
  var define, module, exports;return (function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw (f.code = "MODULE_NOT_FOUND", f);
        }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
          var n = t[o][1][e];return s(n ? n : e);
        }, l, l.exports, e, t, n, r);
      }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
  })({ 1: [function (_dereq_, module, exports) {
      module.exports = _dereq_("./lib/");
    }, { "./lib/": 2 }], 2: [function (_dereq_, module, exports) {
      module.exports = _dereq_("./socket");module.exports.parser = _dereq_("engine.io-parser");
    }, { "./socket": 3, "engine.io-parser": 19 }], 3: [function (_dereq_, module, exports) {
      (function (global) {
        var transports = _dereq_("./transports");var Emitter = _dereq_("component-emitter");var debug = _dereq_("debug")("engine.io-client:socket");var index = _dereq_("indexof");var parser = _dereq_("engine.io-parser");var parseuri = _dereq_("parseuri");var parsejson = _dereq_("parsejson");var parseqs = _dereq_("parseqs");module.exports = Socket;function noop() {}function Socket(uri, opts) {
          if (!(this instanceof Socket)) return new Socket(uri, opts);opts = opts || {};if (uri && "object" == typeof uri) {
            opts = uri;uri = null;
          }if (uri) {
            uri = parseuri(uri);opts.hostname = uri.host;opts.secure = uri.protocol == "https" || uri.protocol == "wss";opts.port = uri.port;if (uri.query) opts.query = uri.query;
          } else if (opts.host) {
            opts.hostname = parseuri(opts.host).host;
          }this.secure = null != opts.secure ? opts.secure : global.location && "https:" == location.protocol;if (opts.hostname && !opts.port) {
            opts.port = this.secure ? "443" : "80";
          }this.agent = opts.agent || false;this.hostname = opts.hostname || (global.location ? location.hostname : "localhost");this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);this.query = opts.query || {};if ("string" == typeof this.query) this.query = parseqs.decode(this.query);this.upgrade = false !== opts.upgrade;this.path = (opts.path || "/engine.io").replace(/\/$/, "") + "/";this.forceJSONP = !!opts.forceJSONP;this.jsonp = false !== opts.jsonp;this.forceBase64 = !!opts.forceBase64;this.enablesXDR = !!opts.enablesXDR;this.timestampParam = opts.timestampParam || "t";this.timestampRequests = opts.timestampRequests;this.transports = opts.transports || ["polling", "websocket"];this.readyState = "";this.writeBuffer = [];this.policyPort = opts.policyPort || 843;this.rememberUpgrade = opts.rememberUpgrade || false;this.binaryType = null;this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;if (true === this.perMessageDeflate) this.perMessageDeflate = {};if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
            this.perMessageDeflate.threshold = 1024;
          }this.pfx = opts.pfx || null;this.key = opts.key || null;this.passphrase = opts.passphrase || null;this.cert = opts.cert || null;this.ca = opts.ca || null;this.ciphers = opts.ciphers || null;this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;var freeGlobal = typeof global == "object" && global;if (freeGlobal.global === freeGlobal) {
            if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
              this.extraHeaders = opts.extraHeaders;
            }
          }this.open();
        }Socket.priorWebsocketSuccess = false;Emitter(Socket.prototype);Socket.protocol = parser.protocol;Socket.Socket = Socket;Socket.Transport = _dereq_("./transport");Socket.transports = _dereq_("./transports");Socket.parser = _dereq_("engine.io-parser");Socket.prototype.createTransport = function (name) {
          debug('creating transport "%s"', name);var query = clone(this.query);query.EIO = parser.protocol;query.transport = name;if (this.id) query.sid = this.id;var transport = new transports[name]({ agent: this.agent, hostname: this.hostname, port: this.port, secure: this.secure, path: this.path, query: query, forceJSONP: this.forceJSONP, jsonp: this.jsonp, forceBase64: this.forceBase64, enablesXDR: this.enablesXDR, timestampRequests: this.timestampRequests, timestampParam: this.timestampParam, policyPort: this.policyPort, socket: this, pfx: this.pfx, key: this.key, passphrase: this.passphrase, cert: this.cert, ca: this.ca, ciphers: this.ciphers, rejectUnauthorized: this.rejectUnauthorized, perMessageDeflate: this.perMessageDeflate, extraHeaders: this.extraHeaders });return transport;
        };function clone(obj) {
          var o = {};for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
              o[i] = obj[i];
            }
          }return o;
        }Socket.prototype.open = function () {
          var transport;if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") != -1) {
            transport = "websocket";
          } else if (0 === this.transports.length) {
            var self = this;setTimeout(function () {
              self.emit("error", "No transports available");
            }, 0);return;
          } else {
            transport = this.transports[0];
          }this.readyState = "opening";try {
            transport = this.createTransport(transport);
          } catch (e) {
            this.transports.shift();this.open();return;
          }transport.open();this.setTransport(transport);
        };Socket.prototype.setTransport = function (transport) {
          debug("setting transport %s", transport.name);var self = this;if (this.transport) {
            debug("clearing existing transport %s", this.transport.name);this.transport.removeAllListeners();
          }this.transport = transport;transport.on("drain", function () {
            self.onDrain();
          }).on("packet", function (packet) {
            self.onPacket(packet);
          }).on("error", function (e) {
            self.onError(e);
          }).on("close", function () {
            self.onClose("transport close");
          });
        };Socket.prototype.probe = function (name) {
          debug('probing transport "%s"', name);var transport = this.createTransport(name, { probe: 1 }),
              failed = false,
              self = this;Socket.priorWebsocketSuccess = false;function onTransportOpen() {
            if (self.onlyBinaryUpgrades) {
              var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;failed = failed || upgradeLosesBinary;
            }if (failed) return;debug('probe transport "%s" opened', name);transport.send([{ type: "ping", data: "probe" }]);transport.once("packet", function (msg) {
              if (failed) return;if ("pong" == msg.type && "probe" == msg.data) {
                debug('probe transport "%s" pong', name);self.upgrading = true;self.emit("upgrading", transport);if (!transport) return;Socket.priorWebsocketSuccess = "websocket" == transport.name;debug('pausing current transport "%s"', self.transport.name);self.transport.pause(function () {
                  if (failed) return;if ("closed" == self.readyState) return;debug("changing transport and sending upgrade packet");cleanup();self.setTransport(transport);transport.send([{ type: "upgrade" }]);self.emit("upgrade", transport);transport = null;self.upgrading = false;self.flush();
                });
              } else {
                debug('probe transport "%s" failed', name);var err = new Error("probe error");err.transport = transport.name;self.emit("upgradeError", err);
              }
            });
          }function freezeTransport() {
            if (failed) return;failed = true;cleanup();transport.close();transport = null;
          }function onerror(err) {
            var error = new Error("probe error: " + err);error.transport = transport.name;freezeTransport();debug('probe transport "%s" failed because of error: %s', name, err);self.emit("upgradeError", error);
          }function onTransportClose() {
            onerror("transport closed");
          }function onclose() {
            onerror("socket closed");
          }function onupgrade(to) {
            if (transport && to.name != transport.name) {
              debug('"%s" works - aborting "%s"', to.name, transport.name);freezeTransport();
            }
          }function cleanup() {
            transport.removeListener("open", onTransportOpen);transport.removeListener("error", onerror);transport.removeListener("close", onTransportClose);self.removeListener("close", onclose);self.removeListener("upgrading", onupgrade);
          }transport.once("open", onTransportOpen);transport.once("error", onerror);transport.once("close", onTransportClose);this.once("close", onclose);this.once("upgrading", onupgrade);transport.open();
        };Socket.prototype.onOpen = function () {
          debug("socket open");this.readyState = "open";Socket.priorWebsocketSuccess = "websocket" == this.transport.name;this.emit("open");this.flush();if ("open" == this.readyState && this.upgrade && this.transport.pause) {
            debug("starting upgrade probes");for (var i = 0, l = this.upgrades.length; i < l; i++) {
              this.probe(this.upgrades[i]);
            }
          }
        };Socket.prototype.onPacket = function (packet) {
          if ("opening" == this.readyState || "open" == this.readyState) {
            debug('socket receive: type "%s", data "%s"', packet.type, packet.data);this.emit("packet", packet);this.emit("heartbeat");switch (packet.type) {case "open":
                this.onHandshake(parsejson(packet.data));break;case "pong":
                this.setPing();this.emit("pong");break;case "error":
                var err = new Error("server error");err.code = packet.data;this.onError(err);break;case "message":
                this.emit("data", packet.data);this.emit("message", packet.data);break;}
          } else {
            debug('packet received with socket readyState "%s"', this.readyState);
          }
        };Socket.prototype.onHandshake = function (data) {
          this.emit("handshake", data);this.id = data.sid;this.transport.query.sid = data.sid;this.upgrades = this.filterUpgrades(data.upgrades);this.pingInterval = data.pingInterval;this.pingTimeout = data.pingTimeout;this.onOpen();if ("closed" == this.readyState) return;this.setPing();this.removeListener("heartbeat", this.onHeartbeat);this.on("heartbeat", this.onHeartbeat);
        };Socket.prototype.onHeartbeat = function (timeout) {
          clearTimeout(this.pingTimeoutTimer);var self = this;self.pingTimeoutTimer = setTimeout(function () {
            if ("closed" == self.readyState) return;self.onClose("ping timeout");
          }, timeout || self.pingInterval + self.pingTimeout);
        };Socket.prototype.setPing = function () {
          var self = this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer = setTimeout(function () {
            debug("writing ping packet - expecting pong within %sms", self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout);
          }, self.pingInterval);
        };Socket.prototype.ping = function () {
          var self = this;this.sendPacket("ping", function () {
            self.emit("ping");
          });
        };Socket.prototype.onDrain = function () {
          this.writeBuffer.splice(0, this.prevBufferLen);this.prevBufferLen = 0;if (0 === this.writeBuffer.length) {
            this.emit("drain");
          } else {
            this.flush();
          }
        };Socket.prototype.flush = function () {
          if ("closed" != this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
            debug("flushing %d packets in socket", this.writeBuffer.length);this.transport.send(this.writeBuffer);this.prevBufferLen = this.writeBuffer.length;this.emit("flush");
          }
        };Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
          this.sendPacket("message", msg, options, fn);return this;
        };Socket.prototype.sendPacket = function (type, data, options, fn) {
          if ("function" == typeof data) {
            fn = data;data = undefined;
          }if ("function" == typeof options) {
            fn = options;options = null;
          }if ("closing" == this.readyState || "closed" == this.readyState) {
            return;
          }options = options || {};options.compress = false !== options.compress;var packet = { type: type, data: data, options: options };this.emit("packetCreate", packet);this.writeBuffer.push(packet);if (fn) this.once("flush", fn);this.flush();
        };Socket.prototype.close = function () {
          if ("opening" == this.readyState || "open" == this.readyState) {
            this.readyState = "closing";var self = this;if (this.writeBuffer.length) {
              this.once("drain", function () {
                if (this.upgrading) {
                  waitForUpgrade();
                } else {
                  close();
                }
              });
            } else if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          }function close() {
            self.onClose("forced close");debug("socket closing - telling transport to close");self.transport.close();
          }function cleanupAndClose() {
            self.removeListener("upgrade", cleanupAndClose);self.removeListener("upgradeError", cleanupAndClose);close();
          }function waitForUpgrade() {
            self.once("upgrade", cleanupAndClose);self.once("upgradeError", cleanupAndClose);
          }return this;
        };Socket.prototype.onError = function (err) {
          debug("socket error %j", err);Socket.priorWebsocketSuccess = false;this.emit("error", err);this.onClose("transport error", err);
        };Socket.prototype.onClose = function (reason, desc) {
          if ("opening" == this.readyState || "open" == this.readyState || "closing" == this.readyState) {
            debug('socket close with reason: "%s"', reason);var self = this;clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);this.transport.removeAllListeners("close");this.transport.close();this.transport.removeAllListeners();this.readyState = "closed";this.id = null;this.emit("close", reason, desc);self.writeBuffer = [];self.prevBufferLen = 0;
          }
        };Socket.prototype.filterUpgrades = function (upgrades) {
          var filteredUpgrades = [];for (var i = 0, j = upgrades.length; i < j; i++) {
            if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
          }return filteredUpgrades;
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./transport": 4, "./transports": 5, "component-emitter": 15, debug: 17, "engine.io-parser": 19, indexof: 23, parsejson: 26, parseqs: 27, parseuri: 28 }], 4: [function (_dereq_, module, exports) {
      var parser = _dereq_("engine.io-parser");var Emitter = _dereq_("component-emitter");module.exports = Transport;function Transport(opts) {
        this.path = opts.path;this.hostname = opts.hostname;this.port = opts.port;this.secure = opts.secure;this.query = opts.query;this.timestampParam = opts.timestampParam;this.timestampRequests = opts.timestampRequests;this.readyState = "";this.agent = opts.agent || false;this.socket = opts.socket;this.enablesXDR = opts.enablesXDR;this.pfx = opts.pfx;this.key = opts.key;this.passphrase = opts.passphrase;this.cert = opts.cert;this.ca = opts.ca;this.ciphers = opts.ciphers;this.rejectUnauthorized = opts.rejectUnauthorized;this.extraHeaders = opts.extraHeaders;
      }Emitter(Transport.prototype);Transport.prototype.onError = function (msg, desc) {
        var err = new Error(msg);err.type = "TransportError";err.description = desc;this.emit("error", err);return this;
      };Transport.prototype.open = function () {
        if ("closed" == this.readyState || "" == this.readyState) {
          this.readyState = "opening";this.doOpen();
        }return this;
      };Transport.prototype.close = function () {
        if ("opening" == this.readyState || "open" == this.readyState) {
          this.doClose();this.onClose();
        }return this;
      };Transport.prototype.send = function (packets) {
        if ("open" == this.readyState) {
          this.write(packets);
        } else {
          throw new Error("Transport not open");
        }
      };Transport.prototype.onOpen = function () {
        this.readyState = "open";this.writable = true;this.emit("open");
      };Transport.prototype.onData = function (data) {
        var packet = parser.decodePacket(data, this.socket.binaryType);this.onPacket(packet);
      };Transport.prototype.onPacket = function (packet) {
        this.emit("packet", packet);
      };Transport.prototype.onClose = function () {
        this.readyState = "closed";this.emit("close");
      };
    }, { "component-emitter": 15, "engine.io-parser": 19 }], 5: [function (_dereq_, module, exports) {
      (function (global) {
        var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");var XHR = _dereq_("./polling-xhr");var JSONP = _dereq_("./polling-jsonp");var websocket = _dereq_("./websocket");exports.polling = polling;exports.websocket = websocket;function polling(opts) {
          var xhr;var xd = false;var xs = false;var jsonp = false !== opts.jsonp;if (global.location) {
            var isSSL = "https:" == location.protocol;var port = location.port;if (!port) {
              port = isSSL ? 443 : 80;
            }xd = opts.hostname != location.hostname || port != opts.port;xs = opts.secure != isSSL;
          }opts.xdomain = xd;opts.xscheme = xs;xhr = new XMLHttpRequest(opts);if ("open" in xhr && !opts.forceJSONP) {
            return new XHR(opts);
          } else {
            if (!jsonp) throw new Error("JSONP disabled");return new JSONP(opts);
          }
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./polling-jsonp": 6, "./polling-xhr": 7, "./websocket": 9, "xmlhttprequest-ssl": 10 }], 6: [function (_dereq_, module, exports) {
      (function (global) {
        var Polling = _dereq_("./polling");var inherit = _dereq_("component-inherit");module.exports = JSONPPolling;var rNewline = /\n/g;var rEscapedNewline = /\\n/g;var callbacks;var index = 0;function empty() {}function JSONPPolling(opts) {
          Polling.call(this, opts);this.query = this.query || {};if (!callbacks) {
            if (!global.___eio) global.___eio = [];callbacks = global.___eio;
          }this.index = callbacks.length;var self = this;callbacks.push(function (msg) {
            self.onData(msg);
          });this.query.j = this.index;if (global.document && global.addEventListener) {
            global.addEventListener("beforeunload", function () {
              if (self.script) self.script.onerror = empty;
            }, false);
          }
        }inherit(JSONPPolling, Polling);JSONPPolling.prototype.supportsBinary = false;JSONPPolling.prototype.doClose = function () {
          if (this.script) {
            this.script.parentNode.removeChild(this.script);this.script = null;
          }if (this.form) {
            this.form.parentNode.removeChild(this.form);this.form = null;this.iframe = null;
          }Polling.prototype.doClose.call(this);
        };JSONPPolling.prototype.doPoll = function () {
          var self = this;var script = document.createElement("script");if (this.script) {
            this.script.parentNode.removeChild(this.script);this.script = null;
          }script.async = true;script.src = this.uri();script.onerror = function (e) {
            self.onError("jsonp poll error", e);
          };var insertAt = document.getElementsByTagName("script")[0];if (insertAt) {
            insertAt.parentNode.insertBefore(script, insertAt);
          } else {
            (document.head || document.body).appendChild(script);
          }this.script = script;var isUAgecko = "undefined" != typeof navigator && /gecko/i.test(navigator.userAgent);if (isUAgecko) {
            setTimeout(function () {
              var iframe = document.createElement("iframe");document.body.appendChild(iframe);document.body.removeChild(iframe);
            }, 100);
          }
        };JSONPPolling.prototype.doWrite = function (data, fn) {
          var self = this;if (!this.form) {
            var form = document.createElement("form");var area = document.createElement("textarea");var id = this.iframeId = "eio_iframe_" + this.index;var iframe;form.className = "socketio";form.style.position = "absolute";form.style.top = "-1000px";form.style.left = "-1000px";form.target = id;form.method = "POST";form.setAttribute("accept-charset", "utf-8");area.name = "d";form.appendChild(area);document.body.appendChild(form);this.form = form;this.area = area;
          }this.form.action = this.uri();function complete() {
            initIframe();fn();
          }function initIframe() {
            if (self.iframe) {
              try {
                self.form.removeChild(self.iframe);
              } catch (e) {
                self.onError("jsonp polling iframe removal error", e);
              }
            }try {
              var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';iframe = document.createElement(html);
            } catch (e) {
              iframe = document.createElement("iframe");iframe.name = self.iframeId;iframe.src = "javascript:0";
            }iframe.id = self.iframeId;self.form.appendChild(iframe);self.iframe = iframe;
          }initIframe();data = data.replace(rEscapedNewline, "\\\n");this.area.value = data.replace(rNewline, "\\n");try {
            this.form.submit();
          } catch (e) {}if (this.iframe.attachEvent) {
            this.iframe.onreadystatechange = function () {
              if (self.iframe.readyState == "complete") {
                complete();
              }
            };
          } else {
            this.iframe.onload = complete;
          }
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./polling": 8, "component-inherit": 16 }], 7: [function (_dereq_, module, exports) {
      (function (global) {
        var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");var Polling = _dereq_("./polling");var Emitter = _dereq_("component-emitter");var inherit = _dereq_("component-inherit");var debug = _dereq_("debug")("engine.io-client:polling-xhr");module.exports = XHR;module.exports.Request = Request;function empty() {}function XHR(opts) {
          Polling.call(this, opts);if (global.location) {
            var isSSL = "https:" == location.protocol;var port = location.port;if (!port) {
              port = isSSL ? 443 : 80;
            }this.xd = opts.hostname != global.location.hostname || port != opts.port;this.xs = opts.secure != isSSL;
          } else {
            this.extraHeaders = opts.extraHeaders;
          }
        }inherit(XHR, Polling);XHR.prototype.supportsBinary = true;XHR.prototype.request = function (opts) {
          opts = opts || {};opts.uri = this.uri();opts.xd = this.xd;opts.xs = this.xs;opts.agent = this.agent || false;opts.supportsBinary = this.supportsBinary;opts.enablesXDR = this.enablesXDR;opts.pfx = this.pfx;opts.key = this.key;opts.passphrase = this.passphrase;opts.cert = this.cert;opts.ca = this.ca;opts.ciphers = this.ciphers;opts.rejectUnauthorized = this.rejectUnauthorized;opts.extraHeaders = this.extraHeaders;return new Request(opts);
        };XHR.prototype.doWrite = function (data, fn) {
          var isBinary = typeof data !== "string" && data !== undefined;var req = this.request({ method: "POST", data: data, isBinary: isBinary });var self = this;req.on("success", fn);req.on("error", function (err) {
            self.onError("xhr post error", err);
          });this.sendXhr = req;
        };XHR.prototype.doPoll = function () {
          debug("xhr poll");var req = this.request();var self = this;req.on("data", function (data) {
            self.onData(data);
          });req.on("error", function (err) {
            self.onError("xhr poll error", err);
          });this.pollXhr = req;
        };function Request(opts) {
          this.method = opts.method || "GET";this.uri = opts.uri;this.xd = !!opts.xd;this.xs = !!opts.xs;this.async = false !== opts.async;this.data = undefined != opts.data ? opts.data : null;this.agent = opts.agent;this.isBinary = opts.isBinary;this.supportsBinary = opts.supportsBinary;this.enablesXDR = opts.enablesXDR;this.pfx = opts.pfx;this.key = opts.key;this.passphrase = opts.passphrase;this.cert = opts.cert;this.ca = opts.ca;this.ciphers = opts.ciphers;this.rejectUnauthorized = opts.rejectUnauthorized;this.extraHeaders = opts.extraHeaders;this.create();
        }Emitter(Request.prototype);Request.prototype.create = function () {
          var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };opts.pfx = this.pfx;opts.key = this.key;opts.passphrase = this.passphrase;opts.cert = this.cert;opts.ca = this.ca;opts.ciphers = this.ciphers;opts.rejectUnauthorized = this.rejectUnauthorized;var xhr = this.xhr = new XMLHttpRequest(opts);var self = this;try {
            debug("xhr open %s: %s", this.method, this.uri);xhr.open(this.method, this.uri, this.async);try {
              if (this.extraHeaders) {
                xhr.setDisableHeaderCheck(true);for (var i in this.extraHeaders) {
                  if (this.extraHeaders.hasOwnProperty(i)) {
                    xhr.setRequestHeader(i, this.extraHeaders[i]);
                  }
                }
              }
            } catch (e) {}if (this.supportsBinary) {
              xhr.responseType = "arraybuffer";
            }if ("POST" == this.method) {
              try {
                if (this.isBinary) {
                  xhr.setRequestHeader("Content-type", "application/octet-stream");
                } else {
                  xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
                }
              } catch (e) {}
            }if ("withCredentials" in xhr) {
              xhr.withCredentials = true;
            }if (this.hasXDR()) {
              xhr.onload = function () {
                self.onLoad();
              };xhr.onerror = function () {
                self.onError(xhr.responseText);
              };
            } else {
              xhr.onreadystatechange = function () {
                if (4 != xhr.readyState) return;if (200 == xhr.status || 1223 == xhr.status) {
                  self.onLoad();
                } else {
                  setTimeout(function () {
                    self.onError(xhr.status);
                  }, 0);
                }
              };
            }debug("xhr data %s", this.data);xhr.send(this.data);
          } catch (e) {
            setTimeout(function () {
              self.onError(e);
            }, 0);return;
          }if (global.document) {
            this.index = Request.requestsCount++;Request.requests[this.index] = this;
          }
        };Request.prototype.onSuccess = function () {
          this.emit("success");this.cleanup();
        };Request.prototype.onData = function (data) {
          this.emit("data", data);this.onSuccess();
        };Request.prototype.onError = function (err) {
          this.emit("error", err);this.cleanup(true);
        };Request.prototype.cleanup = function (fromError) {
          if ("undefined" == typeof this.xhr || null === this.xhr) {
            return;
          }if (this.hasXDR()) {
            this.xhr.onload = this.xhr.onerror = empty;
          } else {
            this.xhr.onreadystatechange = empty;
          }if (fromError) {
            try {
              this.xhr.abort();
            } catch (e) {}
          }if (global.document) {
            delete Request.requests[this.index];
          }this.xhr = null;
        };Request.prototype.onLoad = function () {
          var data;try {
            var contentType;try {
              contentType = this.xhr.getResponseHeader("Content-Type").split(";")[0];
            } catch (e) {}if (contentType === "application/octet-stream") {
              data = this.xhr.response;
            } else {
              if (!this.supportsBinary) {
                data = this.xhr.responseText;
              } else {
                try {
                  data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
                } catch (e) {
                  var ui8Arr = new Uint8Array(this.xhr.response);var dataArray = [];for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
                    dataArray.push(ui8Arr[idx]);
                  }data = String.fromCharCode.apply(null, dataArray);
                }
              }
            }
          } catch (e) {
            this.onError(e);
          }if (null != data) {
            this.onData(data);
          }
        };Request.prototype.hasXDR = function () {
          return "undefined" !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
        };Request.prototype.abort = function () {
          this.cleanup();
        };if (global.document) {
          Request.requestsCount = 0;Request.requests = {};if (global.attachEvent) {
            global.attachEvent("onunload", unloadHandler);
          } else if (global.addEventListener) {
            global.addEventListener("beforeunload", unloadHandler, false);
          }
        }function unloadHandler() {
          for (var i in Request.requests) {
            if (Request.requests.hasOwnProperty(i)) {
              Request.requests[i].abort();
            }
          }
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./polling": 8, "component-emitter": 15, "component-inherit": 16, debug: 17, "xmlhttprequest-ssl": 10 }], 8: [function (_dereq_, module, exports) {
      var Transport = _dereq_("../transport");var parseqs = _dereq_("parseqs");var parser = _dereq_("engine.io-parser");var inherit = _dereq_("component-inherit");var yeast = _dereq_("yeast");var debug = _dereq_("debug")("engine.io-client:polling");module.exports = Polling;var hasXHR2 = (function () {
        var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");var xhr = new XMLHttpRequest({ xdomain: false });return null != xhr.responseType;
      })();function Polling(opts) {
        var forceBase64 = opts && opts.forceBase64;if (!hasXHR2 || forceBase64) {
          this.supportsBinary = false;
        }Transport.call(this, opts);
      }inherit(Polling, Transport);Polling.prototype.name = "polling";Polling.prototype.doOpen = function () {
        this.poll();
      };Polling.prototype.pause = function (onPause) {
        var pending = 0;var self = this;this.readyState = "pausing";function pause() {
          debug("paused");self.readyState = "paused";onPause();
        }if (this.polling || !this.writable) {
          var total = 0;if (this.polling) {
            debug("we are currently polling - waiting to pause");total++;this.once("pollComplete", function () {
              debug("pre-pause polling complete");--total || pause();
            });
          }if (!this.writable) {
            debug("we are currently writing - waiting to pause");total++;this.once("drain", function () {
              debug("pre-pause writing complete");--total || pause();
            });
          }
        } else {
          pause();
        }
      };Polling.prototype.poll = function () {
        debug("polling");this.polling = true;this.doPoll();this.emit("poll");
      };Polling.prototype.onData = function (data) {
        var self = this;debug("polling got data %s", data);var callback = function callback(packet, index, total) {
          if ("opening" == self.readyState) {
            self.onOpen();
          }if ("close" == packet.type) {
            self.onClose();return false;
          }self.onPacket(packet);
        };parser.decodePayload(data, this.socket.binaryType, callback);if ("closed" != this.readyState) {
          this.polling = false;this.emit("pollComplete");if ("open" == this.readyState) {
            this.poll();
          } else {
            debug('ignoring poll - transport state "%s"', this.readyState);
          }
        }
      };Polling.prototype.doClose = function () {
        var self = this;function close() {
          debug("writing close packet");self.write([{ type: "close" }]);
        }if ("open" == this.readyState) {
          debug("transport open - closing");close();
        } else {
          debug("transport not open - deferring close");this.once("open", close);
        }
      };Polling.prototype.write = function (packets) {
        var self = this;this.writable = false;var callbackfn = function callbackfn() {
          self.writable = true;self.emit("drain");
        };var self = this;parser.encodePayload(packets, this.supportsBinary, function (data) {
          self.doWrite(data, callbackfn);
        });
      };Polling.prototype.uri = function () {
        var query = this.query || {};var schema = this.secure ? "https" : "http";var port = "";if (false !== this.timestampRequests) {
          query[this.timestampParam] = yeast();
        }if (!this.supportsBinary && !query.sid) {
          query.b64 = 1;
        }query = parseqs.encode(query);if (this.port && ("https" == schema && this.port != 443 || "http" == schema && this.port != 80)) {
          port = ":" + this.port;
        }if (query.length) {
          query = "?" + query;
        }var ipv6 = this.hostname.indexOf(":") !== -1;return schema + "://" + (ipv6 ? "[" + this.hostname + "]" : this.hostname) + port + this.path + query;
      };
    }, { "../transport": 4, "component-inherit": 16, debug: 17, "engine.io-parser": 19, parseqs: 27, "xmlhttprequest-ssl": 10, yeast: 30 }], 9: [function (_dereq_, module, exports) {
      (function (global) {
        var Transport = _dereq_("../transport");var parser = _dereq_("engine.io-parser");var parseqs = _dereq_("parseqs");var inherit = _dereq_("component-inherit");var yeast = _dereq_("yeast");var debug = _dereq_("debug")("engine.io-client:websocket");var BrowserWebSocket = global.WebSocket || global.MozWebSocket;var WebSocket = BrowserWebSocket;if (!WebSocket && typeof window === "undefined") {
          try {
            WebSocket = _dereq_("ws");
          } catch (e) {}
        }module.exports = WS;function WS(opts) {
          var forceBase64 = opts && opts.forceBase64;if (forceBase64) {
            this.supportsBinary = false;
          }this.perMessageDeflate = opts.perMessageDeflate;Transport.call(this, opts);
        }inherit(WS, Transport);WS.prototype.name = "websocket";WS.prototype.supportsBinary = true;WS.prototype.doOpen = function () {
          if (!this.check()) {
            return;
          }var self = this;var uri = this.uri();var protocols = void 0;var opts = { agent: this.agent, perMessageDeflate: this.perMessageDeflate };opts.pfx = this.pfx;opts.key = this.key;opts.passphrase = this.passphrase;opts.cert = this.cert;opts.ca = this.ca;opts.ciphers = this.ciphers;opts.rejectUnauthorized = this.rejectUnauthorized;if (this.extraHeaders) {
            opts.headers = this.extraHeaders;
          }this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);if (this.ws.binaryType === undefined) {
            this.supportsBinary = false;
          }if (this.ws.supports && this.ws.supports.binary) {
            this.supportsBinary = true;this.ws.binaryType = "buffer";
          } else {
            this.ws.binaryType = "arraybuffer";
          }this.addEventListeners();
        };WS.prototype.addEventListeners = function () {
          var self = this;this.ws.onopen = function () {
            self.onOpen();
          };this.ws.onclose = function () {
            self.onClose();
          };this.ws.onmessage = function (ev) {
            self.onData(ev.data);
          };this.ws.onerror = function (e) {
            self.onError("websocket error", e);
          };
        };if ("undefined" != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
          WS.prototype.onData = function (data) {
            var self = this;setTimeout(function () {
              Transport.prototype.onData.call(self, data);
            }, 0);
          };
        }WS.prototype.write = function (packets) {
          var self = this;this.writable = false;var total = packets.length;for (var i = 0, l = total; i < l; i++) {
            (function (packet) {
              parser.encodePacket(packet, self.supportsBinary, function (data) {
                if (!BrowserWebSocket) {
                  var opts = {};if (packet.options) {
                    opts.compress = packet.options.compress;
                  }if (self.perMessageDeflate) {
                    var len = "string" == typeof data ? global.Buffer.byteLength(data) : data.length;if (len < self.perMessageDeflate.threshold) {
                      opts.compress = false;
                    }
                  }
                }try {
                  if (BrowserWebSocket) {
                    self.ws.send(data);
                  } else {
                    self.ws.send(data, opts);
                  }
                } catch (e) {
                  debug("websocket closed before onclose event");
                }--total || done();
              });
            })(packets[i]);
          }function done() {
            self.emit("flush");setTimeout(function () {
              self.writable = true;self.emit("drain");
            }, 0);
          }
        };WS.prototype.onClose = function () {
          Transport.prototype.onClose.call(this);
        };WS.prototype.doClose = function () {
          if (typeof this.ws !== "undefined") {
            this.ws.close();
          }
        };WS.prototype.uri = function () {
          var query = this.query || {};var schema = this.secure ? "wss" : "ws";var port = "";if (this.port && ("wss" == schema && this.port != 443 || "ws" == schema && this.port != 80)) {
            port = ":" + this.port;
          }if (this.timestampRequests) {
            query[this.timestampParam] = yeast();
          }if (!this.supportsBinary) {
            query.b64 = 1;
          }query = parseqs.encode(query);if (query.length) {
            query = "?" + query;
          }var ipv6 = this.hostname.indexOf(":") !== -1;return schema + "://" + (ipv6 ? "[" + this.hostname + "]" : this.hostname) + port + this.path + query;
        };WS.prototype.check = function () {
          return !!WebSocket && !("__initialize" in WebSocket && this.name === WS.prototype.name);
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "../transport": 4, "component-inherit": 16, debug: 17, "engine.io-parser": 19, parseqs: 27, ws: undefined, yeast: 30 }], 10: [function (_dereq_, module, exports) {
      var hasCORS = _dereq_("has-cors");module.exports = function (opts) {
        var xdomain = opts.xdomain;var xscheme = opts.xscheme;var enablesXDR = opts.enablesXDR;try {
          if ("undefined" != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
            return new XMLHttpRequest();
          }
        } catch (e) {}try {
          if ("undefined" != typeof XDomainRequest && !xscheme && enablesXDR) {
            return new XDomainRequest();
          }
        } catch (e) {}if (!xdomain) {
          try {
            return new ActiveXObject("Microsoft.XMLHTTP");
          } catch (e) {}
        }
      };
    }, { "has-cors": 22 }], 11: [function (_dereq_, module, exports) {
      module.exports = after;function after(count, callback, err_cb) {
        var bail = false;err_cb = err_cb || noop;proxy.count = count;return count === 0 ? callback() : proxy;function proxy(err, result) {
          if (proxy.count <= 0) {
            throw new Error("after called too many times");
          }--proxy.count;if (err) {
            bail = true;callback(err);callback = err_cb;
          } else if (proxy.count === 0 && !bail) {
            callback(null, result);
          }
        }
      }function noop() {}
    }, {}], 12: [function (_dereq_, module, exports) {
      module.exports = function (arraybuffer, start, end) {
        var bytes = arraybuffer.byteLength;start = start || 0;end = end || bytes;if (arraybuffer.slice) {
          return arraybuffer.slice(start, end);
        }if (start < 0) {
          start += bytes;
        }if (end < 0) {
          end += bytes;
        }if (end > bytes) {
          end = bytes;
        }if (start >= bytes || start >= end || bytes === 0) {
          return new ArrayBuffer(0);
        }var abv = new Uint8Array(arraybuffer);var result = new Uint8Array(end - start);for (var i = start, ii = 0; i < end; i++, ii++) {
          result[ii] = abv[i];
        }return result.buffer;
      };
    }, {}], 13: [function (_dereq_, module, exports) {
      (function (chars) {
        "use strict";exports.encode = function (arraybuffer) {
          var bytes = new Uint8Array(arraybuffer),
              i,
              len = bytes.length,
              base64 = "";for (i = 0; i < len; i += 3) {
            base64 += chars[bytes[i] >> 2];
            base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];base64 += chars[bytes[i + 2] & 63];
          }if (len % 3 === 2) {
            base64 = base64.substring(0, base64.length - 1) + "=";
          } else if (len % 3 === 1) {
            base64 = base64.substring(0, base64.length - 2) + "==";
          }return base64;
        };exports.decode = function (base64) {
          var bufferLength = base64.length * .75,
              len = base64.length,
              i,
              p = 0,
              encoded1,
              encoded2,
              encoded3,
              encoded4;if (base64[base64.length - 1] === "=") {
            bufferLength--;if (base64[base64.length - 2] === "=") {
              bufferLength--;
            }
          }var arraybuffer = new ArrayBuffer(bufferLength),
              bytes = new Uint8Array(arraybuffer);for (i = 0; i < len; i += 4) {
            encoded1 = chars.indexOf(base64[i]);encoded2 = chars.indexOf(base64[i + 1]);encoded3 = chars.indexOf(base64[i + 2]);encoded4 = chars.indexOf(base64[i + 3]);bytes[p++] = encoded1 << 2 | encoded2 >> 4;bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
          }return arraybuffer;
        };
      })("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    }, {}], 14: [function (_dereq_, module, exports) {
      (function (global) {
        var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;var blobSupported = (function () {
          try {
            var a = new Blob(["hi"]);return a.size === 2;
          } catch (e) {
            return false;
          }
        })();var blobSupportsArrayBufferView = blobSupported && (function () {
          try {
            var b = new Blob([new Uint8Array([1, 2])]);return b.size === 2;
          } catch (e) {
            return false;
          }
        })();var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;function mapArrayBufferViews(ary) {
          for (var i = 0; i < ary.length; i++) {
            var chunk = ary[i];if (chunk.buffer instanceof ArrayBuffer) {
              var buf = chunk.buffer;if (chunk.byteLength !== buf.byteLength) {
                var copy = new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));buf = copy.buffer;
              }ary[i] = buf;
            }
          }
        }function BlobBuilderConstructor(ary, options) {
          options = options || {};var bb = new BlobBuilder();mapArrayBufferViews(ary);for (var i = 0; i < ary.length; i++) {
            bb.append(ary[i]);
          }return options.type ? bb.getBlob(options.type) : bb.getBlob();
        }function BlobConstructor(ary, options) {
          mapArrayBufferViews(ary);return new Blob(ary, options || {});
        }module.exports = (function () {
          if (blobSupported) {
            return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
          } else if (blobBuilderSupported) {
            return BlobBuilderConstructor;
          } else {
            return undefined;
          }
        })();
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 15: [function (_dereq_, module, exports) {
      module.exports = Emitter;function Emitter(obj) {
        if (obj) return mixin(obj);
      }function mixin(obj) {
        for (var key in Emitter.prototype) {
          obj[key] = Emitter.prototype[key];
        }return obj;
      }Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};(this._callbacks[event] = this._callbacks[event] || []).push(fn);return this;
      };Emitter.prototype.once = function (event, fn) {
        var self = this;this._callbacks = this._callbacks || {};function on() {
          self.off(event, on);fn.apply(this, arguments);
        }on.fn = fn;this.on(event, on);return this;
      };Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};if (0 == arguments.length) {
          this._callbacks = {};return this;
        }var callbacks = this._callbacks[event];if (!callbacks) return this;if (1 == arguments.length) {
          delete this._callbacks[event];return this;
        }var cb;for (var i = 0; i < callbacks.length; i++) {
          cb = callbacks[i];if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);break;
          }
        }return this;
      };Emitter.prototype.emit = function (event) {
        this._callbacks = this._callbacks || {};var args = [].slice.call(arguments, 1),
            callbacks = this._callbacks[event];if (callbacks) {
          callbacks = callbacks.slice(0);for (var i = 0, len = callbacks.length; i < len; ++i) {
            callbacks[i].apply(this, args);
          }
        }return this;
      };Emitter.prototype.listeners = function (event) {
        this._callbacks = this._callbacks || {};return this._callbacks[event] || [];
      };Emitter.prototype.hasListeners = function (event) {
        return !!this.listeners(event).length;
      };
    }, {}], 16: [function (_dereq_, module, exports) {
      module.exports = function (a, b) {
        var fn = function fn() {};fn.prototype = b.prototype;a.prototype = new fn();a.prototype.constructor = a;
      };
    }, {}], 17: [function (_dereq_, module, exports) {
      exports = module.exports = _dereq_("./debug");exports.log = log;exports.formatArgs = formatArgs;exports.save = save;exports.load = load;exports.useColors = useColors;exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();exports.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"];function useColors() {
        return "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
      }exports.formatters.j = function (v) {
        return JSON.stringify(v);
      };function formatArgs() {
        var args = arguments;var useColors = this.useColors;args[0] = (useColors ? "%c" : "") + this.namespace + (useColors ? " %c" : " ") + args[0] + (useColors ? "%c " : " ") + "+" + exports.humanize(this.diff);if (!useColors) return args;var c = "color: " + this.color;args = [args[0], c, "color: inherit"].concat(Array.prototype.slice.call(args, 1));var index = 0;var lastC = 0;args[0].replace(/%[a-z%]/g, function (match) {
          if ("%%" === match) return;index++;if ("%c" === match) {
            lastC = index;
          }
        });args.splice(lastC, 0, c);return args;
      }function log() {
        return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
      }function save(namespaces) {
        try {
          if (null == namespaces) {
            exports.storage.removeItem("debug");
          } else {
            exports.storage.debug = namespaces;
          }
        } catch (e) {}
      }function load() {
        var r;try {
          r = exports.storage.debug;
        } catch (e) {}return r;
      }exports.enable(load());function localstorage() {
        try {
          return window.localStorage;
        } catch (e) {}
      }
    }, { "./debug": 18 }], 18: [function (_dereq_, module, exports) {
      exports = module.exports = debug;exports.coerce = coerce;exports.disable = disable;exports.enable = enable;exports.enabled = enabled;exports.humanize = _dereq_("ms");exports.names = [];exports.skips = [];exports.formatters = {};var prevColor = 0;var prevTime;function selectColor() {
        return exports.colors[prevColor++ % exports.colors.length];
      }function debug(namespace) {
        function disabled() {}disabled.enabled = false;function enabled() {
          var self = enabled;var curr = +new Date();var ms = curr - (prevTime || curr);self.diff = ms;self.prev = prevTime;self.curr = curr;prevTime = curr;if (null == self.useColors) self.useColors = exports.useColors();if (null == self.color && self.useColors) self.color = selectColor();var args = Array.prototype.slice.call(arguments);args[0] = exports.coerce(args[0]);if ("string" !== typeof args[0]) {
            args = ["%o"].concat(args);
          }var index = 0;args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
            if (match === "%%") return match;index++;var formatter = exports.formatters[format];if ("function" === typeof formatter) {
              var val = args[index];match = formatter.call(self, val);args.splice(index, 1);index--;
            }return match;
          });if ("function" === typeof exports.formatArgs) {
            args = exports.formatArgs.apply(self, args);
          }var logFn = enabled.log || exports.log || console.log.bind(console);logFn.apply(self, args);
        }enabled.enabled = true;var fn = exports.enabled(namespace) ? enabled : disabled;fn.namespace = namespace;return fn;
      }function enable(namespaces) {
        exports.save(namespaces);var split = (namespaces || "").split(/[\s,]+/);var len = split.length;for (var i = 0; i < len; i++) {
          if (!split[i]) continue;namespaces = split[i].replace(/\*/g, ".*?");if (namespaces[0] === "-") {
            exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
          } else {
            exports.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }function disable() {
        exports.enable("");
      }function enabled(name) {
        var i, len;for (i = 0, len = exports.skips.length; i < len; i++) {
          if (exports.skips[i].test(name)) {
            return false;
          }
        }for (i = 0, len = exports.names.length; i < len; i++) {
          if (exports.names[i].test(name)) {
            return true;
          }
        }return false;
      }function coerce(val) {
        if (val instanceof Error) return val.stack || val.message;return val;
      }
    }, { ms: 25 }], 19: [function (_dereq_, module, exports) {
      (function (global) {
        var keys = _dereq_("./keys");var hasBinary = _dereq_("has-binary");var sliceBuffer = _dereq_("arraybuffer.slice");var base64encoder = _dereq_("base64-arraybuffer");var after = _dereq_("after");var utf8 = _dereq_("utf8");var isAndroid = navigator.userAgent.match(/Android/i);var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);var dontSendBlobs = isAndroid || isPhantomJS;exports.protocol = 3;var packets = exports.packets = { open: 0, close: 1, ping: 2, pong: 3, message: 4, upgrade: 5, noop: 6 };var packetslist = keys(packets);var err = { type: "error", data: "parser error" };var Blob = _dereq_("blob");exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
          if ("function" == typeof supportsBinary) {
            callback = supportsBinary;supportsBinary = false;
          }if ("function" == typeof utf8encode) {
            callback = utf8encode;utf8encode = null;
          }var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;if (global.ArrayBuffer && data instanceof ArrayBuffer) {
            return encodeArrayBuffer(packet, supportsBinary, callback);
          } else if (Blob && data instanceof global.Blob) {
            return encodeBlob(packet, supportsBinary, callback);
          }if (data && data.base64) {
            return encodeBase64Object(packet, callback);
          }var encoded = packets[packet.type];if (undefined !== packet.data) {
            encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
          }return callback("" + encoded);
        };function encodeBase64Object(packet, callback) {
          var message = "b" + exports.packets[packet.type] + packet.data.data;return callback(message);
        }function encodeArrayBuffer(packet, supportsBinary, callback) {
          if (!supportsBinary) {
            return exports.encodeBase64Packet(packet, callback);
          }var data = packet.data;var contentArray = new Uint8Array(data);var resultBuffer = new Uint8Array(1 + data.byteLength);resultBuffer[0] = packets[packet.type];for (var i = 0; i < contentArray.length; i++) {
            resultBuffer[i + 1] = contentArray[i];
          }return callback(resultBuffer.buffer);
        }function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
          if (!supportsBinary) {
            return exports.encodeBase64Packet(packet, callback);
          }var fr = new FileReader();fr.onload = function () {
            packet.data = fr.result;exports.encodePacket(packet, supportsBinary, true, callback);
          };return fr.readAsArrayBuffer(packet.data);
        }function encodeBlob(packet, supportsBinary, callback) {
          if (!supportsBinary) {
            return exports.encodeBase64Packet(packet, callback);
          }if (dontSendBlobs) {
            return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
          }var length = new Uint8Array(1);length[0] = packets[packet.type];var blob = new Blob([length.buffer, packet.data]);return callback(blob);
        }exports.encodeBase64Packet = function (packet, callback) {
          var message = "b" + exports.packets[packet.type];if (Blob && packet.data instanceof global.Blob) {
            var fr = new FileReader();fr.onload = function () {
              var b64 = fr.result.split(",")[1];callback(message + b64);
            };return fr.readAsDataURL(packet.data);
          }var b64data;try {
            b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
          } catch (e) {
            var typed = new Uint8Array(packet.data);var basic = new Array(typed.length);for (var i = 0; i < typed.length; i++) {
              basic[i] = typed[i];
            }b64data = String.fromCharCode.apply(null, basic);
          }message += global.btoa(b64data);return callback(message);
        };exports.decodePacket = function (data, binaryType, utf8decode) {
          if (typeof data == "string" || data === undefined) {
            if (data.charAt(0) == "b") {
              return exports.decodeBase64Packet(data.substr(1), binaryType);
            }if (utf8decode) {
              try {
                data = utf8.decode(data);
              } catch (e) {
                return err;
              }
            }var type = data.charAt(0);if (Number(type) != type || !packetslist[type]) {
              return err;
            }if (data.length > 1) {
              return { type: packetslist[type], data: data.substring(1) };
            } else {
              return { type: packetslist[type] };
            }
          }var asArray = new Uint8Array(data);var type = asArray[0];var rest = sliceBuffer(data, 1);if (Blob && binaryType === "blob") {
            rest = new Blob([rest]);
          }return { type: packetslist[type], data: rest };
        };exports.decodeBase64Packet = function (msg, binaryType) {
          var type = packetslist[msg.charAt(0)];if (!global.ArrayBuffer) {
            return { type: type, data: { base64: true, data: msg.substr(1) } };
          }var data = base64encoder.decode(msg.substr(1));if (binaryType === "blob" && Blob) {
            data = new Blob([data]);
          }return { type: type, data: data };
        };exports.encodePayload = function (packets, supportsBinary, callback) {
          if (typeof supportsBinary == "function") {
            callback = supportsBinary;supportsBinary = null;
          }var isBinary = hasBinary(packets);if (supportsBinary && isBinary) {
            if (Blob && !dontSendBlobs) {
              return exports.encodePayloadAsBlob(packets, callback);
            }return exports.encodePayloadAsArrayBuffer(packets, callback);
          }if (!packets.length) {
            return callback("0:");
          }function setLengthHeader(message) {
            return message.length + ":" + message;
          }function encodeOne(packet, doneCallback) {
            exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {
              doneCallback(null, setLengthHeader(message));
            });
          }map(packets, encodeOne, function (err, results) {
            return callback(results.join(""));
          });
        };function map(ary, each, done) {
          var result = new Array(ary.length);var next = after(ary.length, done);var eachWithIndex = function eachWithIndex(i, el, cb) {
            each(el, function (error, msg) {
              result[i] = msg;cb(error, result);
            });
          };for (var i = 0; i < ary.length; i++) {
            eachWithIndex(i, ary[i], next);
          }
        }exports.decodePayload = function (data, binaryType, callback) {
          if (typeof data != "string") {
            return exports.decodePayloadAsBinary(data, binaryType, callback);
          }if (typeof binaryType === "function") {
            callback = binaryType;binaryType = null;
          }var packet;if (data == "") {
            return callback(err, 0, 1);
          }var length = "",
              n,
              msg;for (var i = 0, l = data.length; i < l; i++) {
            var chr = data.charAt(i);if (":" != chr) {
              length += chr;
            } else {
              if ("" == length || length != (n = Number(length))) {
                return callback(err, 0, 1);
              }msg = data.substr(i + 1, n);if (length != msg.length) {
                return callback(err, 0, 1);
              }if (msg.length) {
                packet = exports.decodePacket(msg, binaryType, true);if (err.type == packet.type && err.data == packet.data) {
                  return callback(err, 0, 1);
                }var ret = callback(packet, i + n, l);if (false === ret) return;
              }i += n;length = "";
            }
          }if (length != "") {
            return callback(err, 0, 1);
          }
        };exports.encodePayloadAsArrayBuffer = function (packets, callback) {
          if (!packets.length) {
            return callback(new ArrayBuffer(0));
          }function encodeOne(packet, doneCallback) {
            exports.encodePacket(packet, true, true, function (data) {
              return doneCallback(null, data);
            });
          }map(packets, encodeOne, function (err, encodedPackets) {
            var totalLength = encodedPackets.reduce(function (acc, p) {
              var len;if (typeof p === "string") {
                len = p.length;
              } else {
                len = p.byteLength;
              }return acc + len.toString().length + len + 2;
            }, 0);var resultArray = new Uint8Array(totalLength);var bufferIndex = 0;encodedPackets.forEach(function (p) {
              var isString = typeof p === "string";var ab = p;if (isString) {
                var view = new Uint8Array(p.length);for (var i = 0; i < p.length; i++) {
                  view[i] = p.charCodeAt(i);
                }ab = view.buffer;
              }if (isString) {
                resultArray[bufferIndex++] = 0;
              } else {
                resultArray[bufferIndex++] = 1;
              }var lenStr = ab.byteLength.toString();for (var i = 0; i < lenStr.length; i++) {
                resultArray[bufferIndex++] = parseInt(lenStr[i]);
              }resultArray[bufferIndex++] = 255;var view = new Uint8Array(ab);for (var i = 0; i < view.length; i++) {
                resultArray[bufferIndex++] = view[i];
              }
            });return callback(resultArray.buffer);
          });
        };exports.encodePayloadAsBlob = function (packets, callback) {
          function encodeOne(packet, doneCallback) {
            exports.encodePacket(packet, true, true, function (encoded) {
              var binaryIdentifier = new Uint8Array(1);binaryIdentifier[0] = 1;if (typeof encoded === "string") {
                var view = new Uint8Array(encoded.length);for (var i = 0; i < encoded.length; i++) {
                  view[i] = encoded.charCodeAt(i);
                }encoded = view.buffer;binaryIdentifier[0] = 0;
              }var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;var lenStr = len.toString();var lengthAry = new Uint8Array(lenStr.length + 1);for (var i = 0; i < lenStr.length; i++) {
                lengthAry[i] = parseInt(lenStr[i]);
              }lengthAry[lenStr.length] = 255;if (Blob) {
                var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);doneCallback(null, blob);
              }
            });
          }map(packets, encodeOne, function (err, results) {
            return callback(new Blob(results));
          });
        };exports.decodePayloadAsBinary = function (data, binaryType, callback) {
          if (typeof binaryType === "function") {
            callback = binaryType;binaryType = null;
          }var bufferTail = data;var buffers = [];var numberTooLong = false;while (bufferTail.byteLength > 0) {
            var tailArray = new Uint8Array(bufferTail);var isString = tailArray[0] === 0;var msgLength = "";for (var i = 1;; i++) {
              if (tailArray[i] == 255) break;if (msgLength.length > 310) {
                numberTooLong = true;break;
              }msgLength += tailArray[i];
            }if (numberTooLong) return callback(err, 0, 1);bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);msgLength = parseInt(msgLength);var msg = sliceBuffer(bufferTail, 0, msgLength);if (isString) {
              try {
                msg = String.fromCharCode.apply(null, new Uint8Array(msg));
              } catch (e) {
                var typed = new Uint8Array(msg);msg = "";for (var i = 0; i < typed.length; i++) {
                  msg += String.fromCharCode(typed[i]);
                }
              }
            }buffers.push(msg);bufferTail = sliceBuffer(bufferTail, msgLength);
          }var total = buffers.length;buffers.forEach(function (buffer, i) {
            callback(exports.decodePacket(buffer, binaryType, true), i, total);
          });
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./keys": 20, after: 11, "arraybuffer.slice": 12, "base64-arraybuffer": 13, blob: 14, "has-binary": 21, utf8: 29 }], 20: [function (_dereq_, module, exports) {
      module.exports = Object.keys || function keys(obj) {
        var arr = [];var has = Object.prototype.hasOwnProperty;for (var i in obj) {
          if (has.call(obj, i)) {
            arr.push(i);
          }
        }return arr;
      };
    }, {}], 21: [function (_dereq_, module, exports) {
      (function (global) {
        var isArray = _dereq_("isarray");module.exports = hasBinary;function hasBinary(data) {
          function _hasBinary(obj) {
            if (!obj) return false;if (global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
              return true;
            }if (isArray(obj)) {
              for (var i = 0; i < obj.length; i++) {
                if (_hasBinary(obj[i])) {
                  return true;
                }
              }
            } else if (obj && "object" == typeof obj) {
              if (obj.toJSON) {
                obj = obj.toJSON();
              }for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
                  return true;
                }
              }
            }return false;
          }return _hasBinary(data);
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { isarray: 24 }], 22: [function (_dereq_, module, exports) {
      try {
        module.exports = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
      } catch (err) {
        module.exports = false;
      }
    }, {}], 23: [function (_dereq_, module, exports) {
      var indexOf = [].indexOf;module.exports = function (arr, obj) {
        if (indexOf) return arr.indexOf(obj);for (var i = 0; i < arr.length; ++i) {
          if (arr[i] === obj) return i;
        }return -1;
      };
    }, {}], 24: [function (_dereq_, module, exports) {
      module.exports = Array.isArray || function (arr) {
        return Object.prototype.toString.call(arr) == "[object Array]";
      };
    }, {}], 25: [function (_dereq_, module, exports) {
      var s = 1e3;var m = s * 60;var h = m * 60;var d = h * 24;var y = d * 365.25;module.exports = function (val, options) {
        options = options || {};if ("string" == typeof val) return parse(val);return options.long ? long(val) : short(val);
      };function parse(str) {
        str = "" + str;if (str.length > 1e4) return;var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);if (!match) return;var n = parseFloat(match[1]);var type = (match[2] || "ms").toLowerCase();switch (type) {case "years":case "year":case "yrs":case "yr":case "y":
            return n * y;case "days":case "day":case "d":
            return n * d;case "hours":case "hour":case "hrs":case "hr":case "h":
            return n * h;case "minutes":case "minute":case "mins":case "min":case "m":
            return n * m;case "seconds":case "second":case "secs":case "sec":case "s":
            return n * s;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":
            return n;}
      }function short(ms) {
        if (ms >= d) return Math.round(ms / d) + "d";if (ms >= h) return Math.round(ms / h) + "h";if (ms >= m) return Math.round(ms / m) + "m";if (ms >= s) return Math.round(ms / s) + "s";return ms + "ms";
      }function long(ms) {
        return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
      }function plural(ms, n, name) {
        if (ms < n) return;if (ms < n * 1.5) return Math.floor(ms / n) + " " + name;return Math.ceil(ms / n) + " " + name + "s";
      }
    }, {}], 26: [function (_dereq_, module, exports) {
      (function (global) {
        var rvalidchars = /^[\],:{}\s]*$/;var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;var rtrimLeft = /^\s+/;var rtrimRight = /\s+$/;module.exports = function parsejson(data) {
          if ("string" != typeof data || !data) {
            return null;
          }data = data.replace(rtrimLeft, "").replace(rtrimRight, "");if (global.JSON && JSON.parse) {
            return JSON.parse(data);
          }if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
            return new Function("return " + data)();
          }
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 27: [function (_dereq_, module, exports) {
      exports.encode = function (obj) {
        var str = "";for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            if (str.length) str += "&";str += encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]);
          }
        }return str;
      };exports.decode = function (qs) {
        var qry = {};var pairs = qs.split("&");for (var i = 0, l = pairs.length; i < l; i++) {
          var pair = pairs[i].split("=");qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
        }return qry;
      };
    }, {}], 28: [function (_dereq_, module, exports) {
      var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;var parts = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];module.exports = function parseuri(str) {
        var src = str,
            b = str.indexOf("["),
            e = str.indexOf("]");if (b != -1 && e != -1) {
          str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
        }var m = re.exec(str || ""),
            uri = {},
            i = 14;while (i--) {
          uri[parts[i]] = m[i] || "";
        }if (b != -1 && e != -1) {
          uri.source = src;uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");uri.ipv6uri = true;
        }return uri;
      };
    }, {}], 29: [function (_dereq_, module, exports) {
      (function (global) {
        (function (root) {
          var freeExports = typeof exports == "object" && exports;var freeModule = typeof module == "object" && module && module.exports == freeExports && module;var freeGlobal = typeof global == "object" && global;if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
            root = freeGlobal;
          }var stringFromCharCode = String.fromCharCode;function ucs2decode(string) {
            var output = [];var counter = 0;var length = string.length;var value;var extra;while (counter < length) {
              value = string.charCodeAt(counter++);if (value >= 55296 && value <= 56319 && counter < length) {
                extra = string.charCodeAt(counter++);if ((extra & 64512) == 56320) {
                  output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                } else {
                  output.push(value);counter--;
                }
              } else {
                output.push(value);
              }
            }return output;
          }function ucs2encode(array) {
            var length = array.length;var index = -1;var value;var output = "";while (++index < length) {
              value = array[index];if (value > 65535) {
                value -= 65536;output += stringFromCharCode(value >>> 10 & 1023 | 55296);value = 56320 | value & 1023;
              }output += stringFromCharCode(value);
            }return output;
          }function checkScalarValue(codePoint) {
            if (codePoint >= 55296 && codePoint <= 57343) {
              throw Error("Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value");
            }
          }function createByte(codePoint, shift) {
            return stringFromCharCode(codePoint >> shift & 63 | 128);
          }function encodeCodePoint(codePoint) {
            if ((codePoint & 4294967168) == 0) {
              return stringFromCharCode(codePoint);
            }var symbol = "";if ((codePoint & 4294965248) == 0) {
              symbol = stringFromCharCode(codePoint >> 6 & 31 | 192);
            } else if ((codePoint & 4294901760) == 0) {
              checkScalarValue(codePoint);symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);symbol += createByte(codePoint, 6);
            } else if ((codePoint & 4292870144) == 0) {
              symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);symbol += createByte(codePoint, 12);symbol += createByte(codePoint, 6);
            }symbol += stringFromCharCode(codePoint & 63 | 128);return symbol;
          }function utf8encode(string) {
            var codePoints = ucs2decode(string);var length = codePoints.length;var index = -1;var codePoint;var byteString = "";while (++index < length) {
              codePoint = codePoints[index];byteString += encodeCodePoint(codePoint);
            }return byteString;
          }function readContinuationByte() {
            if (byteIndex >= byteCount) {
              throw Error("Invalid byte index");
            }var continuationByte = byteArray[byteIndex] & 255;byteIndex++;if ((continuationByte & 192) == 128) {
              return continuationByte & 63;
            }throw Error("Invalid continuation byte");
          }function decodeSymbol() {
            var byte1;var byte2;var byte3;var byte4;var codePoint;if (byteIndex > byteCount) {
              throw Error("Invalid byte index");
            }if (byteIndex == byteCount) {
              return false;
            }byte1 = byteArray[byteIndex] & 255;byteIndex++;if ((byte1 & 128) == 0) {
              return byte1;
            }if ((byte1 & 224) == 192) {
              var byte2 = readContinuationByte();codePoint = (byte1 & 31) << 6 | byte2;if (codePoint >= 128) {
                return codePoint;
              } else {
                throw Error("Invalid continuation byte");
              }
            }if ((byte1 & 240) == 224) {
              byte2 = readContinuationByte();byte3 = readContinuationByte();codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;if (codePoint >= 2048) {
                checkScalarValue(codePoint);return codePoint;
              } else {
                throw Error("Invalid continuation byte");
              }
            }if ((byte1 & 248) == 240) {
              byte2 = readContinuationByte();byte3 = readContinuationByte();byte4 = readContinuationByte();codePoint = (byte1 & 15) << 18 | byte2 << 12 | byte3 << 6 | byte4;if (codePoint >= 65536 && codePoint <= 1114111) {
                return codePoint;
              }
            }throw Error("Invalid UTF-8 detected");
          }var byteArray;var byteCount;var byteIndex;function utf8decode(byteString) {
            byteArray = ucs2decode(byteString);byteCount = byteArray.length;byteIndex = 0;var codePoints = [];var tmp;while ((tmp = decodeSymbol()) !== false) {
              codePoints.push(tmp);
            }return ucs2encode(codePoints);
          }var utf8 = { version: "2.0.0", encode: utf8encode, decode: utf8decode };if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
            define(function () {
              return utf8;
            });
          } else if (freeExports && !freeExports.nodeType) {
            if (freeModule) {
              freeModule.exports = utf8;
            } else {
              var object = {};var hasOwnProperty = object.hasOwnProperty;for (var key in utf8) {
                hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
              }
            }
          } else {
            root.utf8 = utf8;
          }
        })(this);
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 30: [function (_dereq_, module, exports) {
      "use strict";var alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),
          length = 64,
          map = {},
          seed = 0,
          i = 0,
          prev;function encode(num) {
        var encoded = "";do {
          encoded = alphabet[num % length] + encoded;num = Math.floor(num / length);
        } while (num > 0);return encoded;
      }function decode(str) {
        var decoded = 0;for (i = 0; i < str.length; i++) {
          decoded = decoded * length + map[str.charAt(i)];
        }return decoded;
      }function yeast() {
        var now = encode(+new Date());if (now !== prev) return seed = 0, prev = now;return now + "." + encode(seed++);
      }for (; i < length; i++) map[alphabet[i]] = i;yeast.encode = encode;yeast.decode = decode;module.exports = yeast;
    }, {}], 31: [function (_dereq_, module, exports) {
      var url = _dereq_("./url");var parser = _dereq_("socket.io-parser");var Manager = _dereq_("./manager");var debug = _dereq_("debug")("socket.io-client");module.exports = exports = lookup;var cache = exports.managers = {};function lookup(uri, opts) {
        if (typeof uri == "object") {
          opts = uri;uri = undefined;
        }opts = opts || {};var parsed = url(uri);var source = parsed.source;var id = parsed.id;var path = parsed.path;var sameNamespace = cache[id] && path in cache[id].nsps;var newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;var io;if (newConnection) {
          debug("ignoring socket cache for %s", source);io = Manager(source, opts);
        } else {
          if (!cache[id]) {
            debug("new io instance for %s", source);cache[id] = Manager(source, opts);
          }io = cache[id];
        }return io.socket(parsed.path);
      }exports.protocol = parser.protocol;exports.connect = lookup;exports.Manager = _dereq_("./manager");exports.Socket = _dereq_("./socket");
    }, { "./manager": 32, "./socket": 34, "./url": 35, debug: 39, "socket.io-parser": 47 }], 32: [function (_dereq_, module, exports) {
      var eio = _dereq_("engine.io-client");var Socket = _dereq_("./socket");var Emitter = _dereq_("component-emitter");var parser = _dereq_("socket.io-parser");var on = _dereq_("./on");var bind = _dereq_("component-bind");var debug = _dereq_("debug")("socket.io-client:manager");var indexOf = _dereq_("indexof");var Backoff = _dereq_("backo2");var has = Object.prototype.hasOwnProperty;module.exports = Manager;function Manager(uri, opts) {
        if (!(this instanceof Manager)) return new Manager(uri, opts);if (uri && "object" == typeof uri) {
          opts = uri;uri = undefined;
        }opts = opts || {};opts.path = opts.path || "/socket.io";this.nsps = {};this.subs = [];this.opts = opts;this.reconnection(opts.reconnection !== false);this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);this.reconnectionDelay(opts.reconnectionDelay || 1e3);this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);this.randomizationFactor(opts.randomizationFactor || .5);this.backoff = new Backoff({ min: this.reconnectionDelay(), max: this.reconnectionDelayMax(), jitter: this.randomizationFactor() });this.timeout(null == opts.timeout ? 2e4 : opts.timeout);this.readyState = "closed";this.uri = uri;this.connecting = [];this.lastPing = null;this.encoding = false;this.packetBuffer = [];this.encoder = new parser.Encoder();this.decoder = new parser.Decoder();this.autoConnect = opts.autoConnect !== false;if (this.autoConnect) this.open();
      }Manager.prototype.emitAll = function () {
        this.emit.apply(this, arguments);for (var nsp in this.nsps) {
          if (has.call(this.nsps, nsp)) {
            this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
          }
        }
      };Manager.prototype.updateSocketIds = function () {
        for (var nsp in this.nsps) {
          if (has.call(this.nsps, nsp)) {
            this.nsps[nsp].id = this.engine.id;
          }
        }
      };Emitter(Manager.prototype);Manager.prototype.reconnection = function (v) {
        if (!arguments.length) return this._reconnection;this._reconnection = !!v;return this;
      };Manager.prototype.reconnectionAttempts = function (v) {
        if (!arguments.length) return this._reconnectionAttempts;this._reconnectionAttempts = v;return this;
      };Manager.prototype.reconnectionDelay = function (v) {
        if (!arguments.length) return this._reconnectionDelay;this._reconnectionDelay = v;this.backoff && this.backoff.setMin(v);return this;
      };Manager.prototype.randomizationFactor = function (v) {
        if (!arguments.length) return this._randomizationFactor;this._randomizationFactor = v;this.backoff && this.backoff.setJitter(v);return this;
      };Manager.prototype.reconnectionDelayMax = function (v) {
        if (!arguments.length) return this._reconnectionDelayMax;this._reconnectionDelayMax = v;this.backoff && this.backoff.setMax(v);return this;
      };Manager.prototype.timeout = function (v) {
        if (!arguments.length) return this._timeout;this._timeout = v;return this;
      };Manager.prototype.maybeReconnectOnOpen = function () {
        if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
          this.reconnect();
        }
      };Manager.prototype.open = Manager.prototype.connect = function (fn) {
        debug("readyState %s", this.readyState);if (~this.readyState.indexOf("open")) return this;debug("opening %s", this.uri);this.engine = eio(this.uri, this.opts);var socket = this.engine;var self = this;this.readyState = "opening";this.skipReconnect = false;var openSub = on(socket, "open", function () {
          self.onopen();fn && fn();
        });var errorSub = on(socket, "error", function (data) {
          debug("connect_error");self.cleanup();self.readyState = "closed";self.emitAll("connect_error", data);if (fn) {
            var err = new Error("Connection error");err.data = data;fn(err);
          } else {
            self.maybeReconnectOnOpen();
          }
        });if (false !== this._timeout) {
          var timeout = this._timeout;debug("connect attempt will timeout after %d", timeout);var timer = setTimeout(function () {
            debug("connect attempt timed out after %d", timeout);openSub.destroy();socket.close();socket.emit("error", "timeout");self.emitAll("connect_timeout", timeout);
          }, timeout);this.subs.push({ destroy: function destroy() {
              clearTimeout(timer);
            } });
        }this.subs.push(openSub);this.subs.push(errorSub);return this;
      };Manager.prototype.onopen = function () {
        debug("open");this.cleanup();this.readyState = "open";this.emit("open");var socket = this.engine;this.subs.push(on(socket, "data", bind(this, "ondata")));this.subs.push(on(socket, "ping", bind(this, "onping")));this.subs.push(on(socket, "pong", bind(this, "onpong")));this.subs.push(on(socket, "error", bind(this, "onerror")));this.subs.push(on(socket, "close", bind(this, "onclose")));this.subs.push(on(this.decoder, "decoded", bind(this, "ondecoded")));
      };Manager.prototype.onping = function () {
        this.lastPing = new Date();this.emitAll("ping");
      };Manager.prototype.onpong = function () {
        this.emitAll("pong", new Date() - this.lastPing);
      };Manager.prototype.ondata = function (data) {
        this.decoder.add(data);
      };Manager.prototype.ondecoded = function (packet) {
        this.emit("packet", packet);
      };Manager.prototype.onerror = function (err) {
        debug("error", err);this.emitAll("error", err);
      };Manager.prototype.socket = function (nsp) {
        var socket = this.nsps[nsp];if (!socket) {
          socket = new Socket(this, nsp);this.nsps[nsp] = socket;var self = this;socket.on("connecting", onConnecting);
          socket.on("connect", function () {
            socket.id = self.engine.id;
          });if (this.autoConnect) {
            onConnecting();
          }
        }function onConnecting() {
          if (! ~indexOf(self.connecting, socket)) {
            self.connecting.push(socket);
          }
        }return socket;
      };Manager.prototype.destroy = function (socket) {
        var index = indexOf(this.connecting, socket);if (~index) this.connecting.splice(index, 1);if (this.connecting.length) return;this.close();
      };Manager.prototype.packet = function (packet) {
        debug("writing packet %j", packet);var self = this;if (!self.encoding) {
          self.encoding = true;this.encoder.encode(packet, function (encodedPackets) {
            for (var i = 0; i < encodedPackets.length; i++) {
              self.engine.write(encodedPackets[i], packet.options);
            }self.encoding = false;self.processPacketQueue();
          });
        } else {
          self.packetBuffer.push(packet);
        }
      };Manager.prototype.processPacketQueue = function () {
        if (this.packetBuffer.length > 0 && !this.encoding) {
          var pack = this.packetBuffer.shift();this.packet(pack);
        }
      };Manager.prototype.cleanup = function () {
        debug("cleanup");var sub;while (sub = this.subs.shift()) sub.destroy();this.packetBuffer = [];this.encoding = false;this.lastPing = null;this.decoder.destroy();
      };Manager.prototype.close = Manager.prototype.disconnect = function () {
        debug("disconnect");this.skipReconnect = true;this.reconnecting = false;if ("opening" == this.readyState) {
          this.cleanup();
        }this.backoff.reset();this.readyState = "closed";if (this.engine) this.engine.close();
      };Manager.prototype.onclose = function (reason) {
        debug("onclose");this.cleanup();this.backoff.reset();this.readyState = "closed";this.emit("close", reason);if (this._reconnection && !this.skipReconnect) {
          this.reconnect();
        }
      };Manager.prototype.reconnect = function () {
        if (this.reconnecting || this.skipReconnect) return this;var self = this;if (this.backoff.attempts >= this._reconnectionAttempts) {
          debug("reconnect failed");this.backoff.reset();this.emitAll("reconnect_failed");this.reconnecting = false;
        } else {
          var delay = this.backoff.duration();debug("will wait %dms before reconnect attempt", delay);this.reconnecting = true;var timer = setTimeout(function () {
            if (self.skipReconnect) return;debug("attempting reconnect");self.emitAll("reconnect_attempt", self.backoff.attempts);self.emitAll("reconnecting", self.backoff.attempts);if (self.skipReconnect) return;self.open(function (err) {
              if (err) {
                debug("reconnect attempt error");self.reconnecting = false;self.reconnect();self.emitAll("reconnect_error", err.data);
              } else {
                debug("reconnect success");self.onreconnect();
              }
            });
          }, delay);this.subs.push({ destroy: function destroy() {
              clearTimeout(timer);
            } });
        }
      };Manager.prototype.onreconnect = function () {
        var attempt = this.backoff.attempts;this.reconnecting = false;this.backoff.reset();this.updateSocketIds();this.emitAll("reconnect", attempt);
      };
    }, { "./on": 33, "./socket": 34, backo2: 36, "component-bind": 37, "component-emitter": 38, debug: 39, "engine.io-client": 1, indexof: 42, "socket.io-parser": 47 }], 33: [function (_dereq_, module, exports) {
      module.exports = on;function on(obj, ev, fn) {
        obj.on(ev, fn);return { destroy: function destroy() {
            obj.removeListener(ev, fn);
          } };
      }
    }, {}], 34: [function (_dereq_, module, exports) {
      var parser = _dereq_("socket.io-parser");var Emitter = _dereq_("component-emitter");var toArray = _dereq_("to-array");var on = _dereq_("./on");var bind = _dereq_("component-bind");var debug = _dereq_("debug")("socket.io-client:socket");var hasBin = _dereq_("has-binary");module.exports = exports = Socket;var events = { connect: 1, connect_error: 1, connect_timeout: 1, connecting: 1, disconnect: 1, error: 1, reconnect: 1, reconnect_attempt: 1, reconnect_failed: 1, reconnect_error: 1, reconnecting: 1, ping: 1, pong: 1 };var emit = Emitter.prototype.emit;function Socket(io, nsp) {
        this.io = io;this.nsp = nsp;this.json = this;this.ids = 0;this.acks = {};this.receiveBuffer = [];this.sendBuffer = [];this.connected = false;this.disconnected = true;if (this.io.autoConnect) this.open();
      }Emitter(Socket.prototype);Socket.prototype.subEvents = function () {
        if (this.subs) return;var io = this.io;this.subs = [on(io, "open", bind(this, "onopen")), on(io, "packet", bind(this, "onpacket")), on(io, "close", bind(this, "onclose"))];
      };Socket.prototype.open = Socket.prototype.connect = function () {
        if (this.connected) return this;this.subEvents();this.io.open();if ("open" == this.io.readyState) this.onopen();this.emit("connecting");return this;
      };Socket.prototype.send = function () {
        var args = toArray(arguments);args.unshift("message");this.emit.apply(this, args);return this;
      };Socket.prototype.emit = function (ev) {
        if (events.hasOwnProperty(ev)) {
          emit.apply(this, arguments);return this;
        }var args = toArray(arguments);var parserType = parser.EVENT;if (hasBin(args)) {
          parserType = parser.BINARY_EVENT;
        }var packet = { type: parserType, data: args };packet.options = {};packet.options.compress = !this.flags || false !== this.flags.compress;if ("function" == typeof args[args.length - 1]) {
          debug("emitting packet with ack id %d", this.ids);this.acks[this.ids] = args.pop();packet.id = this.ids++;
        }if (this.connected) {
          this.packet(packet);
        } else {
          this.sendBuffer.push(packet);
        }delete this.flags;return this;
      };Socket.prototype.packet = function (packet) {
        packet.nsp = this.nsp;this.io.packet(packet);
      };Socket.prototype.onopen = function () {
        debug("transport is open - connecting");if ("/" != this.nsp) {
          this.packet({ type: parser.CONNECT });
        }
      };Socket.prototype.onclose = function (reason) {
        debug("close (%s)", reason);this.connected = false;this.disconnected = true;delete this.id;this.emit("disconnect", reason);
      };Socket.prototype.onpacket = function (packet) {
        if (packet.nsp != this.nsp) return;switch (packet.type) {case parser.CONNECT:
            this.onconnect();break;case parser.EVENT:
            this.onevent(packet);break;case parser.BINARY_EVENT:
            this.onevent(packet);break;case parser.ACK:
            this.onack(packet);break;case parser.BINARY_ACK:
            this.onack(packet);break;case parser.DISCONNECT:
            this.ondisconnect();break;case parser.ERROR:
            this.emit("error", packet.data);break;}
      };Socket.prototype.onevent = function (packet) {
        var args = packet.data || [];debug("emitting event %j", args);if (null != packet.id) {
          debug("attaching ack callback to event");args.push(this.ack(packet.id));
        }if (this.connected) {
          emit.apply(this, args);
        } else {
          this.receiveBuffer.push(args);
        }
      };Socket.prototype.ack = function (id) {
        var self = this;var sent = false;return function () {
          if (sent) return;sent = true;var args = toArray(arguments);debug("sending ack %j", args);var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;self.packet({ type: type, id: id, data: args });
        };
      };Socket.prototype.onack = function (packet) {
        var ack = this.acks[packet.id];if ("function" == typeof ack) {
          debug("calling ack %s with %j", packet.id, packet.data);ack.apply(this, packet.data);delete this.acks[packet.id];
        } else {
          debug("bad ack %s", packet.id);
        }
      };Socket.prototype.onconnect = function () {
        this.connected = true;this.disconnected = false;this.emit("connect");this.emitBuffered();
      };Socket.prototype.emitBuffered = function () {
        var i;for (i = 0; i < this.receiveBuffer.length; i++) {
          emit.apply(this, this.receiveBuffer[i]);
        }this.receiveBuffer = [];for (i = 0; i < this.sendBuffer.length; i++) {
          this.packet(this.sendBuffer[i]);
        }this.sendBuffer = [];
      };Socket.prototype.ondisconnect = function () {
        debug("server disconnect (%s)", this.nsp);this.destroy();this.onclose("io server disconnect");
      };Socket.prototype.destroy = function () {
        if (this.subs) {
          for (var i = 0; i < this.subs.length; i++) {
            this.subs[i].destroy();
          }this.subs = null;
        }this.io.destroy(this);
      };Socket.prototype.close = Socket.prototype.disconnect = function () {
        if (this.connected) {
          debug("performing disconnect (%s)", this.nsp);this.packet({ type: parser.DISCONNECT });
        }this.destroy();if (this.connected) {
          this.onclose("io client disconnect");
        }return this;
      };Socket.prototype.compress = function (compress) {
        this.flags = this.flags || {};this.flags.compress = compress;return this;
      };
    }, { "./on": 33, "component-bind": 37, "component-emitter": 38, debug: 39, "has-binary": 41, "socket.io-parser": 47, "to-array": 51 }], 35: [function (_dereq_, module, exports) {
      (function (global) {
        var parseuri = _dereq_("parseuri");var debug = _dereq_("debug")("socket.io-client:url");module.exports = url;function url(uri, loc) {
          var obj = uri;var loc = loc || global.location;if (null == uri) uri = loc.protocol + "//" + loc.host;if ("string" == typeof uri) {
            if ("/" == uri.charAt(0)) {
              if ("/" == uri.charAt(1)) {
                uri = loc.protocol + uri;
              } else {
                uri = loc.host + uri;
              }
            }if (!/^(https?|wss?):\/\//.test(uri)) {
              debug("protocol-less url %s", uri);if ("undefined" != typeof loc) {
                uri = loc.protocol + "//" + uri;
              } else {
                uri = "https://" + uri;
              }
            }debug("parse %s", uri);obj = parseuri(uri);
          }if (!obj.port) {
            if (/^(http|ws)$/.test(obj.protocol)) {
              obj.port = "80";
            } else if (/^(http|ws)s$/.test(obj.protocol)) {
              obj.port = "443";
            }
          }obj.path = obj.path || "/";var ipv6 = obj.host.indexOf(":") !== -1;var host = ipv6 ? "[" + obj.host + "]" : obj.host;obj.id = obj.protocol + "://" + host + ":" + obj.port;obj.href = obj.protocol + "://" + host + (loc && loc.port == obj.port ? "" : ":" + obj.port);return obj;
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { debug: 39, parseuri: 45 }], 36: [function (_dereq_, module, exports) {
      module.exports = Backoff;function Backoff(opts) {
        opts = opts || {};this.ms = opts.min || 100;this.max = opts.max || 1e4;this.factor = opts.factor || 2;this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;this.attempts = 0;
      }Backoff.prototype.duration = function () {
        var ms = this.ms * Math.pow(this.factor, this.attempts++);if (this.jitter) {
          var rand = Math.random();var deviation = Math.floor(rand * this.jitter * ms);ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
        }return Math.min(ms, this.max) | 0;
      };Backoff.prototype.reset = function () {
        this.attempts = 0;
      };Backoff.prototype.setMin = function (min) {
        this.ms = min;
      };Backoff.prototype.setMax = function (max) {
        this.max = max;
      };Backoff.prototype.setJitter = function (jitter) {
        this.jitter = jitter;
      };
    }, {}], 37: [function (_dereq_, module, exports) {
      var slice = [].slice;module.exports = function (obj, fn) {
        if ("string" == typeof fn) fn = obj[fn];if ("function" != typeof fn) throw new Error("bind() requires a function");var args = slice.call(arguments, 2);return function () {
          return fn.apply(obj, args.concat(slice.call(arguments)));
        };
      };
    }, {}], 38: [function (_dereq_, module, exports) {
      module.exports = Emitter;function Emitter(obj) {
        if (obj) return mixin(obj);
      }function mixin(obj) {
        for (var key in Emitter.prototype) {
          obj[key] = Emitter.prototype[key];
        }return obj;
      }Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};(this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);return this;
      };Emitter.prototype.once = function (event, fn) {
        function on() {
          this.off(event, on);fn.apply(this, arguments);
        }on.fn = fn;this.on(event, on);return this;
      };Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};if (0 == arguments.length) {
          this._callbacks = {};return this;
        }var callbacks = this._callbacks["$" + event];if (!callbacks) return this;if (1 == arguments.length) {
          delete this._callbacks["$" + event];return this;
        }var cb;for (var i = 0; i < callbacks.length; i++) {
          cb = callbacks[i];if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);break;
          }
        }return this;
      };Emitter.prototype.emit = function (event) {
        this._callbacks = this._callbacks || {};var args = [].slice.call(arguments, 1),
            callbacks = this._callbacks["$" + event];if (callbacks) {
          callbacks = callbacks.slice(0);for (var i = 0, len = callbacks.length; i < len; ++i) {
            callbacks[i].apply(this, args);
          }
        }return this;
      };Emitter.prototype.listeners = function (event) {
        this._callbacks = this._callbacks || {};return this._callbacks["$" + event] || [];
      };Emitter.prototype.hasListeners = function (event) {
        return !!this.listeners(event).length;
      };
    }, {}], 39: [function (_dereq_, module, exports) {
      arguments[4][17][0].apply(exports, arguments);
    }, { "./debug": 40, dup: 17 }], 40: [function (_dereq_, module, exports) {
      arguments[4][18][0].apply(exports, arguments);
    }, { dup: 18, ms: 44 }], 41: [function (_dereq_, module, exports) {
      (function (global) {
        var isArray = _dereq_("isarray");module.exports = hasBinary;function hasBinary(data) {
          function _hasBinary(obj) {
            if (!obj) return false;if (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
              return true;
            }if (isArray(obj)) {
              for (var i = 0; i < obj.length; i++) {
                if (_hasBinary(obj[i])) {
                  return true;
                }
              }
            } else if (obj && "object" == typeof obj) {
              if (obj.toJSON && "function" == typeof obj.toJSON) {
                obj = obj.toJSON();
              }for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
                  return true;
                }
              }
            }return false;
          }return _hasBinary(data);
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { isarray: 43 }], 42: [function (_dereq_, module, exports) {
      arguments[4][23][0].apply(exports, arguments);
    }, { dup: 23 }], 43: [function (_dereq_, module, exports) {
      arguments[4][24][0].apply(exports, arguments);
    }, { dup: 24 }], 44: [function (_dereq_, module, exports) {
      arguments[4][25][0].apply(exports, arguments);
    }, { dup: 25 }], 45: [function (_dereq_, module, exports) {
      arguments[4][28][0].apply(exports, arguments);
    }, { dup: 28 }], 46: [function (_dereq_, module, exports) {
      (function (global) {
        var isArray = _dereq_("isarray");var isBuf = _dereq_("./is-buffer");exports.deconstructPacket = function (packet) {
          var buffers = [];var packetData = packet.data;function _deconstructPacket(data) {
            if (!data) return data;if (isBuf(data)) {
              var placeholder = { _placeholder: true, num: buffers.length };buffers.push(data);return placeholder;
            } else if (isArray(data)) {
              var newData = new Array(data.length);for (var i = 0; i < data.length; i++) {
                newData[i] = _deconstructPacket(data[i]);
              }return newData;
            } else if ("object" == typeof data && !(data instanceof Date)) {
              var newData = {};for (var key in data) {
                newData[key] = _deconstructPacket(data[key]);
              }return newData;
            }return data;
          }var pack = packet;pack.data = _deconstructPacket(packetData);pack.attachments = buffers.length;return { packet: pack, buffers: buffers };
        };exports.reconstructPacket = function (packet, buffers) {
          var curPlaceHolder = 0;function _reconstructPacket(data) {
            if (data && data._placeholder) {
              var buf = buffers[data.num];return buf;
            } else if (isArray(data)) {
              for (var i = 0; i < data.length; i++) {
                data[i] = _reconstructPacket(data[i]);
              }return data;
            } else if (data && "object" == typeof data) {
              for (var key in data) {
                data[key] = _reconstructPacket(data[key]);
              }return data;
            }return data;
          }packet.data = _reconstructPacket(packet.data);packet.attachments = undefined;return packet;
        };exports.removeBlobs = function (data, callback) {
          function _removeBlobs(obj, curKey, containingObject) {
            if (!obj) return obj;if (global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
              pendingBlobs++;var fileReader = new FileReader();fileReader.onload = function () {
                if (containingObject) {
                  containingObject[curKey] = this.result;
                } else {
                  bloblessData = this.result;
                }if (! --pendingBlobs) {
                  callback(bloblessData);
                }
              };fileReader.readAsArrayBuffer(obj);
            } else if (isArray(obj)) {
              for (var i = 0; i < obj.length; i++) {
                _removeBlobs(obj[i], i, obj);
              }
            } else if (obj && "object" == typeof obj && !isBuf(obj)) {
              for (var key in obj) {
                _removeBlobs(obj[key], key, obj);
              }
            }
          }var pendingBlobs = 0;var bloblessData = data;_removeBlobs(bloblessData);if (!pendingBlobs) {
            callback(bloblessData);
          }
        };
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, { "./is-buffer": 48, isarray: 43 }], 47: [function (_dereq_, module, exports) {
      var debug = _dereq_("debug")("socket.io-parser");var json = _dereq_("json3");var isArray = _dereq_("isarray");var Emitter = _dereq_("component-emitter");var binary = _dereq_("./binary");var isBuf = _dereq_("./is-buffer");exports.protocol = 4;exports.types = ["CONNECT", "DISCONNECT", "EVENT", "BINARY_EVENT", "ACK", "BINARY_ACK", "ERROR"];exports.CONNECT = 0;exports.DISCONNECT = 1;exports.EVENT = 2;exports.ACK = 3;exports.ERROR = 4;exports.BINARY_EVENT = 5;exports.BINARY_ACK = 6;exports.Encoder = Encoder;exports.Decoder = Decoder;function Encoder() {}Encoder.prototype.encode = function (obj, callback) {
        debug("encoding packet %j", obj);if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
          encodeAsBinary(obj, callback);
        } else {
          var encoding = encodeAsString(obj);callback([encoding]);
        }
      };function encodeAsString(obj) {
        var str = "";var nsp = false;str += obj.type;if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
          str += obj.attachments;str += "-";
        }if (obj.nsp && "/" != obj.nsp) {
          nsp = true;str += obj.nsp;
        }if (null != obj.id) {
          if (nsp) {
            str += ",";nsp = false;
          }str += obj.id;
        }if (null != obj.data) {
          if (nsp) str += ",";str += json.stringify(obj.data);
        }debug("encoded %j as %s", obj, str);return str;
      }function encodeAsBinary(obj, callback) {
        function writeEncoding(bloblessData) {
          var deconstruction = binary.deconstructPacket(bloblessData);var pack = encodeAsString(deconstruction.packet);var buffers = deconstruction.buffers;buffers.unshift(pack);callback(buffers);
        }binary.removeBlobs(obj, writeEncoding);
      }function Decoder() {
        this.reconstructor = null;
      }Emitter(Decoder.prototype);Decoder.prototype.add = function (obj) {
        var packet;if ("string" == typeof obj) {
          packet = decodeString(obj);if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {
            this.reconstructor = new BinaryReconstructor(packet);if (this.reconstructor.reconPack.attachments === 0) {
              this.emit("decoded", packet);
            }
          } else {
            this.emit("decoded", packet);
          }
        } else if (isBuf(obj) || obj.base64) {
          if (!this.reconstructor) {
            throw new Error("got binary data when not reconstructing a packet");
          } else {
            packet = this.reconstructor.takeBinaryData(obj);if (packet) {
              this.reconstructor = null;this.emit("decoded", packet);
            }
          }
        } else {
          throw new Error("Unknown type: " + obj);
        }
      };function decodeString(str) {
        var p = {};var i = 0;p.type = Number(str.charAt(0));if (null == exports.types[p.type]) return error();if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
          var buf = "";while (str.charAt(++i) != "-") {
            buf += str.charAt(i);if (i == str.length) break;
          }if (buf != Number(buf) || str.charAt(i) != "-") {
            throw new Error("Illegal attachments");
          }p.attachments = Number(buf);
        }if ("/" == str.charAt(i + 1)) {
          p.nsp = "";while (++i) {
            var c = str.charAt(i);if ("," == c) break;p.nsp += c;if (i == str.length) break;
          }
        } else {
          p.nsp = "/";
        }var next = str.charAt(i + 1);if ("" !== next && Number(next) == next) {
          p.id = "";while (++i) {
            var c = str.charAt(i);if (null == c || Number(c) != c) {
              --i;break;
            }p.id += str.charAt(i);if (i == str.length) break;
          }p.id = Number(p.id);
        }if (str.charAt(++i)) {
          try {
            p.data = json.parse(str.substr(i));
          } catch (e) {
            return error();
          }
        }debug("decoded %s as %j", str, p);return p;
      }Decoder.prototype.destroy = function () {
        if (this.reconstructor) {
          this.reconstructor.finishedReconstruction();
        }
      };function BinaryReconstructor(packet) {
        this.reconPack = packet;this.buffers = [];
      }BinaryReconstructor.prototype.takeBinaryData = function (binData) {
        this.buffers.push(binData);if (this.buffers.length == this.reconPack.attachments) {
          var packet = binary.reconstructPacket(this.reconPack, this.buffers);this.finishedReconstruction();return packet;
        }return null;
      };BinaryReconstructor.prototype.finishedReconstruction = function () {
        this.reconPack = null;this.buffers = [];
      };function error(data) {
        return { type: exports.ERROR, data: "parser error" };
      }
    }, { "./binary": 46, "./is-buffer": 48, "component-emitter": 49, debug: 39, isarray: 43, json3: 50 }], 48: [function (_dereq_, module, exports) {
      (function (global) {
        module.exports = isBuf;function isBuf(obj) {
          return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;
        }
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 49: [function (_dereq_, module, exports) {
      arguments[4][15][0].apply(exports, arguments);
    }, { dup: 15 }], 50: [function (_dereq_, module, exports) {
      (function (global) {
        (function () {
          var isLoader = typeof define === "function" && define.amd;var objectTypes = { "function": true, object: true };var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;var root = objectTypes[typeof window] && window || this,
              freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
            root = freeGlobal;
          }function runInContext(context, exports) {
            context || (context = root["Object"]());exports || (exports = root["Object"]());var Number = context["Number"] || root["Number"],
                String = context["String"] || root["String"],
                Object = context["Object"] || root["Object"],
                Date = context["Date"] || root["Date"],
                SyntaxError = context["SyntaxError"] || root["SyntaxError"],
                TypeError = context["TypeError"] || root["TypeError"],
                Math = context["Math"] || root["Math"],
                nativeJSON = context["JSON"] || root["JSON"];if (typeof nativeJSON == "object" && nativeJSON) {
              exports.stringify = nativeJSON.stringify;exports.parse = nativeJSON.parse;
            }var objectProto = Object.prototype,
                getClass = objectProto.toString,
                isProperty,
                forEach,
                undef;var isExtended = new Date(-0xc782b5b800cec);try {
              isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
            } catch (exception) {}function has(name) {
              if (has[name] !== undef) {
                return has[name];
              }var isSupported;if (name == "bug-string-char-index") {
                isSupported = "a"[0] != "a";
              } else if (name == "json") {
                isSupported = has("json-stringify") && has("json-parse");
              } else {
                var value,
                    serialized = "{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";if (name == "json-stringify") {
                  var stringify = exports.stringify,
                      stringifySupported = typeof stringify == "function" && isExtended;if (stringifySupported) {
                    (value = function () {
                      return 1;
                    }).toJSON = value;try {
                      stringifySupported = stringify(0) === "0" && stringify(new Number()) === "0" && stringify(new String()) == '""' && stringify(getClass) === undef && stringify(undef) === undef && stringify() === undef && stringify(value) === "1" && stringify([value]) == "[1]" && stringify([undef]) == "[null]" && stringify(null) == "null" && stringify([undef, getClass, null]) == "[null,null,null]" && stringify({ a: [value, true, false, null, "\x00\b\n\f\r	"] }) == serialized && stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && stringify(new Date(-864e13)) == '"-271821-04-20T00:00:00.000Z"' && stringify(new Date(864e13)) == '"+275760-09-13T00:00:00.000Z"' && stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
                    } catch (exception) {
                      stringifySupported = false;
                    }
                  }isSupported = stringifySupported;
                }if (name == "json-parse") {
                  var parse = exports.parse;if (typeof parse == "function") {
                    try {
                      if (parse("0") === 0 && !parse(false)) {
                        value = parse(serialized);var parseSupported = value["a"].length == 5 && value["a"][0] === 1;if (parseSupported) {
                          try {
                            parseSupported = !parse('"	"');
                          } catch (exception) {}if (parseSupported) {
                            try {
                              parseSupported = parse("01") !== 1;
                            } catch (exception) {}
                          }if (parseSupported) {
                            try {
                              parseSupported = parse("1.") !== 1;
                            } catch (exception) {}
                          }
                        }
                      }
                    } catch (exception) {
                      parseSupported = false;
                    }
                  }isSupported = parseSupported;
                }
              }return has[name] = !!isSupported;
            }if (!has("json")) {
              var functionClass = "[object Function]",
                  dateClass = "[object Date]",
                  numberClass = "[object Number]",
                  stringClass = "[object String]",
                  arrayClass = "[object Array]",
                  booleanClass = "[object Boolean]";var charIndexBuggy = has("bug-string-char-index");if (!isExtended) {
                var floor = Math.floor;var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];var getDay = function getDay(year, month) {
                  return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
                };
              }if (!(isProperty = objectProto.hasOwnProperty)) {
                isProperty = function (property) {
                  var members = {},
                      constructor;if ((members.__proto__ = null, members.__proto__ = { toString: 1 }, members).toString != getClass) {
                    isProperty = function (property) {
                      var original = this.__proto__,
                          result = (property in (this.__proto__ = null, this));this.__proto__ = original;return result;
                    };
                  } else {
                    constructor = members.constructor;isProperty = function (property) {
                      var parent = (this.constructor || constructor).prototype;return property in this && !(property in parent && this[property] === parent[property]);
                    };
                  }members = null;return isProperty.call(this, property);
                };
              }forEach = function (object, callback) {
                var size = 0,
                    Properties,
                    members,
                    property;(Properties = function () {
                  this.valueOf = 0;
                }).prototype.valueOf = 0;members = new Properties();for (property in members) {
                  if (isProperty.call(members, property)) {
                    size++;
                  }
                }Properties = members = null;if (!size) {
                  members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        length;var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;for (property in object) {
                      if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                        callback(property);
                      }
                    }for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
                  };
                } else if (size == 2) {
                  forEach = function (object, callback) {
                    var members = {},
                        isFunction = getClass.call(object) == functionClass,
                        property;for (property in object) {
                      if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                        callback(property);
                      }
                    }
                  };
                } else {
                  forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        isConstructor;for (property in object) {
                      if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                        callback(property);
                      }
                    }if (isConstructor || isProperty.call(object, property = "constructor")) {
                      callback(property);
                    }
                  };
                }return forEach(object, callback);
              };if (!has("json-stringify")) {
                var Escapes = { 92: "\\\\", 34: '\\"', 8: "\\b", 12: "\\f", 10: "\\n", 13: "\\r", 9: "\\t" };var leadingZeroes = "000000";var toPaddedString = function toPaddedString(width, value) {
                  return (leadingZeroes + (value || 0)).slice(-width);
                };var unicodePrefix = "\\u00";var quote = function quote(value) {
                  var result = '"',
                      index = 0,
                      length = value.length,
                      useCharIndex = !charIndexBuggy || length > 10;var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);for (; index < length; index++) {
                    var charCode = value.charCodeAt(index);switch (charCode) {case 8:case 9:case 10:case 12:case 13:case 34:case 92:
                        result += Escapes[charCode];break;default:
                        if (charCode < 32) {
                          result += unicodePrefix + toPaddedString(2, charCode.toString(16));break;
                        }result += useCharIndex ? symbols[index] : value.charAt(index);}
                  }return result + '"';
                };var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
                  var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;try {
                    value = object[property];
                  } catch (exception) {}if (typeof value == "object" && value) {
                    className = getClass.call(value);if (className == dateClass && !isProperty.call(value, "toJSON")) {
                      if (value > -1 / 0 && value < 1 / 0) {
                        if (getDay) {
                          date = floor(value / 864e5);for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);date = 1 + date - getDay(year, month);time = (value % 864e5 + 864e5) % 864e5;hours = floor(time / 36e5) % 24;minutes = floor(time / 6e4) % 60;seconds = floor(time / 1e3) % 60;milliseconds = time % 1e3;
                        } else {
                          year = value.getUTCFullYear();month = value.getUTCMonth();date = value.getUTCDate();hours = value.getUTCHours();minutes = value.getUTCMinutes();seconds = value.getUTCSeconds();milliseconds = value.getUTCMilliseconds();
                        }value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + "." + toPaddedString(3, milliseconds) + "Z";
                      } else {
                        value = null;
                      }
                    } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, "toJSON"))) {
                      value = value.toJSON(property);
                    }
                  }if (callback) {
                    value = callback.call(object, property, value);
                  }if (value === null) {
                    return "null";
                  }className = getClass.call(value);if (className == booleanClass) {
                    return "" + value;
                  } else if (className == numberClass) {
                    return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
                  } else if (className == stringClass) {
                    return quote("" + value);
                  }if (typeof value == "object") {
                    for (length = stack.length; length--;) {
                      if (stack[length] === value) {
                        throw TypeError();
                      }
                    }stack.push(value);results = [];prefix = indentation;indentation += whitespace;if (className == arrayClass) {
                      for (index = 0, length = value.length; index < length; index++) {
                        element = serialize(index, value, callback, properties, whitespace, indentation, stack);results.push(element === undef ? "null" : element);
                      }result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
                    } else {
                      forEach(properties || value, function (property) {
                        var element = serialize(property, value, callback, properties, whitespace, indentation, stack);if (element !== undef) {
                          results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                        }
                      });result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
                    }stack.pop();return result;
                  }
                };exports.stringify = function (source, filter, width) {
                  var whitespace, callback, properties, className;if (objectTypes[typeof filter] && filter) {
                    if ((className = getClass.call(filter)) == functionClass) {
                      callback = filter;
                    } else if (className == arrayClass) {
                      properties = {};for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));
                    }
                  }if (width) {
                    if ((className = getClass.call(width)) == numberClass) {
                      if ((width -= width % 1) > 0) {
                        for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
                      }
                    } else if (className == stringClass) {
                      whitespace = width.length <= 10 ? width : width.slice(0, 10);
                    }
                  }return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
                };
              }if (!has("json-parse")) {
                var fromCharCode = String.fromCharCode;var Unescapes = { 92: "\\", 34: '"', 47: "/", 98: "\b", 116: "	", 110: "\n", 102: "\f", 114: "\r" };var Index, Source;var abort = function abort() {
                  Index = Source = null;throw SyntaxError();
                };var lex = function lex() {
                  var source = Source,
                      length = source.length,
                      value,
                      begin,
                      position,
                      isSigned,
                      charCode;while (Index < length) {
                    charCode = source.charCodeAt(Index);switch (charCode) {case 9:case 10:case 13:case 32:
                        Index++;break;case 123:case 125:case 91:case 93:case 58:case 44:
                        value = charIndexBuggy ? source.charAt(Index) : source[Index];Index++;return value;case 34:
                        for (value = "@", Index++; Index < length;) {
                          charCode = source.charCodeAt(Index);if (charCode < 32) {
                            abort();
                          } else if (charCode == 92) {
                            charCode = source.charCodeAt(++Index);switch (charCode) {case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:
                                value += Unescapes[charCode];Index++;break;case 117:
                                begin = ++Index;for (position = Index + 4; Index < position; Index++) {
                                  charCode = source.charCodeAt(Index);if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                                    abort();
                                  }
                                }value += fromCharCode("0x" + source.slice(begin, Index));break;default:
                                abort();}
                          } else {
                            if (charCode == 34) {
                              break;
                            }charCode = source.charCodeAt(Index);begin = Index;while (charCode >= 32 && charCode != 92 && charCode != 34) {
                              charCode = source.charCodeAt(++Index);
                            }value += source.slice(begin, Index);
                          }
                        }if (source.charCodeAt(Index) == 34) {
                          Index++;return value;
                        }abort();default:
                        begin = Index;if (charCode == 45) {
                          isSigned = true;charCode = source.charCodeAt(++Index);
                        }if (charCode >= 48 && charCode <= 57) {
                          if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                            abort();
                          }isSigned = false;for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++);if (source.charCodeAt(Index) == 46) {
                            position = ++Index;for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);if (position == Index) {
                              abort();
                            }Index = position;
                          }charCode = source.charCodeAt(Index);if (charCode == 101 || charCode == 69) {
                            charCode = source.charCodeAt(++Index);if (charCode == 43 || charCode == 45) {
                              Index++;
                            }for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);if (position == Index) {
                              abort();
                            }Index = position;
                          }return +source.slice(begin, Index);
                        }if (isSigned) {
                          abort();
                        }if (source.slice(Index, Index + 4) == "true") {
                          Index += 4;return true;
                        } else if (source.slice(Index, Index + 5) == "false") {
                          Index += 5;return false;
                        } else if (source.slice(Index, Index + 4) == "null") {
                          Index += 4;return null;
                        }abort();}
                  }return "$";
                };var get = function get(value) {
                  var results, hasMembers;if (value == "$") {
                    abort();
                  }if (typeof value == "string") {
                    if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                      return value.slice(1);
                    }if (value == "[") {
                      results = [];for (;; hasMembers || (hasMembers = true)) {
                        value = lex();if (value == "]") {
                          break;
                        }if (hasMembers) {
                          if (value == ",") {
                            value = lex();if (value == "]") {
                              abort();
                            }
                          } else {
                            abort();
                          }
                        }if (value == ",") {
                          abort();
                        }results.push(get(value));
                      }return results;
                    } else if (value == "{") {
                      results = {};for (;; hasMembers || (hasMembers = true)) {
                        value = lex();if (value == "}") {
                          break;
                        }if (hasMembers) {
                          if (value == ",") {
                            value = lex();if (value == "}") {
                              abort();
                            }
                          } else {
                            abort();
                          }
                        }if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                          abort();
                        }results[value.slice(1)] = get(lex());
                      }return results;
                    }abort();
                  }return value;
                };var update = function update(source, property, callback) {
                  var element = walk(source, property, callback);if (element === undef) {
                    delete source[property];
                  } else {
                    source[property] = element;
                  }
                };var walk = function walk(source, property, callback) {
                  var value = source[property],
                      length;if (typeof value == "object" && value) {
                    if (getClass.call(value) == arrayClass) {
                      for (length = value.length; length--;) {
                        update(value, length, callback);
                      }
                    } else {
                      forEach(value, function (property) {
                        update(value, property, callback);
                      });
                    }
                  }return callback.call(source, property, value);
                };exports.parse = function (source, callback) {
                  var result, value;Index = 0;Source = "" + source;result = get(lex());if (lex() != "$") {
                    abort();
                  }Index = Source = null;return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
                };
              }
            }exports["runInContext"] = runInContext;return exports;
          }if (freeExports && !isLoader) {
            runInContext(root, freeExports);
          } else {
            var nativeJSON = root.JSON,
                previousJSON = root["JSON3"],
                isRestored = false;var JSON3 = runInContext(root, root["JSON3"] = { noConflict: function noConflict() {
                if (!isRestored) {
                  isRestored = true;root.JSON = nativeJSON;root["JSON3"] = previousJSON;nativeJSON = previousJSON = null;
                }return JSON3;
              } });root.JSON = { parse: JSON3.parse, stringify: JSON3.stringify };
          }if (isLoader) {
            define(function () {
              return JSON3;
            });
          }
        }).call(this);
      }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    }, {}], 51: [function (_dereq_, module, exports) {
      module.exports = toArray;function toArray(list, index) {
        var array = [];index = index || 0;for (var i = index || 0; i < list.length; i++) {
          array[i - index] = list[i];
        }return array;
      }
    }, {}] }, {}, [31])(31);
});

cc._RFpop();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},["data","biz-socket","socket.io","main","directionCtrl","index","lodash","fireCtrl","controller"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
